OBJECT Table 60100 CDC Match Filters
{
  OBJECT-PROPERTIES
  {
    Date=22/07/21;
    Time=12:02:47;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
  }
  FIELDS
  {
    { 1   ;   ;Template No.        ;Code20        ;TableRelation="CDC Template".No.;
                                                   DataClassification=ToBeClassified }
    { 5   ;   ;Table No.           ;Integer       ;DataClassification=ToBeClassified }
    { 10  ;   ;Field No.           ;Integer       ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table No.));
                                                   DataClassification=ToBeClassified }
    { 15  ;   ;Filter Field        ;Code20        ;TableRelation="CDC Template Field".Code WHERE (Template No.=FIELD(Template No.));
                                                   DataClassification=ToBeClassified }
  }
  KEYS
  {
    {    ;Template No.,Table No.,Field No.        ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    BEGIN
    END.
  }
}

OBJECT Codeunit 60100 CDC Custom filters Subscr.
{
  OBJECT-PROPERTIES
  {
    Date=03/08/21;
    Time=12:02:30;
    Modified=Yes;
    Version List=;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,6085709,OnAfterSetDocFilters)]
    LOCAL PROCEDURE OnAfterSetDocFilteres@1100288001(Document@1100288000 : Record 6085590;VAR PurchHeader@1100288001 : Record 38;VAR PurchLine@1100288002 : Record 39;VAR PurchRcptLine@1100288003 : Record 121;VAR ReturnShptLine@1100288004 : Record 6651);
    VAR
      RecRef@1100288011 : RecordRef;
      FieldRef@1100288010 : FieldRef;
      RecIDMgt@1100288009 : Codeunit 6085604;
      MatchFilters@1100288008 : Record 60100;
      CaptureMgt@1100288007 : Codeunit 6085576;
      FilterStr@1100288006 : Text;
      Field@1100288005 : Record 6085580;
    BEGIN
      RecRef.GETTABLE(PurchRcptLine);
      MatchFilters.SETRANGE("Template No.",Document."Template No.");
      MatchFilters.SETRANGE("Table No.",DATABASE::"Purch. Rcpt. Line");
      IF NOT MatchFilters.FINDSET THEN
        EXIT;

      REPEAT
          FilterStr := CaptureMgt.GetText(Document,Field.Type::Header,MatchFilters."Filter Field",0);
          RecIDMgt.FilterRecRef(RecRef,MatchFilters."Field No.",FilterStr);
      UNTIL MatchFilters.NEXT = 0;

      RecRef.SETTABLE(PurchRcptLine);
    END;

    BEGIN
    END.
  }
}

OBJECT Codeunit 6085709 CDC Purch. Doc. - Management
{
  OBJECT-PROPERTIES
  {
    Date=03/08/21;
    Time=11:57:48;
    Modified=Yes;
    Version List=DCW13.70.00.7.02;
  }
  PROPERTIES
  {
    Permissions=TableData 6085700=rimd,
                TableData 6085702=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CaptureMgt@1000000000 : Codeunit 6085576;
      Text001@1160040001 : TextConst 'ENU="This %1 is matched to another %1: %2=%3, %4=%5, %6=%7.\\Please delete the matched %1 before you delete this %2.";ESP="Este %1 est† asignado a otro %1: %2=%3, %4=%5, %6=%7.\\Elimine el asignado %1 antes de eliminar este %2."';
      Text002@1160040000 : TextConst 'ENU=%1 has already been translated to %2 %3\\Do you want to update the translation?;ESP=%1 ya ha sido traducido a %2 %3\\®Desea actualizar la traducci¢n?';
      Text003@1160040002 : TextConst 'ENU=Amount Distribution %1:;ESP=Distribuci¢n importe est†ndar %1:';
      Text004@1160040003 : TextConst 'ENU=Standard Amount Distribution Code %1 has been set to be enabled for selected vendors only.\\However vendor %2 has not been been configured as one of the selected vendors.;ESP="C¢digo distribuci¢n importe est†ndar %1 ha sido configurado para ser habilitado solo por los proveedores seleccionados.\\Sin embargo proveedor %2 no ha sido cnfigurado como uno de los proveedores seleccionados. "';
      Text014@1160040008 : TextConst 'ENU=Amount Excl. VAT does not match\;ESP=Importe excl. IVA no coincide\';
      Text015@1160040007 : TextConst 'ENU=Amount Incl. VAT does not match\;ESP=Importe IVA incl. no coincide\';
      Text016@1160040006 : TextConst 'ENU=" - Imported: %1\";ESP=" - Importado: %1\"';
      Text017@1160040005 : TextConst 'ENU=" - Assigned: %1\";ESP=" - Asignado: %1\"';
      ImpAmtNotEqAsgnAmtMsg@1160040009 : TextConst 'ENU=Imported amount is not the same as the assigned amount.\\;ESP=Importe importado no es el mismo que el importe asignado.\\';
      Text022@1000000023 : TextConst 'ENU=The document was not found.;ESP=No se encontr¢ el documento.';
      Text024@161024020 : TextConst 'ENU=Completely Matched within document variance %1;ESP=Casamiento completo %1';
      Text025@161024021 : TextConst 'ENU=WARNING: Partial Match;ESP=ATENCI‡N: Casamiento parcial';
      Text026@161024022 : TextConst 'ENU=No Match;ESP=No se ha casado nada';
      Text027@1160040004 : TextConst 'ENU=This %1 has not been created from Continia Document Capture.;ESP=Este %1 no ha sido creado desde Continia Document Capture.';
      GLSetup@1160040010 : Record 98;
      DCSetup@1160040011 : Record 6085573;
      MatchInMsg@1160040012 : TextConst 'ENU=%1 out of %2 %3 matched with %4.;ESP=%1 de %2 %3 ha sido vinculado con %4.';
      CombineMsg@1160040014 : TextConst 'ENU=%1 %2 and %3 %4;ESP=%1 %2 y %3 %4';
      PurchaseOrderNosMsg@1160040015 : TextConst 'ENU=Purchase Order;ESP=Pedidos compra';
      PurchaseReceiptNosMsg@1160040016 : TextConst 'ENU=Purchase Receipt;ESP=Albar†n compra';
      ReturnOrderNosMsg@1160040017 : TextConst 'ENU=Return Order;ESP=Devoluciones';
      ReturnShipmentNosMsg@1160040018 : TextConst 'ENU=Return Shipment;ESP=Env°o devoluci¢n';
      FullyMatchedWithMsg@1160040019 : TextConst 'ENU=Fully matched with %1.;ESP=Totalmente vinculado con %1.';
      NoOrderNoFoundMsg@1160040020 : TextConst 'ENU="WARNING: No documents were found for %1 = ''%2''.";ESP="ATENCI‡N: No se encontraron documentos para %1 = ''%2''."';
      GLSetupRead@1160040021 : Boolean;
      DCSetupRead@1160040013 : Boolean;
      NoOrderWithVendFoundMsg@1160040022 : TextConst 'ENU="WARNING: %1 = ''%2'' exists but belongs to another vendor.";ESP="ATENCI‡N: %1 = ''%2'' existe, pero pertenece a otro proveedor."';
      NoOrderWithCurrFoundMsg@1160040023 : TextConst 'ENU="WARNING: %1 = ''%2'' exists but with a different currency.";ESP="ATENCI‡N: %1 = ''%2'' existe, pero con una divisa diferente."';
      OutsideTolerenceMsg@1160040024 : TextConst 'ENU="WARNING: %1 = ''%2'' exists but outside the tolerance settings.";ESP="ATENCI‡N: %1 = ''%2'' existe pero fuera de los par†metros de tolerancia."';
      LocationRequireReceiveMsg@1000 : TextConst 'ENU="WARNING: %1 = ''%2'' exists but Warehouse Receive is required.";ESP="ATENCI‡N: %1 = ''%2'' existe pero en Recepci¢n AlmacÇn es obligatorio."';
      POFullyReceivedMsg@1160040025 : TextConst 'ENU="WARNING: %1 = ''%2'' exists but is fully received.";ESP="ATENCI‡N: %1 = ''%2'' existe pero se recibe totalmente."';
      POFullyReceivedAndInvoicedMsg@1160040026 : TextConst 'ENU="WARNING: %1 = ''%2'' exists but is fully received and invoiced.";ESP="ATENCI‡N: %1 = ''%2'' existe pero est† totalmente recibido y facturado."';
      NoOpenReceiptExistMsg@6085575 : TextConst 'ENU="%1 = ''%2'' exists but no open receipts exists.";ESP="%1 = ''%2'' existe, pero no existe ning£n recibo abierto."';
      NoOpenReceiptwLRRExistMsg@6085604 : TextConst 'ENU="WARNING: %1 = ''%2'' exists but no open receipts exists (Warehouse Receive is required).";ESP="ATENCI‡N: %1 = ''%2'' existe pero no existen albaranes abiertos (se requiere Recepci¢n AlmacÇn)."';
      ReturnShptExistMsg@6085578 : TextConst 'ENU="%1 = ''%2'' exists but no open return shipments exists.";ESP="%1 = ''%2'' existe pero no existe ninguna devoluci¢n de env°os abiertos."';
      MatchedToOtherDocErr@6085579 : TextConst 'ENU=You cannot delete %1 %2, Line No. %3, as it is matched to %4 %5, Line No. %6.\\You must delete the matched line (%4 %5, Line No. %6.) first.;ESP=No puede borrar %1 %2, L°nea nß %3, ya que se corresponde con %4 %5, L°nea nß %6.\\Debe eliminar la l°nea casada (%4 %5, L°nea nß %6.) primero.';
      NegativeErr@6085576 : TextConst 'ENU=%1 must be positive.;ESP=%1 debe ser positivo.';
      DirectUnitCostInvCap@6085577 : TextConst 'ENU=Direct Unit Cost (Invoice);ESP=Coste unit. directo (Factura)';
      DirectUnitCostCMCap@6085580 : TextConst 'ENU=Direct Unit Cost (Cr. Memo);ESP=Coste unit. directo (Abono)';
      MultipleLinesMatchErr@6085581 : TextConst 'ENU=%1 cannot be updated when the %2 is matched multiple lines.;ESP=%1 no se puede actualizar cuando el %2 coincide con varias l°neas.';
      OrderLineCap@6085582 : TextConst 'ENU=Order Line;ESP=L°nea pedido';
      ReturnOrderLineCap@6085583 : TextConst 'ENU=Return Order Line;ESP=L°nea pedido devoluci¢n';
      LineDiscountPctInvCap@6085584 : TextConst 'ENU=Line Discount % (Invoice);ESP=% Descuento l°nea (Factura)';
      LineDiscountPctCMCap@6085585 : TextConst 'ENU=Line Discount % (Cr. Memo);ESP=% Descuento l°nea (Abono)';
      MustBePositiveErr@6085586 : TextConst 'ENU=%1 must be positive when %2 is positive.;ESP=%1 debe ser positivo cuando %2 es positivo.';
      MustBeNegativeErr@6085587 : TextConst 'ENU=%1 must be negative when %2 is negative.;ESP=%1 debe ser negativo cuando %2 es negativo.';
      MatchedQuantityCap@6085588 : TextConst 'ENU=Matched Quantity;ESP=Cantidad casada';
      NothingToMatchErr@6085589 : TextConst 'ENU=There is nothing left to match on the line.;ESP=No hay nada m†s para casar en la l°nea.';
      LeftToMatchErr@6085590 : TextConst 'ENU=It is not possible to match %1 as there is only %2 left to match on the line.;ESP=No es posible casar %1 ya que s¢lo queda %2 por casar en la l°nea.';
      WarehouseReceiveErr@6085591 : TextConst 'ENU="Warehouse Receive is required for %1 = %2, %3 = %4, %5 = %6.";ESP="Manipulaci¢n almacÇn requerido para %1 = %2, %3 = %4, %5 = %6."';
      WarehouseShipErr@6085607 : TextConst 'ENU="Warehouse Ship is required for %1 = %2, %3 = %4, %5 = %6.";ESP="Env°o de almacÇn requerido para %1 = %2, %3 = %4, %5 = %6."';
      WarehouseOperationsMsg@6085608 : TextConst 'ENU=The entered information may be disregarded by warehouse operations.;ESP=La informaci¢n introducida puede ser ignorada por operaciones almacÇn.';
      ManualMatchTxt@6085592 : TextConst 'ENU=Manual Match;ESP=Casar manualmente';
      PurchDocMatchAginst@6085593 : 'No Match,Document,Document line,Multiple lines';
      DocumentLineMatchQst@6085594 : TextConst 'ENU=The %1 is matched to a single Document Line and the %2 on the Document Line is %3. Are you sure you want to update %4 to %5?;ESP=El %1 est† casado con una sola l°nea de documento y el %2 en la l°nea de documento es %3. ®Est† seguro de que desea actualizar %4 a %5?';
      NoMatchErr@6085595 : TextConst 'ENU=%1 must not be 0.;ESP=%1 no debe ser 0.';
      InvoiceQtyRelToOrderErr@6085599 : TextConst 'ENU=The quantity (%3) that you are trying to invoice is greater than the outstanding quantity in order %1. You cannnot invoice more than %2 units.;ESP=La cantidad (%3) que est† intentando facturar es mayor que la cantidad pendiente en el pedido %1. No puede facturar m†s de %2 unidades.';
      CreditQtyRelToReturnOrderErr@6085598 : TextConst 'ENU=The quantity (%3) that you are trying to credit is greater than the outstanding quantity in return order %1. You cannnot credit more than %2 units.;ESP=La cantidad (%3) que est† intentando abonar es mayor que la cantidad pendiente en el pedido de devoluci¢n %1. No puede abonar m†s de %2 unidades.';
      QtyToOrderErr@6085597 : TextConst 'ENU=The quantity (%2) that you are trying to order is lower than the quantity matched against this order. You must order at least %1 units.;ESP=La cantidad (%2) que intenta introducir en el pedido es inferior a la cantidad casada con este pedido. Debe pedir al menos %1 unidades.';
      QtyToReturnErr@6085596 : TextConst 'ENU=The quantity (%2) that you are trying to return is lower than the quantity matched against this return order. You must return at least %1 units.;ESP=La cantidad (%2) que intenta introducir en la devoluci¢n es inferior a la cantidad casada con este pedido de devoluci¢n. Debe devolver al menos %1 unidades.';
      PartialMatchToReceiptWithTrack@6085603 : TextConst 'ENU=It is not possible to make a partial match between Document %1 and Receipt Line (%2 %3) as multiple tracking lines exists for the receipt line.;ESP=No es posible realizar un casamiento parcial entre el documento %1 y la l°nea de ticket (%2 %3) al existir m£ltiples l°neas de seguimiento para la l°nea del ticket.';
      PartialMatchToReturnsWithTrack@6085602 : TextConst 'ENU=It is not possible to make a partial match between Document %1 and Return Shipment Line (%2 %3) as multiple tracking lines exists for the return shipment line.;ESP=No es posible realizar un casamiento parcial entre el documento %1 y la l°nea de env°o de devoluci¢n (%2 %3) al existir m£ltiples l°neas de seguimiento para la l°nea de env°o de devoluci¢n.';
      MatchToOrderWithTrackingErr@6085601 : TextConst 'ENU=Match to Order is not supported for items with purchase inbound tracking enabled or for order lines where tracking lines exists.;ESP=Casar a pedido no est† disponible para productos con seguimiento de entrada activado o para l°neas de pedido d¢nde existan l°neas de seguimiento.';
      MatchToReturnWithTrackingErr@6085600 : TextConst 'ENU=Match to Return Order is not supported for items with purchase outbound tracking enabled or for order lines where tracking lines exists.;ESP=Casar a devoluci¢n de pedido no est† disponible para productos con seguimiento de salida activado o para l°neas de pedido d¢nde existan l°neas de seguimiento.';
      OneAttachedFileMsg@6085606 : TextConst 'ENU=1 attached file;ESP=1 archivo adjunto';
      MultipleAttachedFilesMsg@6085605 : TextConst 'ENU=%1 attached files;ESP=%1 archivos adjuntos';
      PurchLineLocationCodeErr@6085609 : TextConst 'ENU=%1 %2 does not exist (%3 %4, %5 %6).;ESP=%1 %2 no existe (%3 %4, %5 %6).';
      LineRecogTotalOutsideVariance@6085573 : TextConst 'ENU=The difference (%1) between Line Amount on the matched order/receipt lines and the document lines is outside the allowed document variance.;ESP=La diferencia (%1) entre el importe de la l°nea en el pedido/albar†n casado y las l°neas del documento est† fuera de la desviaci¢n permitida.';

    [External]
    PROCEDURE GetIsInvoice@1000000000(VAR Document@1000000000 : Record 6085590) IsInvoice : Boolean;
    VAR
      Field@1000000001 : Record 6085580;
      FieldRule@1000000002 : Record 6085583;
      Handled@1000 : Boolean;
    BEGIN
      Field.GET(Document."Template No.",Field.Type::Header,'DOCTYPE');
      CaptureMgt.FilterRule(Field,FieldRule);
      FieldRule.FINDFIRST;
      OnAfterGetIsInvoice(Document,Field,IsInvoice,Handled);
      IF NOT Handled THEN
        EXIT(UPPERCASE(FieldRule.Rule) <> UPPERCASE(CaptureMgt.GetText(Document,Field.Type::Header,'DOCTYPE',0)));
    END;

    [External]
    PROCEDURE GetDocumentNo@1000000001(VAR Document@1000000000 : Record 6085590) : Code[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'DOCNO',0),1,50));
    END;

    PROCEDURE GetPostingDate@1160040003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'POSTINGDATE',0));
    END;

    [External]
    PROCEDURE GetDocumentDate@1000000003(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DOCDATE',0));
    END;

    [External]
    PROCEDURE GetDueDate@1000000002(VAR Document@1000000000 : Record 6085590) : Date;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDate(Document,Field.Type::Header,'DUEDATE',0));
    END;

    [External]
    PROCEDURE GetOurContact@1000000004(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'OURCONTACT',0),1,250));
    END;

    [External]
    PROCEDURE GetOurDocumentNo@1000000005(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'OURDOCNO',0),1,250));
    END;

    [External]
    PROCEDURE GetCurrencyCode@1000000006(VAR Document@1000000000 : Record 6085590) : Code[10];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'CURRCODE',0),1,10));
    END;

    [External]
    PROCEDURE GetAmountExclVAT@1000000007(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTEXCLVAT',0));
    END;

    [External]
    PROCEDURE GetSubtractedAmountExclVAT@1160140009(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF NOT Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT') THEN
        EXIT;

      EXIT(GetAmountExclVAT(Document) - CaptureMgt.GetAmountToSubtract(Document,Field));
    END;

    [External]
    PROCEDURE GetSubtractedAmountInclVAT@6085598(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF NOT Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTINCLVAT') THEN
        EXIT;

      EXIT(GetAmountInclVAT(Document) - CaptureMgt.GetAmountToSubtract(Document,Field));
    END;

    [External]
    PROCEDURE GetAllAmountsExclVAT@161024023(VAR Document@1000000000 : Record 6085590) TotalAmount : Decimal;
    VAR
      Field@161024012 : Record 6085580;
      Template@6085573 : Record 6085579;
    BEGIN
      Document.TESTFIELD("Template No.");
      Template.GET(Document."Template No.");

      IF Template."Prices Including VAT" THEN
        TotalAmount := GetAmountInclVAT(Document) - GetVATAmount(Document)
      ELSE BEGIN
        Field.SETRANGE("Template No.",Document."Template No.");
        Field.SETRANGE(Type,Field.Type::Header);
        Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");
        Field.SETRANGE("Subtract from Amount Field",'');
        Field.SETRANGE("Data Type",Field."Data Type"::Number);
        IF Field.FINDSET THEN
          REPEAT
            TotalAmount := TotalAmount + CaptureMgt.GetDecimal(Document,Field.Type::Header,Field.Code,0);
          UNTIL Field.NEXT = 0;
      END;
    END;

    [External]
    PROCEDURE GetAmountInclVAT@1000000008(VAR Document@1000000000 : Record 6085590) TotalAmount : Decimal;
    VAR
      Field@161024012 : Record 6085580;
      Template@6085573 : Record 6085579;
    BEGIN
      Document.TESTFIELD("Template No.");
      Template.GET(Document."Template No.");

      IF Template."Prices Including VAT" THEN BEGIN
        Field.SETRANGE("Template No.",Document."Template No.");
        Field.SETRANGE(Type,Field.Type::Header);
        Field.SETFILTER("Transfer Amount to Document",'<>%1',Field."Transfer Amount to Document"::" ");
        Field.SETRANGE("Subtract from Amount Field",'');
        Field.SETRANGE("Data Type",Field."Data Type"::Number);
        IF Field.FINDSET THEN
          REPEAT
            TotalAmount := TotalAmount + CaptureMgt.GetDecimal(Document,Field.Type::Header,Field.Code,0);
          UNTIL Field.NEXT = 0;
      END ELSE
        TotalAmount := CaptureMgt.GetDecimal(Document,Field.Type::Header,'AMOUNTINCLVAT',0);
    END;

    [External]
    PROCEDURE GetVATAmount@1000000009(VAR Document@1000000000 : Record 6085590) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Header,'VATAMOUNT',0));
    END;

    [External]
    PROCEDURE GetAmountToMatch@161024031(VAR Document@161024012 : Record 6085590) Amount : Decimal;
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      Field.SETRANGE("Template No.",Document."Template No.");
      Field.SETRANGE(Type,Field.Type::Header);
      Field.SETRANGE("Data Type",Field."Data Type"::Number);
      Field.SETRANGE("Transfer Amount to Document",Field."Transfer Amount to Document"::"If lines are not recognised");
      Field.SETRANGE("Subtract from Amount Field",'');
      IF Field.FINDSET THEN
        REPEAT
          Amount += CaptureMgt.GetDecimal(Document,Field.Type,Field.Code,0);
          Amount -= CaptureMgt.GetAmountToSubtract(Document,Field);
        UNTIL Field.NEXT = 0;
    END;

    PROCEDURE GetPaymentId@1000000011(VAR Document@1000000000 : Record 6085590) : Text[50];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'PAYMENT-ID',0),1,50));
    END;

    [External]
    PROCEDURE GetPostingDescription@1000000012(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'POSTINGDESC',0),1,250));
    END;

    [External]
    PROCEDURE GetGLAccountNo@161024022(VAR Document@1000000000 : Record 6085590;Suffex@161024012 : Code[10]) : Text[250];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'GLACCOUNTNO' + Suffex,0),1,250));
    END;

    [External]
    PROCEDURE GetLineAccountNo@1000000013(VAR Document@1000000000 : Record 6085590;LineNo@1000000001 : Integer) : Code[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Line,'NO',LineNo),1,250));
    END;

    PROCEDURE GetLineGTINNo@6086200(VAR Document@1000000000 : Record 6085590;LineNo@1000000001 : Integer) : Code[14];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Line,'ITEMGTIN',LineNo),1,14));
    END;

    [External]
    PROCEDURE GetLineDescription@1000000014(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Line,'DESC',LineNo),1,250));
    END;

    [External]
    PROCEDURE GetLineQuantity@1000000015(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'QUANTITY',LineNo));
    END;

    [External]
    PROCEDURE GetLineUnitCost@1000000016(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'UNITCOST',LineNo));
    END;

    [External]
    PROCEDURE GetLineDiscAmount@1000000017(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCAMOUNT',LineNo));
    END;

    [External]
    PROCEDURE GetLineDiscPct@1000000018(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'DISCPCT',LineNo));
    END;

    [External]
    PROCEDURE GetLineAmount@1000000019(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
      Handled@6085290 : Boolean;
      LineAmount@6085291 : Decimal;
    BEGIN
      OnBeforeGetLineAmount(Document,LineNo,LineAmount,Handled);
      IF Handled THEN
        EXIT(LineAmount)
      ELSE
        EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'LINEAMOUNT',LineNo));
    END;

    [External]
    PROCEDURE GetLineOtherCharges@3(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'OTHERCHARGES',LineNo));
    END;

    [External]
    PROCEDURE GetLineUnitCharge@4(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer) : Decimal;
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetDecimal(Document,Field.Type::Line,'UNITCHARGE',LineNo));
    END;

    [External]
    PROCEDURE GetLineUnitOfMeasure@6085606(VAR Document@1000000001 : Record 6085590;LineNo@1000000000 : Integer;VAR TransferBlank@6085601 : Boolean) UOM : Text[250];
    VAR
      Field@161024012 : Record 6085580;
      PurchLine@6085600 : Record 39;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Line,'QTYUOM') THEN BEGIN
        TransferBlank := Field."Transfer Blank Values";
        EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type,Field.Code,LineNo),1,250));
      END;
    END;

    PROCEDURE GetOurDocNoDesc@1000000025(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'OURDOCNO') THEN
        EXIT(Field."Field Name");
    END;

    PROCEDURE GetAmountExclVATDesc@1000000027(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'AMOUNTEXCLVAT') THEN
        EXIT(Field."Field Name");
    END;

    [External]
    PROCEDURE GetDocDateDesc@1000000026(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'DOCDATE') THEN
        EXIT(Field."Field Name");
    END;

    [External]
    PROCEDURE GetDueDateDesc@1000000029(VAR Document@1000000000 : Record 6085590) : Text[250];
    VAR
      Field@161024012 : Record 6085580;
    BEGIN
      IF Field.GET(Document."Template No.",Field.Type::Header,'DUEDATE') THEN
        EXIT(Field."Field Name");
    END;

    [External]
    PROCEDURE GetPurchPostingDate@1160040027(Document@1160040001 : Record 6085590;Template@1160040002 : Record 6085579) ReturnDate : Date;
    VAR
      PostingDate@1160040000 : Date;
    BEGIN
      PostingDate := GetPostingDate(Document);

      CASE TRUE OF
        PostingDate <> 0D:
          EXIT(PostingDate);
        Template."Posting Date" = Template."Posting Date"::"Use Document Date (recognized on document)":
          BEGIN
            ReturnDate := GetDocumentDate(Document);
            IF (ReturnDate = 0D) AND Document."Force Register" THEN
              EXIT(TODAY);
          END;
        Template."Posting Date" = Template."Posting Date"::"Use Today":
          EXIT(TODAY);
        Template."Posting Date" = Template."Posting Date"::"Use Work Date":
          EXIT(WORKDATE);
      END;
    END;

    PROCEDURE AutoMatchEnabled@1160040011(VAR Document@1160040000 : Record 6085590) : Boolean;
    VAR
      Template@1160040001 : Record 6085579;
      CDCModuleLicense@6085573 : Codeunit 6086008;
    BEGIN
      IF NOT CDCModuleLicense.IsMatchingActivated(FALSE) THEN
        EXIT(FALSE);

      Template.GET(Document."Template No.");
      IF Template."Purch. Auto Match" THEN BEGIN
        IF GetIsInvoice(Document) THEN
          EXIT(Template."Purch. Match Invoice" <> Template."Purch. Match Invoice"::No)
        ELSE
          EXIT(Template."Purch. Match Credit Memo" <> Template."Purch. Match Credit Memo"::No);
      END ELSE
        EXIT(FALSE);
    END;

    [External]
    PROCEDURE AutoMatch@161024048(VAR Document@1000000000 : Record 6085590);
    VAR
      Template@1160040003 : Record 6085579;
      Field@161024014 : Record 6085580;
      Field2@6085577 : Record 6085580;
      Comment@1000000001 : Record 6085594;
      PurchDocMatch@1160040008 : Record 6085700;
      PurchHeader@1160040010 : Record 38;
      PurchLine@1160040005 : Record 39;
      PurchRcptLine@1160040014 : Record 121;
      ReturnShptLine@1160040019 : Record 6651;
      DocumentLine@1160040011 : TEMPORARY Record 6085596;
      Location@6085576 : Record 14;
      CaptureMgnt@1160040018 : Codeunit 6085576;
      PurchDocType@1160040015 : 'Receipt,Return Shipment,Order,Return Order';
      Matched@161024012 : Boolean;
      MatchReceipt@1160040001 : Boolean;
      MatchOrder@1160040000 : Boolean;
      MatchReturnShipment@1160040007 : Boolean;
      MatchReturnOrder@1160040004 : Boolean;
      InvalidOrderNoFilter@6085574 : Boolean;
      OrderNoNotFound@1160040013 : Boolean;
      ExistWithDiffVendor@1160040024 : Boolean;
      ExistWithDiffCurrency@1160040023 : Boolean;
      ShowTolerenceMsg@1160040027 : Boolean;
      ShowRequireReceiveMsg@1160040026 : Boolean;
      ShowPOFullyReceivedMsg@1160040025 : Boolean;
      ShowNoReceiptExistMsg@1160040022 : Boolean;
      ShowReturnShptExistMsg@1160040021 : Boolean;
      ShowPOFullyReceivedAndInvoiMsg@1160040020 : Boolean;
      InvalidOrderNo@6085578 : Boolean;
      RequireReceive@6085579 : Boolean;
      OrderNoHasIllegalFilterChars@6085580 : Boolean;
      MatchedAmount@1160040002 : Decimal;
      OrderNo@1160040009 : Code[20];
      OrderNoFilter@1160040012 : Code[1024];
      PayToVendorNo@1160040017 : Code[20];
      CurrencyCode@1160040016 : Code[10];
      OurDocumentNo@6085573 : Code[250];
      i@6085575 : Integer;
      CDCModuleLicense@6085581 : Codeunit 6086008;
      Handled@1002 : Boolean;
      MatchedPurchDocs@1000 : Text[1024];
      MatchedPurchDocsPerType@1001 : ARRAY [4] OF Code[1024];
      ErrorWasAdded@6085582 : Boolean;
    BEGIN
      CDCModuleLicense.IsMatchingActivated(TRUE);

      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      OurDocumentNo := GetOurDocumentNo(Document);
      OrderNo := COPYSTR(OurDocumentNo,1,MAXSTRLEN(OrderNo));
      OrderNoHasIllegalFilterChars := CaptureMgt.HasIllegalFilterCharacters(OrderNo);

      InvalidOrderNoFilter := CheckOurOrderNoFilter(OurDocumentNo);

      IF InvalidOrderNoFilter THEN
        OrderNoFilter := OrderNo
      ELSE
        OrderNoFilter := CONVERTSTR(OurDocumentNo,',','|');

      OrderNoFilter := TrimOurOrderNoFilter(OrderNoFilter);

      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      PurchDocMatch.DELETEALL(TRUE);

      Document."Match Status" := Document."Match Status"::Unmatched;
      Document.MODIFY(TRUE);

      Document.DeleteComments(Comment.Area::Match);

      Field.GET(Document."Template No.",Field.Type::Header,'DOCTYPE');
      IF NOT CaptureMgnt.IsValidValue(Field,Document."No.",0) THEN BEGIN
        Comment.AddMsgCenter(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text026,
          'CU6085709_NO_MATCH',TRUE,TRUE,TRUE,ErrorWasAdded);
        EXIT;
      END;

      IF GetIsInvoice(Document) THEN
        PurchDocType := PurchDocType::Order
      ELSE
        PurchDocType := PurchDocType::"Return Order";

      PayToVendorNo := Document.GetSourceID;

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        CurrencyCode := ''
      ELSE
        CurrencyCode := GetCurrencyCode(Document);

      MatchReceipt := (PurchDocType = PurchDocType::Order) AND
        ((Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Receipt Only") OR
        (Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Receipt or Order"));

      MatchOrder := (PurchDocType = PurchDocType::Order) AND
        ((Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Order Only") OR
        (Template."Purch. Match Invoice" = Template."Purch. Match Invoice"::"Receipt or Order"));

      MatchReturnShipment := (PurchDocType = PurchDocType::"Return Order") AND
        ((Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Shipment Only") OR
        (Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Shipment or Return Order"));

      MatchReturnOrder := (PurchDocType = PurchDocType::"Return Order") AND
        ((Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Order Only") OR
        (Template."Purch. Match Credit Memo" = Template."Purch. Match Credit Memo"::"Return Shipment or Return Order"));

      SetPurchHeaderFilters(PurchHeader,PurchDocType,PayToVendorNo,CurrencyCode,TRUE,TRUE);
      SetPurchLineFilters(PurchLine,PurchDocType,PayToVendorNo,CurrencyCode,TRUE,TRUE);
      SetPurchRcptLineFilters(PurchRcptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);
      SetReturnShptLineFilters(ReturnShptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);

      //DC >>
      OnAfterSetDocFilters(Document,PurchHeader,PurchLine,PurchRcptLine,ReturnShptLine);
      //DC <<

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.ISEMPTY THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN NO LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        OnBeforeAutoMatchNoLinesTryMatchAmounts(Document,Template,PurchDocType,Handled);
        IF Handled THEN
          EXIT;

        IF TryToMatchTotalAmount(OrderNoFilter,PurchHeader,PurchLine,PurchRcptLine,ReturnShptLine,Template,Document,PurchDocType,
          PayToVendorNo,CurrencyCode,MatchReceipt,MatchOrder,MatchReturnShipment,MatchReturnOrder,OrderNoNotFound,
          OrderNoHasIllegalFilterChars)
        THEN
          EXIT;

        IF NOT Field.GET(Document."Template No.",Field.Type::Header,'OURDOCNO') THEN
          CLEAR(Field);

        IF OrderNoNotFound THEN BEGIN
          PurchHeader.RESET;
          SetPurchHeaderFilters(PurchHeader,PurchDocType,'','',FALSE,FALSE);
          IF NOT OrderNoHasIllegalFilterChars THEN
            PurchHeader.SETFILTER("No.",OrderNoFilter)
          ELSE
            IF STRLEN(OrderNoFilter) <= MAXSTRLEN(PurchHeader."No.") THEN
              PurchHeader.SETRANGE("No.",OrderNoFilter)
            ELSE BEGIN
              InvalidOrderNo := TRUE;
              ExistWithDiffVendor := FALSE;
              ExistWithDiffCurrency := FALSE;
            END;

          IF NOT InvalidOrderNo THEN BEGIN
            PurchHeader.SETFILTER("Pay-to Vendor No.",'<>%1',PayToVendorNo);
            ExistWithDiffVendor := NOT PurchHeader.ISEMPTY;

            PurchHeader.SETRANGE("Pay-to Vendor No.");
            PurchHeader.SETFILTER("Currency Code",'<>%1',CurrencyCode);
            ExistWithDiffCurrency := NOT PurchHeader.ISEMPTY;
          END;

          IF ExistWithDiffVendor THEN
            Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(NoOrderWithVendFoundMsg,
              Field."Field Name",OurDocumentNo));

          IF ExistWithDiffCurrency THEN
            Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(NoOrderWithCurrFoundMsg,
              Field."Field Name",OurDocumentNo));

          IF NOT ExistWithDiffVendor AND NOT ExistWithDiffCurrency THEN
            Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(NoOrderNoFoundMsg,
              Field."Field Name",OurDocumentNo));
        END ELSE BEGIN
          IF OurDocumentNo <> '' THEN BEGIN
            PurchLine.RESET;
            SetPurchLineFilters(PurchLine,PurchDocType,PayToVendorNo,CurrencyCode,TRUE,TRUE);
            PurchLine.SETRANGE("Outstanding Quantity");
            PurchLine.SETFILTER("Document No.",OrderNoFilter);
            PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
            PurchLine.SETFILTER("No.",'<>''''');
            PurchLine.SETFILTER(Quantity,'<>0');

            IF MatchReceipt THEN BEGIN
              // Tolerence msg if document has quantity recieved not invoiced
              PurchLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
              IF NOT PurchLine.ISEMPTY THEN
                ShowTolerenceMsg := TRUE;
              PurchLine.SETRANGE("Qty. Rcd. Not Invoiced");
            END;

            IF NOT ShowTolerenceMsg THEN
              IF MatchReturnShipment THEN BEGIN
                // Tolerence msg if document has quantity shipped not invoiced
                PurchLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
                IF NOT PurchLine.ISEMPTY THEN
                  ShowTolerenceMsg := TRUE;
                PurchLine.SETRANGE("Return Qty. Shipped Not Invd.");
              END;

            IF NOT ShowTolerenceMsg THEN
              IF MatchOrder OR MatchReturnOrder THEN BEGIN
                // Tolerence msg if document has outstanding quantity for type GL, FA or Item Charge
                PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                PurchLine.SETFILTER(Type,'<>%1&<>%2',PurchLine.Type::" ",PurchLine.Type::Item);
                IF NOT PurchLine.ISEMPTY THEN
                  ShowTolerenceMsg := TRUE
                ELSE BEGIN
                  // Tolerence msg if document has outstanding quantity for type Item where location doesn't require receive
                  PurchLine.SETRANGE(Type,PurchLine.Type::Item);
                  IF PurchLine.FINDSET THEN
                    REPEAT
                      IF NOT Location.RequireReceive(PurchLine."Location Code") THEN
                        ShowTolerenceMsg := TRUE;
                    UNTIL (PurchLine.NEXT = 0) OR ShowTolerenceMsg;
                  PurchLine.SETRANGE("Outstanding Quantity");
                  PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
                END;
              END;

            IF NOT ShowTolerenceMsg THEN
              IF MatchOrder OR MatchReturnOrder THEN BEGIN
                // Require receive if all lines type Item with location that require receive
                PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                RequireReceive := TRUE;
                IF PurchLine.FINDSET THEN BEGIN
                  REPEAT
                    IF ((PurchLine.Type = PurchLine.Type::Item) AND (NOT Location.RequireReceive(PurchLine."Location Code"))) OR
                      (PurchLine.Type <> PurchLine.Type::Item)
                    THEN
                      RequireReceive := FALSE;
                  UNTIL PurchLine.NEXT = 0;
                END ELSE
                  RequireReceive := FALSE;
                PurchLine.SETRANGE("Outstanding Quantity");

                IF NOT (MatchReceipt OR MatchReturnShipment) THEN
                  ShowRequireReceiveMsg := RequireReceive;
              END;

            IF NOT ShowTolerenceMsg AND NOT ShowRequireReceiveMsg THEN BEGIN
              IF MatchOrder OR MatchReturnOrder THEN BEGIN
                PurchLine.SETFILTER("Outstanding Quantity",'<>0');
                IF PurchLine.ISEMPTY THEN
                  ShowPOFullyReceivedMsg := TRUE;
                PurchLine.SETRANGE("Outstanding Quantity",0);
              END;

              IF MatchReceipt THEN BEGIN
                PurchRcptLine.RESET;
                SetPurchRcptLineFilters(PurchRcptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);
                PurchRcptLine.SETFILTER("Order No.",OrderNoFilter);
                IF PurchRcptLine.ISEMPTY THEN
                  ShowNoReceiptExistMsg := TRUE;
              END;

              IF MatchReturnShipment THEN BEGIN
                ReturnShptLine.RESET;
                SetReturnShptLineFilters(ReturnShptLine,PayToVendorNo,CurrencyCode,TRUE,TRUE);
                ReturnShptLine.SETFILTER("Return Order No.",OrderNoFilter);
                IF ReturnShptLine.ISEMPTY THEN
                  ShowReturnShptExistMsg := TRUE;
              END;

              IF ShowPOFullyReceivedMsg AND (ShowNoReceiptExistMsg OR ShowReturnShptExistMsg) THEN BEGIN
                ShowPOFullyReceivedAndInvoiMsg := TRUE;
                ShowPOFullyReceivedMsg := FALSE;
                ShowNoReceiptExistMsg := FALSE;
                ShowReturnShptExistMsg := FALSE;
              END;
            END;

            CASE TRUE OF
              ShowTolerenceMsg:
                Comment.AddMsgCenter(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(OutsideTolerenceMsg,
                  Field."Field Name",OurDocumentNo),'CU6085709_EXIST_OUTSIDE_TOLERENCE',FALSE,TRUE,TRUE,ErrorWasAdded);
              ShowRequireReceiveMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(LocationRequireReceiveMsg,
                  Field."Field Name",OurDocumentNo));
              ShowPOFullyReceivedAndInvoiMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,
                  STRSUBSTNO(POFullyReceivedAndInvoicedMsg,Field."Field Name",OurDocumentNo));
              ShowPOFullyReceivedMsg:
                Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,STRSUBSTNO(POFullyReceivedMsg,
                  Field."Field Name",OurDocumentNo));
              ShowNoReceiptExistMsg:
                IF RequireReceive THEN
                  Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,
                    STRSUBSTNO(NoOpenReceiptwLRRExistMsg,Field."Field Name",OurDocumentNo))
                ELSE
                  Comment.AddMsgCenter(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,
                    STRSUBSTNO(NoOpenReceiptExistMsg,Field."Field Name",OurDocumentNo),'CU6085709_NO_RECEIPT_EXIST',
                    FALSE,TRUE,TRUE,ErrorWasAdded);
              ShowReturnShptExistMsg:
                Comment.AddMsgCenter(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,
                  STRSUBSTNO(ReturnShptExistMsg,Field."Field Name",OurDocumentNo),'CU6085709_NO_RETUR_SHP_EXIST',
                  FALSE,TRUE,TRUE,ErrorWasAdded);
            END;
          END;
        END;
        Comment.AddMsgCenter(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text026,
          'CU6085709_NO_MATCH',TRUE,TRUE,TRUE,ErrorWasAdded);
      END ELSE BEGIN
        IF GetIsInvoice(Document) THEN BEGIN
          IF MatchReceipt THEN
            Matched := AutoMatchReceipt(Document,OrderNoFilter);

          IF MatchOrder AND NOT Matched THEN
            Matched := AutoMatchOpenPurchDoc(Document,0,OrderNoFilter);
        END ELSE BEGIN
          IF MatchReturnShipment THEN
            Matched := AutoMatchReturnShpt(Document,OrderNoFilter);

          IF MatchReturnOrder AND NOT Matched THEN
            Matched := AutoMatchOpenPurchDoc(Document,1,OrderNoFilter);
        END;

        OnBeforeAutoMatchSetDocumentMatchStatus(Document,OrderNoFilter,Matched);

        IF Matched THEN BEGIN
          Document."Match Status" := Document."Match Status"::"Automatically Matched";
          Document.MODIFY(TRUE);

          MatchedAmount := GetDocMatchedAmount(Document);
          GetMatchedPurchDocs(Document,MatchedPurchDocsPerType[1],MatchedPurchDocsPerType[2],MatchedPurchDocsPerType[3],
            MatchedPurchDocsPerType[4],MatchedPurchDocs);

          IF MatchWithinTolerance(Template,GetPurchPostingDate(Document,Template),CurrencyCode,0,GetAmountToMatch(Document),
            MatchedAmount)
          THEN
            Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,COPYSTR(STRSUBSTNO(Text024,
              MatchedPurchDocs),1,MAXSTRLEN(Comment.Comment)))
          ELSE
            Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text025)
        END ELSE
          Comment.AddMsgCenter(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Text026,
            'CU6085709_NO_MATCH',TRUE,TRUE,TRUE,ErrorWasAdded);
      END;
    END;

    PROCEDURE TryToMatchTotalAmount@1160040096(OrderNoFilter@1160040006 : Code[1024];VAR PurchHeader@1160040005 : Record 38;VAR PurchLine@1160040004 : Record 39;VAR PurchRcptLine@1160040003 : Record 121;VAR ReturnShptLine@1160040001 : Record 6651;Template@1160040014 : Record 6085579;VAR Document@1160040013 : Record 6085590;PurchDocType@1160040012 : 'Receipt,Return Shipment,Order,Return Order';PayToVendorNo@1160040002 : Code[20];CurrencyCode@1160040000 : Code[10];MatchReceipt@1160040008 : Boolean;MatchOrder@1160040009 : Boolean;MatchReturnShipment@1160040010 : Boolean;MatchReturnOrder@1160040011 : Boolean;VAR OrderNoNotFound@1160040019 : Boolean;OrderNoHasIllegalFilterChars@6085573 : Boolean) : Boolean;
    VAR
      PurchDocMatchTmp@1160040007 : TEMPORARY Record 6085700;
      BestPurchDocMatchTmp@1160040018 : TEMPORARY Record 6085700;
      PurchRcptLine2@1160040016 : Record 121;
      ReturnShptLine2@1160040015 : Record 6651;
    BEGIN
      IF OrderNoFilter <> '' THEN BEGIN
        IF NOT OrderNoHasIllegalFilterChars THEN BEGIN
          PurchHeader.SETFILTER("No.",OrderNoFilter);
          PurchLine.SETFILTER("Document No.",OrderNoFilter);
          PurchRcptLine.SETFILTER("Order No.",OrderNoFilter);
          ReturnShptLine.SETFILTER("Return Order No.",OrderNoFilter);
        END ELSE BEGIN
          IF STRLEN(OrderNoFilter) <= MAXSTRLEN(PurchHeader."No.") THEN BEGIN
            PurchHeader.SETRANGE("No.",OrderNoFilter);
            PurchLine.SETRANGE("Document No.",OrderNoFilter);
            PurchRcptLine.SETRANGE("Order No.",OrderNoFilter);
            ReturnShptLine.SETRANGE("Return Order No.",OrderNoFilter);
          END ELSE BEGIN
            OrderNoNotFound := TRUE;
            EXIT(FALSE);
          END;
        END;

        IF PurchHeader.ISEMPTY AND PurchRcptLine.ISEMPTY AND ReturnShptLine.ISEMPTY THEN BEGIN
          OrderNoNotFound := TRUE;
          EXIT(FALSE);
        END;
      END ELSE BEGIN
        PurchHeader.SETRANGE("No.");
        PurchLine.SETRANGE("Document No.");
        PurchRcptLine.SETRANGE("Order No.");
        ReturnShptLine.SETRANGE("Return Order No.");
      END;

      // 1. Try to match against all Purch. Receipts and all Purch. Orders (or all Shipments and Returns) in NAV
      PurchDocMatchTmp.RESET;
      PurchDocMatchTmp.DELETEALL;

      IF MatchOrder OR MatchReturnOrder THEN
        FindOpenPurchLines(PurchDocMatchTmp,PurchLine,Document."No.",PurchDocType);

      IF MatchReceipt THEN
        FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");

      IF MatchReturnShipment THEN
        FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");

      CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

      // 2. Try to match against all Purchase Receipts or (Shipments) in NAV
      PurchDocMatchTmp.RESET;
      PurchDocMatchTmp.DELETEALL;

      IF MatchReceipt THEN
        FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");

      IF MatchReturnShipment THEN
        FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");

      CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

      // 3. Try to match against one Purchase Receipt (or Shipment) in NAV (search Receipts (or Shipments) one by one)
      IF MatchReceipt THEN BEGIN
        PurchRcptLine2.COPY(PurchRcptLine);
        IF PurchRcptLine2.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            PurchRcptLine.SETRANGE("Document No.",PurchRcptLine2."Document No.");
            FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");
            PurchRcptLine.SETRANGE("Document No.");

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

            PurchRcptLine2 := PurchRcptLine;
          UNTIL PurchRcptLine2.NEXT = 0;
      END;

      IF MatchReturnShipment THEN BEGIN
        ReturnShptLine2.COPY(ReturnShptLine);
        IF ReturnShptLine2.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            ReturnShptLine.SETRANGE("Document No.",ReturnShptLine2."Document No.");
            FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");
            ReturnShptLine.SETRANGE("Document No.");

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);

            ReturnShptLine2 := ReturnShptLine;
          UNTIL ReturnShptLine2.NEXT = 0;
      END;

      // 4. Try to match aginst one Purchase Order (or Return Order)
      IF MatchOrder OR MatchReturnOrder THEN
        IF PurchHeader.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            PurchLine.SETRANGE("Document No.",PurchHeader."No.");
            FindOpenPurchLines(PurchDocMatchTmp,PurchLine,Document."No.",PurchDocType);
            PurchLine.SETRANGE("Document No.");

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);
          UNTIL PurchHeader.NEXT = 0;

      // 5. Try to match aginst one Purchase Order and all related Receipts (or Return Order and all related Shipments)
      IF MatchOrder OR MatchReturnOrder THEN
        IF PurchHeader.FINDSET THEN
          REPEAT
            PurchDocMatchTmp.RESET;
            PurchDocMatchTmp.DELETEALL;

            PurchLine.SETRANGE("Document No.",PurchHeader."No.");
            FindOpenPurchLines(PurchDocMatchTmp,PurchLine,Document."No.",PurchDocType);
            PurchLine.SETRANGE("Document No.");

            IF MatchReceipt THEN BEGIN
              PurchRcptLine.SETRANGE("Order No.",PurchHeader."No.");
              FindOpenPurchRcptLines(PurchDocMatchTmp,PurchRcptLine,Document."No.");
              PurchRcptLine.SETRANGE("Order No.");
            END;

            IF MatchReturnShipment THEN BEGIN
              ReturnShptLine.SETRANGE("Return Order No.",PurchHeader."No.");
              FindOpenReturnShptLines(PurchDocMatchTmp,ReturnShptLine,Document."No.");
              ReturnShptLine.SETRANGE("Return Order No.");
            END;

            CalcBestMatch(PurchDocMatchTmp,BestPurchDocMatchTmp,Template,Document);
          UNTIL PurchHeader.NEXT = 0;

      IF SaveMatch(BestPurchDocMatchTmp,Template,Document,PurchDocType,CurrencyCode) THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE SetPurchHeaderFilters@1160040075(VAR PurchHeader@1160040003 : Record 38;PurchDocType@1160040002 : 'Receipt,Return Shipment,Order,Return Order';PayToVendorNo@1160040001 : Code[20];CurrencyCode@1160040000 : Code[10];SetPayToVendFilter@1160040004 : Boolean;SetCurrencyFilter@1160040005 : Boolean);
    BEGIN
      // Used IF THEN as key does not exist in NAV 3.70
      IF PurchHeader.SETCURRENTKEY("Document Type","Pay-to Vendor No.") THEN;

      IF PurchDocType = PurchDocType::Order THEN
        PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order)
      ELSE
        PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");

      IF SetPayToVendFilter THEN
        PurchHeader.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      IF SetCurrencyFilter THEN
        PurchHeader.SETRANGE("Currency Code",CurrencyCode);
    END;

    PROCEDURE SetPurchLineFilters@1160040054(VAR PurchLine@1160040001 : Record 39;PurchDocType@1160040003 : 'Receipt,Return Shipment,Order,Return Order';PayToVendorNo@1160040000 : Code[20];CurrencyCode@1160040002 : Code[10];SetPayToVendFilter@1160040005 : Boolean;SetCurrencyFilter@1160040004 : Boolean);
    BEGIN
      PurchLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.","Currency Code");

      IF PurchDocType = PurchDocType::Order THEN
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order)
      ELSE
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");

      IF SetPayToVendFilter THEN
        PurchLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      PurchLine.SETFILTER("Outstanding Quantity",'<>0');
      IF SetCurrencyFilter THEN
        PurchLine.SETRANGE("Currency Code",CurrencyCode);
    END;

    PROCEDURE SetPurchRcptLineFilters@1160040055(VAR PurchRcptLine@1160040000 : Record 121;PayToVendorNo@1160040002 : Code[20];CurrencyCode@1160040001 : Code[10];SetPayToVendFilter@1160040004 : Boolean;SetCurrencyFilter@1160040003 : Boolean);
    BEGIN
      PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
      IF SetPayToVendFilter THEN
        PurchRcptLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
      IF SetCurrencyFilter THEN
        PurchRcptLine.SETRANGE("Currency Code",CurrencyCode);
    END;

    PROCEDURE SetReturnShptLineFilters@1160040064(VAR ReturnShptLine@1160040003 : Record 6651;PayToVendorNo@1160040002 : Code[20];CurrencyCode@1160040001 : Code[10];SetPayToVendFilter@1160040004 : Boolean;SetCurrencyFilter@1160040000 : Boolean);
    BEGIN
      ReturnShptLine.SETCURRENTKEY("Pay-to Vendor No.");
      IF SetPayToVendFilter THEN
        ReturnShptLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo);
      ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');
      IF SetCurrencyFilter THEN
        ReturnShptLine.SETRANGE("Currency Code",CurrencyCode);
    END;

    [External]
    PROCEDURE FindOpenPurchLines@1160040028(VAR PurchDocMatchTmp@1160040008 : TEMPORARY Record 6085700;VAR PurchLine@1160040000 : Record 39;DocumentNo@1160040004 : Code[20];PurchDocType@1160040005 : 'Receipt,Return Shipment,Order,Return Order');
    VAR
      Location@1160040001 : Record 14;
      AvailMatchQty@1160040002 : Decimal;
      Handled@1000 : Boolean;
    BEGIN
      IF PurchLine.FINDSET THEN
        REPEAT
          IF (PurchLine.Type <> PurchLine.Type::Item) OR
            ((PurchLine.Type = PurchLine.Type::Item) AND (NOT Location.RequireReceive(PurchLine."Location Code")) AND
            CheckMatchToWithTracking(PurchLine,PurchDocType,FALSE))
          THEN BEGIN
            AvailMatchQty := PurchLine."Outstanding Quantity" - GetPurchLineMatchedQty(PurchLine);
            IF ((PurchLine.Quantity > 0) AND (AvailMatchQty > 0)) OR ((PurchLine.Quantity < 0) AND (AvailMatchQty < 0)) THEN BEGIN
              OnBeforeInsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocType,PurchLine."Document No.",
                PurchLine."Line No.",AvailMatchQty,PurchLine."Direct Unit Cost",PurchLine."Line Discount %",FALSE,Handled);

              IF NOT Handled THEN
                InsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocType,PurchLine."Document No.",PurchLine."Line No.",
                  AvailMatchQty,PurchLine."Direct Unit Cost",PurchLine."Line Discount %",FALSE);
            END;
          END;
        UNTIL PurchLine.NEXT = 0;
    END;

    [External]
    PROCEDURE FindOpenPurchRcptLines@1160040046(VAR PurchDocMatchTmp@1160040008 : TEMPORARY Record 6085700;VAR PurchRcptLine@1160040000 : Record 121;DocumentNo@1160040004 : Code[20]);
    VAR
      PurchLine@1160040001 : Record 39;
      PurchDocMatch@1160040003 : Record 6085700;
      AvailMatchQty@1160040002 : Decimal;
      Handled@1000 : Boolean;
    BEGIN
      IF PurchRcptLine.FINDSET THEN
        REPEAT
          AvailMatchQty := PurchRcptLine."Qty. Rcd. Not Invoiced" - GetRcptLineMatchedQty(PurchRcptLine);
          IF ((PurchRcptLine.Quantity > 0) AND (AvailMatchQty > 0)) OR
            ((PurchRcptLine.Quantity < 0) AND (AvailMatchQty < 0))
          THEN BEGIN
            IF (PurchLine."Document No." <> PurchRcptLine."Order No.") OR
              (PurchLine."Line No." <> PurchRcptLine."Order Line No.")
            THEN
              PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");

            OnBeforeInsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocMatch."Purch. Doc. Type"::Receipt,
              PurchRcptLine."Document No.",PurchRcptLine."Line No.",AvailMatchQty,PurchLine."Direct Unit Cost",
              PurchLine."Line Discount %",FALSE,Handled);

            IF NOT Handled THEN
              InsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocMatch."Purch. Doc. Type"::Receipt,
                PurchRcptLine."Document No.",PurchRcptLine."Line No.",AvailMatchQty,PurchLine."Direct Unit Cost",
                PurchLine."Line Discount %",FALSE);
          END;
        UNTIL PurchRcptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE FindOpenReturnShptLines@1160040067(VAR PurchDocMatchTmp@1160040008 : TEMPORARY Record 6085700;VAR ReturnShptLine@1160040005 : Record 6651;DocumentNo@1160040004 : Code[20]);
    VAR
      PurchLine@1160040000 : Record 39;
      PurchDocMatch@1160040003 : Record 6085700;
      AvailMatchQty@1160040002 : Decimal;
      Handled@1000 : Boolean;
    BEGIN
      IF ReturnShptLine.FINDSET THEN
        REPEAT
          AvailMatchQty := ReturnShptLine."Return Qty. Shipped Not Invd." - GetReturnShptLineMatchedQty(ReturnShptLine);
          IF ((ReturnShptLine.Quantity > 0) AND (AvailMatchQty > 0)) OR
            ((ReturnShptLine.Quantity < 0) AND (AvailMatchQty < 0))
          THEN BEGIN
            IF (PurchLine."Document No." <> ReturnShptLine."Return Order No.") OR
              (PurchLine."Line No." <> ReturnShptLine."Return Order Line No.")
            THEN
              PurchLine.GET(PurchLine."Document Type"::"Return Order",ReturnShptLine."Return Order No.",
                ReturnShptLine."Return Order Line No.");

            OnBeforeInsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocMatch."Purch. Doc. Type"::"Return Shipment",
              ReturnShptLine."Document No.",ReturnShptLine."Line No.",AvailMatchQty,PurchLine."Direct Unit Cost",
              PurchLine."Line Discount %",FALSE,Handled);

            IF NOT Handled THEN
              InsertPurchDocMatch(PurchDocMatchTmp,DocumentNo,0,PurchDocMatch."Purch. Doc. Type"::"Return Shipment",
                ReturnShptLine."Document No.",ReturnShptLine."Line No.",AvailMatchQty,PurchLine."Direct Unit Cost",
                PurchLine."Line Discount %",FALSE);
          END;
        UNTIL ReturnShptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CalcBestMatch@1160040025(VAR PurchDocMatchTmp@1160040002 : TEMPORARY Record 6085700;VAR BestPurchDocMatchTmp@1160040003 : TEMPORARY Record 6085700;Template@1160040001 : Record 6085579;VAR Document@1160040000 : Record 6085590);
    VAR
      MatchedAmount@1160040005 : Decimal;
      DocumentAmount@1160040004 : Decimal;
      MatchedAmount2@1160040007 : Decimal;
    BEGIN
      IF PurchDocMatchTmp.ISEMPTY THEN
        EXIT;

      MatchedAmount := CalcPurchDocMatchAmt(Document,PurchDocMatchTmp);
      DocumentAmount := GetAmountToMatch(Document);

      IF (MatchWithinTolerance(Template,GetPurchPostingDate(Document,Template),GetCurrencyCode(Document),0,DocumentAmount,
        MatchedAmount))
      THEN BEGIN
        MatchedAmount2 := CalcPurchDocMatchAmt(Document,BestPurchDocMatchTmp);
        IF BestPurchDocMatchTmp.ISEMPTY OR (ABS(DocumentAmount - MatchedAmount) < ABS(DocumentAmount - MatchedAmount2)) THEN BEGIN
          BestPurchDocMatchTmp.DELETEALL;
          PurchDocMatchTmp.FINDSET;
          REPEAT
            BestPurchDocMatchTmp := PurchDocMatchTmp;
            BestPurchDocMatchTmp.INSERT;
          UNTIL PurchDocMatchTmp.NEXT = 0;
        END;
      END;
    END;

    [External]
    PROCEDURE SaveMatch@1160040070(VAR PurchDocMatchTmp@1160040000 : TEMPORARY Record 6085700;Template@1160040001 : Record 6085579;VAR Document@1160040002 : Record 6085590;PurchDocType@1160040011 : 'Receipt,Return Shipment,Order,Return Order';CurrencyCode@1160040013 : Code[10]) : Boolean;
    VAR
      Field@1160040006 : Record 6085580;
      Comment@1160040005 : Record 6085594;
      DCAppMgt@1160040016 : Codeunit 6085722;
      Temptext@1160040012 : Text[1024];
      MatchedAmount@1160040004 : Decimal;
      DocumentAmount@1160040003 : Decimal;
      MatchedPurchOrders@1160040007 : Code[1024];
      MatchedReturnOrders@1160040010 : Code[1024];
      MatchedPurchRcpts@1160040008 : Code[1024];
      MatchedReturnShipment@1160040009 : Code[1024];
      Temptext1@1160040014 : Text[1024];
      Temptext2@1160040015 : Text[1024];
      ErrorWasAdded@6085573 : Boolean;
    BEGIN
      IF PurchDocMatchTmp.ISEMPTY THEN
        EXIT(FALSE);

      MatchedAmount := CalcPurchDocMatchAmt(Document,PurchDocMatchTmp);
      DocumentAmount := GetAmountToMatch(Document);

      InsertPurchDocMatchFromTmp(PurchDocMatchTmp,MatchedPurchOrders,MatchedReturnOrders,MatchedPurchRcpts,MatchedReturnShipment);

      Document."Match Status" := Document."Match Status"::"Automatically Matched";
      Document.MODIFY(TRUE);

      // Create document comments
      IF PurchDocType = PurchDocType::Order THEN BEGIN
        CASE TRUE OF
          (MatchedPurchOrders <> '') AND (MatchedPurchRcpts <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO(CombineMsg,PurchaseOrderNosMsg,MatchedPurchOrders,PurchaseReceiptNosMsg,MatchedPurchRcpts),
              1,MAXSTRLEN(Temptext1));
          (MatchedPurchOrders <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',PurchaseOrderNosMsg,MatchedPurchOrders),1,MAXSTRLEN(Temptext1));
          (MatchedPurchRcpts <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',PurchaseReceiptNosMsg,MatchedPurchRcpts),1,MAXSTRLEN(Temptext1));
        END;
      END ELSE BEGIN
        CASE TRUE OF
          (MatchedReturnOrders <> '') AND (MatchedReturnShipment <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO(CombineMsg,ReturnOrderNosMsg,MatchedReturnOrders,ReturnShipmentNosMsg,
              MatchedReturnShipment),1,MAXSTRLEN(Temptext1));
          (MatchedReturnOrders <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',ReturnOrderNosMsg,MatchedReturnOrders),1,MAXSTRLEN(Temptext1));
          (MatchedReturnShipment <> ''):
            Temptext1 := COPYSTR(STRSUBSTNO('%1 %2',ReturnShipmentNosMsg,MatchedReturnShipment),1,MAXSTRLEN(Temptext1));
        END;
      END;

      IF DocumentAmount = MatchedAmount THEN BEGIN
        Temptext2 := COPYSTR(STRSUBSTNO(FullyMatchedWithMsg,Temptext1),1,MAXSTRLEN(Comment.Comment));
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,Temptext2);
      END ELSE BEGIN
        IF CurrencyCode <> '' THEN
          Temptext2 := COPYSTR(STRSUBSTNO(MatchInMsg,DCAppMgt.FormatAmount(MatchedAmount,CurrencyCode),
            DCAppMgt.FormatAmount(DocumentAmount,CurrencyCode),CurrencyCode,Temptext1),1,MAXSTRLEN(Comment.Comment))
        ELSE BEGIN
          GetGLSetup;
          Temptext2 := COPYSTR(STRSUBSTNO(MatchInMsg,DCAppMgt.FormatAmount(MatchedAmount,CurrencyCode),
            DCAppMgt.FormatAmount(DocumentAmount,CurrencyCode),GLSetup."LCY Code",Temptext1),1,MAXSTRLEN(Comment.Comment));
        END;
        Comment.AddMsgCenter(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Warning,Temptext2,
          'CU6085709_AUTOMATCHED_WITHIN_VARIANCE',TRUE,TRUE,TRUE,ErrorWasAdded);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE AutoMatchOpenPurchDoc@1160040002(VAR Document@1000000000 : Record 6085590;MatchTo@1160040001 : 'Order,ReturnOrder';OrderNoFilter@161024014 : Code[250]) : Boolean;
    VAR
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      PurchLine@1160040000 : Record 39;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchDocMatch@1000000016 : Record 6085700;
      Location@1160040003 : Record 14;
      PurchDocType@1160040005 : 'Receipt,Return Shipment,Order,Return Order';
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      Matched@1160040006 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      MatchedAmount@161024012 : Decimal;
      UnitCost@1160040002 : Decimal;
      LineDiscAmount@6085575 : Decimal;
      LineAmount@6085574 : Decimal;
      LineDiscPct@6085573 : Decimal;
      DataTranslation@6085576 : Record 6085584;
      DialogType@6085577 : 'None,ShipError,ReciveError,Shipwarning,ReceiveWarning';
      WarningTxt@6085578 : Text[250];
      Comment@6085580 : Record 6085594;
      Field2@6085581 : Record 6085580;
      DocMatchedLineAmount@6085579 : Decimal;
      DocMatchedDifference@6085582 : Decimal;
      DocPurchDocLineAmt@6085583 : Decimal;
      MaxToleranceHeaderAmtFCY@6085584 : Decimal;
      MaxToleranceLineAmtFCY@6085585 : Decimal;
      ErrorWasAdded@6085586 : Boolean;
      Handled@1000 : Boolean;
    BEGIN
      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      PurchLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.","Currency Code");
      IF MatchTo = MatchTo::Order THEN
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order)
      ELSE
        PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Return Order");
      PurchLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PurchLine.SETFILTER("Outstanding Quantity",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        PurchLine.SETRANGE("Currency Code",'')
      ELSE
        PurchLine.SETRANGE("Currency Code",GetCurrencyCode(Document));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.FINDSET THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
          CASE Template."Purch. Match Order No." OF
            Template."Purch. Match Order No."::No:
              PurchLine.SETRANGE("Document No.");
            Template."Purch. Match Order No."::"Yes - always":
              PurchLine.SETFILTER("Document No.",OrderNoFilter);
            Template."Purch. Match Order No."::"Yes - if present":
              IF OrderNoFilter <> '' THEN
                PurchLine.SETFILTER("Document No.",OrderNoFilter);
          END;
        END;

        REPEAT
          Stop := FALSE;
          PurchLine.SETRANGE(Type);
          PurchLine.SETRANGE("No.");
          PurchLine.SETRANGE("Variant Code");
          PurchLine.SETRANGE("Unit of Measure Code");
          PurchLine.SETRANGE("Direct Unit Cost");
          PurchLine.SETRANGE("Line Discount Amount");
          PurchLine.SETRANGE("Line Discount %");
          PurchLine.SETRANGE(Quantity);

          IF MatchItemNo(Template,Document,DocumentLine."Line No.") THEN BEGIN
            IF GetLineTranslation(Template,Document,DocumentLine."Line No.",DataTranslation) THEN BEGIN
              PurchLine.SETRANGE(Type,DataTranslation."Translate to Type");
              PurchLine.SETRANGE("No.",DataTranslation."Translate to No.");
              IF DataTranslation."Translate to Variant Code" <> '' THEN
                PurchLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
              IF DataTranslation."Translate to UOM Code" <> '' THEN
                PurchLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
            END ELSE
              Stop := TRUE;
          END;

          CASE Template."Purch. Match Quantity" OF
            Template."Purch. Match Quantity"::"Yes - always":
              PurchLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
            Template."Purch. Match Quantity"::"Yes - if present":
              IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
                PurchLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          END;

          IF MatchUnitCost(Template,Document,DocumentLine."Line No.",TRUE,UnitCost) THEN BEGIN
            MaxToleranceLineAmtFCY := GetVarianceToleranceUnitCost(Template,GetPurchPostingDate(Document,Template),
              GetCurrencyCode(Document),0,UnitCost);
            PurchLine.SETRANGE("Direct Unit Cost",UnitCost - MaxToleranceLineAmtFCY,UnitCost + MaxToleranceLineAmtFCY);
            IF GetLineDiscPct(Document,DocumentLine."Line No.") <> 0 THEN
              PurchLine.SETRANGE("Line Discount %",GetLineDiscPct(Document,DocumentLine."Line No."))
            ELSE
              IF GetLineDiscAmount(Document,DocumentLine."Line No.") <> 0 THEN
                PurchLine.SETRANGE("Line Discount Amount",GetLineDiscAmount(Document,DocumentLine."Line No."))
              ELSE
                PurchLine.SETRANGE("Line Discount Amount",0);
          END;

          IF TemplField.Code <> '' THEN BEGIN
            OrderNoFilter := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
              MAXSTRLEN(OrderNoFilter));

            CASE Template."Purch. Match Order No." OF
              Template."Purch. Match Order No."::"Yes - always":
                PurchLine.SETFILTER("Document No.",OrderNoFilter);
              Template."Purch. Match Order No."::"Yes - if present":
                IF OrderNoFilter <> '' THEN
                  PurchLine.SETFILTER("Document No.",OrderNoFilter);
            END;
          END;

          RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
          IF MatchTo = MatchTo::Order THEN
            PurchDocType := PurchDocType::Order
          ELSE
            PurchDocType := PurchDocType::"Return Order";

          OnAfterSetFiltersAutoMatchOpenPurchDoc(Document,DocumentLine,Template,OrderNoFilter,PurchDocType,PurchLine,Stop);

          IF (NOT Stop) AND PurchLine.FINDSET THEN
            REPEAT
              GetWhseRequirementDialogType(PurchLine,DialogType);
              IF ((DialogType <> DialogType::ReciveError) AND (DialogType <> DialogType::ShipError) AND
                CheckMatchToWithTracking(PurchLine,PurchDocType,FALSE))
              THEN BEGIN
                AvailMatchQty := PurchLine."Outstanding Quantity" - GetPurchLineMatchedQty(PurchLine);

                OnAfterCalcAvailMatchQtyAutoMatchOpenPurchDoc(Document,DocumentLine,Template,PurchLine,AvailMatchQty);

                IF AvailMatchQty > 0 THEN BEGIN
                  IF AvailMatchQty > RemMatchQty THEN
                    MatchQty := RemMatchQty
                  ELSE
                    MatchQty := AvailMatchQty;

                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                  LineDiscAmount := GetLineDiscAmount(Document,DocumentLine."Line No.");

                  IF LineDiscAmount <> 0 THEN BEGIN
                    LineAmount := GetLineAmount(Document,DocumentLine."Line No.");

                    IF (LineDiscAmount + LineAmount) <> 0 THEN
                      LineDiscPct := ROUND(LineDiscAmount / (LineDiscAmount + LineAmount) * 100,0.00001)
                  END ELSE
                    LineDiscPct := GetLineDiscPct(Document,DocumentLine."Line No.");

                  OnBeforeInsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",PurchDocType,
                    PurchLine."Document No.",PurchLine."Line No.",MatchQty,UnitCost,LineDiscPct,TRUE,Handled);

                  IF NOT Handled THEN
                    InsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",PurchDocType,
                      PurchLine."Document No.",PurchLine."Line No.",MatchQty,UnitCost,LineDiscPct,TRUE);

                  RemMatchQty := RemMatchQty - MatchQty;
                  Matched := TRUE;

                  CASE DialogType OF
                    DialogType::ReceiveWarning: WarningTxt := WarehouseReceiveErr;
                    DialogType::Shipwarning: WarningTxt := WarehouseShipErr;
                    ELSE
                      WarningTxt := '';
                  END;

                  IF WarningTxt <> '' THEN BEGIN
                    WarningTxt := STRSUBSTNO(WarningTxt+WarehouseOperationsMsg,PurchLine.FIELDCAPTION("Document Type"),
                      PurchLine."Document Type",PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
                      PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
                    Comment.Add(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Warning,WarningTxt);
                  END;
                END;
              END;
            UNTIL (PurchLine.NEXT = 0) OR (RemMatchQty <= 0);
        UNTIL DocumentLine.NEXT = 0;

        CalcMatchedValuesOnDoc(Document."No.",DocMatchedLineAmount,DocMatchedDifference,DocPurchDocLineAmt);
        MaxToleranceHeaderAmtFCY := GetVarianceToleranceAmount(Template,GetPurchPostingDate(Document,Template),
          GetCurrencyCode(Document),0,GetAmountToMatch(Document));
        IF Matched AND (ABS(DocMatchedDifference) > ABS(MaxToleranceHeaderAmtFCY)) THEN
          Comment.AddMsgCenter(Document,Field2,0,Comment.Area::Match,Comment."Comment Type"::Information,
            STRSUBSTNO(LineRecogTotalOutsideVariance,FORMAT(ABS(DocMatchedDifference),0,
            '<Precision,2:2><Sign><Integer Thousand><Decimals>')),'CU6085709_LINE_MATCH_DIFF',TRUE,TRUE,TRUE,
            ErrorWasAdded);

        IF Matched AND (Template."Purch. Inv. Reg. Step 1" IN
          [Template."Purch. Inv. Reg. Step 1"::"Match Order & Create Invoice",Template."Purch. Inv. Reg. Step 1"::"Create Invoice"])
        THEN
          Matched := DeleteMultipleDCLineMatchToOnePurchLine(DocumentLine."Document No.");

        EXIT(Matched);
      END;
    END;

    PROCEDURE AutoMatchReceipt@1000000024(VAR Document@1000000000 : Record 6085590;OrderNoFilter@161024014 : Code[250]) : Boolean;
    VAR
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      PurchRcptLine@1000000002 : Record 121;
      PurchRcptLine2@161024013 : Record 121;
      PurchLine@1160040000 : Record 39;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchDocMatch@1000000016 : Record 6085700;
      PurchDocMatchTmp@1160040003 : TEMPORARY Record 6085700;
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      Matched@1160040004 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      TotalMatchAmount@161024012 : Decimal;
      UnitCost@1160040002 : Decimal;
      Include@1160040001 : Boolean;
      LineDiscAmount@6085573 : Decimal;
      LineAmount@6085574 : Decimal;
      LineDiscPct@6085575 : Decimal;
      DataTranslation@6085576 : Record 6085584;
      MaxToleranceLineAmtFCY@6085577 : Decimal;
      Handled@1000 : Boolean;
    BEGIN
      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
      PurchRcptLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        PurchRcptLine.SETRANGE("Currency Code",'')
      ELSE
        PurchRcptLine.SETRANGE("Currency Code",GetCurrencyCode(Document));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.FINDSET THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
          CASE Template."Purch. Match Order No." OF
            Template."Purch. Match Order No."::No:
              PurchRcptLine.SETRANGE("Order No.");
            Template."Purch. Match Order No."::"Yes - always":
              PurchRcptLine.SETFILTER("Order No.",OrderNoFilter);
            Template."Purch. Match Order No."::"Yes - if present":
              IF OrderNoFilter <> '' THEN
                PurchRcptLine.SETFILTER("Order No.",OrderNoFilter);
          END;
        END;

        REPEAT
          Stop := FALSE;
          PurchRcptLine.SETRANGE(Type);
          PurchRcptLine.SETRANGE("No.");
          PurchRcptLine.SETRANGE("Variant Code");
          PurchRcptLine.SETRANGE("Unit of Measure Code");
          PurchRcptLine.SETRANGE("Direct Unit Cost");
          PurchRcptLine.SETRANGE(Quantity);

          IF MatchItemNo(Template,Document,DocumentLine."Line No.") THEN BEGIN
            IF GetLineTranslation(Template,Document,DocumentLine."Line No.",DataTranslation) THEN BEGIN
              PurchRcptLine.SETRANGE(Type,DataTranslation."Translate to Type");
              PurchRcptLine.SETRANGE("No.",DataTranslation."Translate to No.");
              IF DataTranslation."Translate to Variant Code" <> '' THEN
                PurchRcptLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
              IF DataTranslation."Translate to UOM Code" <> '' THEN
                PurchRcptLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
            END ELSE
              Stop := TRUE;
          END;

          CASE Template."Purch. Match Quantity" OF
            Template."Purch. Match Quantity"::"Yes - always":
              PurchRcptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
            Template."Purch. Match Quantity"::"Yes - if present":
              IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
                PurchRcptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          END;

          OnAfterSetFilterAutoMatchReceipt(Document,DocumentLine,Template,OrderNoFilter,PurchRcptLine,Stop);

          RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
          IF (NOT Stop) AND PurchRcptLine.FINDSET THEN
            REPEAT
              Include := TRUE;

              PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");

              IF MatchUnitCost(Template,Document,DocumentLine."Line No.",FALSE,UnitCost) THEN BEGIN
                MaxToleranceLineAmtFCY := GetVarianceToleranceUnitCost(Template,GetPurchPostingDate(Document,Template),
                  GetCurrencyCode(Document),0,UnitCost);
                Include := ABS(PurchLine."Direct Unit Cost" - GetLineUnitCost(Document,DocumentLine."Line No."))
                  <= MaxToleranceLineAmtFCY;
                IF PurchLine."Line Discount %" <> 0 THEN
                  Include := Include AND
                    ((PurchLine."Line Discount %" = GetLineDiscPct(Document,DocumentLine."Line No.")) OR
                    (PurchLine."Line Discount Amount" = GetLineDiscAmount(Document,DocumentLine."Line No.")));
              END;

              IF Include THEN BEGIN
                IF TemplField.Code <> '' THEN BEGIN
                  OrderNoFilter := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
                    MAXSTRLEN(OrderNoFilter));

                  CASE Template."Purch. Match Order No." OF
                    Template."Purch. Match Order No."::"Yes - always":
                      Include := PurchRcptLine."Order No." = OrderNoFilter;
                    Template."Purch. Match Order No."::"Yes - if present":
                      IF OrderNoFilter <> '' THEN
                        Include := PurchRcptLine."Order No." = OrderNoFilter;
                  END;
                END;
              END;

              IF Include THEN BEGIN
                AvailMatchQty := PurchRcptLine."Qty. Rcd. Not Invoiced" - GetRcptLineMatchedQty(PurchRcptLine);

                OnAfterCalcAvailMatchQtyAutoMatchReceipt(Document,DocumentLine,Template,PurchRcptLine,AvailMatchQty);

                IF AvailMatchQty > 0 THEN BEGIN
                  IF AvailMatchQty > RemMatchQty THEN
                    MatchQty := RemMatchQty
                  ELSE
                    MatchQty := AvailMatchQty;

                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                  LineDiscAmount := GetLineDiscAmount(Document,DocumentLine."Line No.");

                  IF LineDiscAmount <> 0 THEN BEGIN
                    LineAmount := GetLineAmount(Document,DocumentLine."Line No.");

                    IF (LineDiscAmount + LineAmount) <> 0 THEN
                      LineDiscPct := ROUND(LineDiscAmount / (LineDiscAmount + LineAmount) * 100,0.00001)
                  END ELSE
                    LineDiscPct := GetLineDiscPct(Document,DocumentLine."Line No.");

                  OnBeforeInsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",
                    PurchDocMatch."Purch. Doc. Type"::Receipt,PurchRcptLine."Document No.",PurchRcptLine."Line No.",
                    MatchQty,UnitCost,LineDiscPct,TRUE,Handled);

                  IF NOT Handled THEN
                    InsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",
                      PurchDocMatch."Purch. Doc. Type"::Receipt,PurchRcptLine."Document No.",PurchRcptLine."Line No.",
                      MatchQty,UnitCost,LineDiscPct,TRUE);

                  RemMatchQty := RemMatchQty - MatchQty;
                  Matched := TRUE;
                END;
              END;
            UNTIL (PurchRcptLine.NEXT = 0) OR (RemMatchQty <= 0);
        UNTIL DocumentLine.NEXT = 0;

        EXIT(Matched);
      END;
    END;

    PROCEDURE AutoMatchReturnShpt@1000000038(VAR Document@1000000000 : Record 6085590;OrderNoFilter@161024013 : Code[250]) : Boolean;
    VAR
      Template@1000000001 : Record 6085579;
      TemplField@1000000006 : Record 6085580;
      ReturnShptLine@1000000002 : Record 6651;
      ReturnShptLine2@161024012 : Record 6651;
      DocumentLine@1000000005 : TEMPORARY Record 6085596;
      PurchLine@1160040000 : Record 39;
      PurchDocMatch@1000000016 : Record 6085700;
      PurchDocMatchTmp@1160040003 : TEMPORARY Record 6085700;
      Description@1000000007 : Text[50];
      Stop@1000000012 : Boolean;
      Matched@1160040004 : Boolean;
      MatchQty@1000000013 : Decimal;
      AvailMatchQty@1000000014 : Decimal;
      RemMatchQty@1000000015 : Decimal;
      UnitCost@1160040002 : Decimal;
      Include@1160040001 : Boolean;
      LineDiscAmount@6085575 : Decimal;
      LineAmount@6085574 : Decimal;
      LineDiscPct@6085573 : Decimal;
      DataTranslation@6085576 : Record 6085584;
      MaxToleranceLineAmtFCY@6085577 : Decimal;
      Handled@1000 : Boolean;
    BEGIN
      GetGLSetup;
      GetDCSetup;
      Template.GET(Document."Template No.");

      ReturnShptLine.SETCURRENTKEY("Pay-to Vendor No.");
      ReturnShptLine.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      ReturnShptLine.SETFILTER("Return Qty. Shipped Not Invd.",'<>0');

      IF (GetCurrencyCode(Document) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        ReturnShptLine.SETRANGE("Currency Code",'')
      ELSE
        ReturnShptLine.SETRANGE("Currency Code",GetCurrencyCode(Document));

      Document.BuildTempLinesTable(DocumentLine);
      IF DocumentLine.FINDSET THEN BEGIN
      // *******************************************************************************************************************************
      // MATCH WHEN LINES HAVE BEEN RECOGNIZED
      // *******************************************************************************************************************************
        IF NOT TemplField.GET(Template."No.",TemplField.Type::Line,'ORDERNO') THEN BEGIN
          CASE Template."Purch. Match Order No." OF
            Template."Purch. Match Order No."::No:
              ReturnShptLine.SETRANGE("Return Order No.");
            Template."Purch. Match Order No."::"Yes - always":
              ReturnShptLine.SETFILTER("Return Order No.",OrderNoFilter);
            Template."Purch. Match Order No."::"Yes - if present":
              IF OrderNoFilter <> '' THEN
                ReturnShptLine.SETFILTER("Return Order No.",OrderNoFilter);
          END;
        END;

        REPEAT
          Stop := FALSE;
          ReturnShptLine.SETRANGE(Type);
          ReturnShptLine.SETRANGE("No.");
          ReturnShptLine.SETRANGE("Variant Code");
          ReturnShptLine.SETRANGE("Unit of Measure Code");
          ReturnShptLine.SETRANGE("Direct Unit Cost");
          ReturnShptLine.SETRANGE(Quantity);

          IF MatchItemNo(Template,Document,DocumentLine."Line No.") THEN BEGIN
            IF GetLineTranslation(Template,Document,DocumentLine."Line No.",DataTranslation) THEN BEGIN
              ReturnShptLine.SETRANGE(Type,DataTranslation."Translate to Type");
              ReturnShptLine.SETRANGE("No.",DataTranslation."Translate to No.");
              IF DataTranslation."Translate to Variant Code" <> '' THEN
                ReturnShptLine.SETRANGE("Variant Code",DataTranslation."Translate to Variant Code");
              IF DataTranslation."Translate to UOM Code" <> '' THEN
                ReturnShptLine.SETRANGE("Unit of Measure Code",DataTranslation."Translate to UOM Code");
            END ELSE
              Stop := TRUE;
          END;

          CASE Template."Purch. Match Quantity" OF
            Template."Purch. Match Quantity"::"Yes - always":
              ReturnShptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
            Template."Purch. Match Quantity"::"Yes - if present":
              IF GetLineQuantity(Document,DocumentLine."Line No.") <> 0 THEN
                ReturnShptLine.SETRANGE(Quantity,GetLineQuantity(Document,DocumentLine."Line No."));
          END;

          OnAfterSetFilterAutoMatchReturnShpt(Document,DocumentLine,Template,OrderNoFilter,ReturnShptLine,Stop);

          RemMatchQty := GetLineQuantity(Document,DocumentLine."Line No.") - GetDocLineMatchedQty(DocumentLine);
          IF (NOT Stop) AND ReturnShptLine.FINDSET THEN
            REPEAT
              Include := TRUE;

              PurchLine.GET(PurchLine."Document Type"::"Return Order",ReturnShptLine."Return Order No.",
                ReturnShptLine."Return Order Line No.");

              IF MatchUnitCost(Template,Document,DocumentLine."Line No.",FALSE,UnitCost) THEN BEGIN
                MaxToleranceLineAmtFCY := GetVarianceToleranceUnitCost(Template,GetPurchPostingDate(Document,Template),
                  GetCurrencyCode(Document),0,UnitCost);
                Include := ABS(PurchLine."Direct Unit Cost" - GetLineUnitCost(Document,DocumentLine."Line No."))
                  <= MaxToleranceLineAmtFCY;
                IF PurchLine."Line Discount %" <> 0 THEN
                  Include := Include AND
                    ((PurchLine."Line Discount %" = GetLineDiscPct(Document,DocumentLine."Line No.")) OR
                    (PurchLine."Line Discount Amount" = GetLineDiscAmount(Document,DocumentLine."Line No.")));
              END;

              IF Include THEN BEGIN
                IF TemplField.Code <> '' THEN BEGIN
                  OrderNoFilter := COPYSTR(CaptureMgt.GetText(Document,TemplField.Type::Line,'ORDERNO',DocumentLine."Line No."),1,
                    MAXSTRLEN(OrderNoFilter));

                  CASE Template."Purch. Match Order No." OF
                    Template."Purch. Match Order No."::"Yes - always":
                      Include := ReturnShptLine."Return Order No." = OrderNoFilter;
                    Template."Purch. Match Order No."::"Yes - if present":
                      IF OrderNoFilter <> '' THEN
                        Include := ReturnShptLine."Return Order No." = OrderNoFilter;
                  END;
                END;
              END;

              IF Include THEN BEGIN
                AvailMatchQty := ReturnShptLine."Return Qty. Shipped Not Invd." - GetReturnShptLineMatchedQty(ReturnShptLine);

                OnAfterCalcAvailMatchQtyAutoMatchReturnShpt(Document,DocumentLine,Template,ReturnShptLine,AvailMatchQty);

                IF AvailMatchQty > 0 THEN BEGIN
                  IF AvailMatchQty > RemMatchQty THEN
                    MatchQty := RemMatchQty
                  ELSE
                    MatchQty := AvailMatchQty;

                  UnitCost := GetLineUnitCost(Document,DocumentLine."Line No.");
                  LineDiscAmount := GetLineDiscAmount(Document,DocumentLine."Line No.");

                  IF LineDiscAmount <> 0 THEN BEGIN
                    LineAmount := GetLineAmount(Document,DocumentLine."Line No.");

                    IF (LineDiscAmount + LineAmount) <> 0 THEN
                      LineDiscPct := ROUND(LineDiscAmount / (LineDiscAmount + LineAmount) * 100,0.00001)
                  END ELSE
                    LineDiscPct := GetLineDiscPct(Document,DocumentLine."Line No.");

                  OnBeforeInsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",
                    PurchDocMatch."Purch. Doc. Type"::Receipt,ReturnShptLine."Document No.",ReturnShptLine."Line No.",
                    MatchQty,UnitCost,LineDiscPct,TRUE,Handled);

                  IF NOT Handled THEN
                    InsertPurchDocMatch(PurchDocMatch,DocumentLine."Document No.",DocumentLine."Line No.",
                      PurchDocMatch."Purch. Doc. Type"::"Return Shipment",ReturnShptLine."Document No.",ReturnShptLine."Line No.",
                      MatchQty,UnitCost,LineDiscPct,TRUE);

                  RemMatchQty := RemMatchQty - MatchQty;
                  Matched := TRUE;
                END;
              END;
            UNTIL (ReturnShptLine.NEXT = 0) OR (RemMatchQty <= 0);
        UNTIL DocumentLine.NEXT = 0;

        EXIT(Matched);
      END;
    END;

    [External]
    PROCEDURE InsertPurchDocMatch@1160040029(VAR PurchDocMatch@1160040001 : Record 6085700;DocNo@1160040000 : Code[20];DocLineNo@1160040002 : Integer;PurchDocType@1160040003 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@1160040004 : Code[20];PurchLineNo@1160040005 : Integer;AvailMatchQty@1160040006 : Decimal;DirectUnitCost@1160040007 : Decimal;LineDiscountPct@1160040008 : Decimal;UpdateMatchTracking@6085574 : Boolean);
    VAR
      MatchTrackingMgt@6085573 : Codeunit 6085830;
    BEGIN
      PurchDocMatch.INIT;
      PurchDocMatch."Document No." := DocNo;
      PurchDocMatch."Document Line No." := DocLineNo;
      PurchDocMatch."Purch. Doc. Type" := PurchDocType;
      PurchDocMatch."Purch. Doc. No." := PurchDocNo;
      PurchDocMatch."Purch. Line No." := PurchLineNo;
      PurchDocMatch.Quantity := AvailMatchQty;
      PurchDocMatch."Direct Unit Cost" := DirectUnitCost;
      PurchDocMatch."Line Discount %" := LineDiscountPct;
      PurchDocMatch.INSERT;

      IF UpdateMatchTracking THEN
        MatchTrackingMgt.UpdateMatchedQtyFromMatch(PurchDocMatch);
    END;

    PROCEDURE InsertPurchDocMatchFromTmp@1160040041(VAR PurchDocMatch@1160040000 : Record 6085700;VAR MatchedPurchOrders@1160040002 : Code[1024];VAR MatchedReturnOrders@1160040005 : Code[1024];VAR MatchedPurchRcpts@1160040003 : Code[1024];VAR MatchedReturnShipment@1160040004 : Code[1024]);
    VAR
      PurchDocMatch2@1160040001 : Record 6085700;
      PurchaseOrderTmp@1160040006 : TEMPORARY Record 38;
      ReturnOrderTmp@1160040009 : TEMPORARY Record 38;
      PurchRcptTmp@1160040007 : TEMPORARY Record 120;
      ReturnShipmentTmp@1160040008 : TEMPORARY Record 6650;
      MatchTrackingMgt@6085573 : Codeunit 6085830;
    BEGIN
      MatchedPurchOrders := '';
      MatchedReturnOrders := '';
      MatchedPurchRcpts := '';
      MatchedReturnShipment := '';

      PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
      IF PurchDocMatch.FINDSET THEN
        REPEAT
          PurchDocMatch2 := PurchDocMatch;
          PurchDocMatch2.INSERT;

          MatchTrackingMgt.UpdateMatchedQtyFromMatch(PurchDocMatch2);

          CASE PurchDocMatch."Purch. Doc. Type" OF
            PurchDocMatch."Purch. Doc. Type"::Receipt:
              BEGIN
                IF NOT PurchRcptTmp.GET(PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedPurchRcpts = '' THEN
                    MatchedPurchRcpts := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedPurchRcpts) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedPurchRcpts) THEN
                      MatchedPurchRcpts := MatchedPurchRcpts + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  PurchRcptTmp.INIT;
                  PurchRcptTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  PurchRcptTmp.INSERT;
                END;
              END;
            PurchDocMatch."Purch. Doc. Type"::"Return Shipment":
              BEGIN
                IF NOT ReturnShipmentTmp.GET(PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedReturnShipment = '' THEN
                    MatchedReturnShipment := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedReturnShipment) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <=
                      MAXSTRLEN(MatchedReturnShipment)
                    THEN
                      MatchedReturnShipment := MatchedReturnShipment + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  ReturnShipmentTmp.INIT;
                  ReturnShipmentTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  ReturnShipmentTmp.INSERT;
                END;
              END;
            PurchDocMatch."Purch. Doc. Type"::Order:
              BEGIN
                IF NOT PurchaseOrderTmp.GET(PurchaseOrderTmp."Document Type"::Order,PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedPurchOrders = '' THEN
                    MatchedPurchOrders := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedPurchOrders) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedPurchOrders) THEN
                      MatchedPurchOrders := MatchedPurchOrders + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  PurchaseOrderTmp.INIT;
                  PurchaseOrderTmp."Document Type" := PurchaseOrderTmp."Document Type"::Order;
                  PurchaseOrderTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  PurchaseOrderTmp.INSERT;
                END;
              END;
            PurchDocMatch."Purch. Doc. Type"::"Return Order":
              BEGIN
                IF NOT ReturnOrderTmp.GET(ReturnOrderTmp."Document Type"::"Return Order",PurchDocMatch2."Purch. Doc. No.") THEN BEGIN
                  IF MatchedReturnOrders = '' THEN
                    MatchedReturnOrders := PurchDocMatch2."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedReturnOrders) + STRLEN(PurchDocMatch2."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedReturnOrders) THEN
                      MatchedReturnOrders := MatchedReturnOrders + ', ' + PurchDocMatch2."Purch. Doc. No.";

                  ReturnOrderTmp.INIT;
                  ReturnOrderTmp."Document Type" := ReturnOrderTmp."Document Type"::"Return Order";
                  ReturnOrderTmp."No." := PurchDocMatch2."Purch. Doc. No.";
                  ReturnOrderTmp.INSERT;
                END;
              END;
          END;
        UNTIL PurchDocMatch.NEXT = 0;
    END;

    PROCEDURE GetPurchLineMatchedQty@1160040008(VAR PurchLine@1000000002 : Record 39) : Decimal;
    VAR
      PurchDocType@6085573 : 'Receipt,Return Shipment,Order,Return Order';
    BEGIN
      IF PurchLine."Document Type" = PurchLine."Document Type"::Order THEN
        PurchDocType := PurchDocType::Order
      ELSE
        PurchDocType := PurchDocType::"Return Order";

      EXIT(CalculateMatchedQty('',PurchDocType,PurchLine."Document No.",PurchLine."Line No.",FALSE));
    END;

    PROCEDURE GetRcptLineMatchedQty@1000000021(VAR PurchRcptLine@1000000002 : Record 121) : Decimal;
    VAR
      PurchDocType@6085573 : 'Receipt,Return Shipment,Order,Return Order';
    BEGIN
      EXIT(CalculateMatchedQty('',PurchDocType::Receipt,PurchRcptLine."Document No.",PurchRcptLine."Line No.",FALSE));
    END;

    PROCEDURE GetReturnShptLineMatchedQty@1000000036(VAR ReturnShptLine@1000000002 : Record 6651) : Decimal;
    VAR
      PurchDocType@6085573 : 'Receipt,Return Shipment,Order,Return Order';
    BEGIN
      EXIT(CalculateMatchedQty('',PurchDocType::"Return Shipment",ReturnShptLine."Document No.",ReturnShptLine."Line No.",FALSE));
    END;

    [External]
    PROCEDURE GetDocLineMatchedQty@1000000020(VAR DocumentLine@1000000002 : Record 6085596) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      ReturnMatchQty@1000 : Decimal;
      Handled@1001 : Boolean;
    BEGIN
      OnBeforeGetDocLineMatchedQty(DocumentLine,ReturnMatchQty,Handled);
      IF Handled THEN
        EXIT(ReturnMatchQty);

      PurchDocMatch.SETRANGE("Document No.",DocumentLine."Document No.");
      PurchDocMatch.SETRANGE("Document Line No.",DocumentLine."Line No.");
      PurchDocMatch.CALCSUMS(Quantity);
      EXIT(PurchDocMatch.Quantity);
    END;

    [External]
    PROCEDURE IsDocMatched@1160040004(VAR Document@1000000002 : Record 6085590) : Boolean;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      IsDocMatched@1001 : Boolean;
      Handled@1000 : Boolean;
    BEGIN
      OnBeforeIsDocMatched(Document,IsDocMatched,Handled);
      IF Handled THEN
        EXIT(IsDocMatched);

      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      IF GetIsInvoice(Document) THEN
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::Receipt,PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::"Return Shipment",PurchDocMatch."Purch. Doc. Type"::"Return Order");
      EXIT(NOT PurchDocMatch.ISEMPTY);
    END;

    [External]
    PROCEDURE GetDocMatchedAmount@1000000028(VAR Document@1000000002 : Record 6085590) Amount : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      Vendor@161024013 : Record 23;
      Currency@161024012 : Record 4;
      DiscAmount@161024014 : Decimal;
      DocLineLineAmount@6085573 : Decimal;
      DocLineQuantity@6085574 : Decimal;
      DocLineUnitCost@6085575 : Decimal;
      MatchedAmount@1001 : Decimal;
      Handled@1000 : Boolean;
    BEGIN
      OnBeforeGetDocMatchedAmount(Document,MatchedAmount,Handled);
      IF Handled THEN
        EXIT(MatchedAmount);

      Vendor.GET(Document.GetSourceID);
      IF Vendor."Currency Code" <> '' THEN
        Currency.GET(Vendor."Currency Code");
      Currency.InitRoundingPrecision;

      PurchDocMatch.SETRANGE("Document No.",Document."No.");

      IF GetIsInvoice(Document) THEN
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::Receipt,PurchDocMatch."Purch. Doc. Type"::Order)
      ELSE
        PurchDocMatch.SETFILTER("Purch. Doc. Type",'%1|%2',
          PurchDocMatch."Purch. Doc. Type"::"Return Shipment",PurchDocMatch."Purch. Doc. Type"::"Return Order");

      IF PurchDocMatch.FINDSET THEN
        REPEAT
          DiscAmount :=
            ROUND(
              ROUND(PurchDocMatch.Quantity * PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") *
              PurchDocMatch."Line Discount %" / 100,
              Currency."Amount Rounding Precision");

          Amount += ROUND(PurchDocMatch."Direct Unit Cost" * PurchDocMatch.Quantity) - DiscAmount;
        UNTIL PurchDocMatch.NEXT = 0;
    END;

    [External]
    PROCEDURE CalcPurchDocMatchAmt@1160040036(VAR Document@1000000002 : Record 6085590;VAR PurchDocMatchTmp@1160040000 : TEMPORARY Record 6085700) Amount : Decimal;
    VAR
      Vendor@161024013 : Record 23;
      Currency@161024012 : Record 4;
      DiscAmount@161024014 : Decimal;
    BEGIN
      Vendor.GET(Document.GetSourceID);
      IF Vendor."Currency Code" <> '' THEN
        Currency.GET(Vendor."Currency Code");
      Currency.InitRoundingPrecision;

      IF PurchDocMatchTmp.FINDSET THEN
        REPEAT
          DiscAmount :=
            ROUND(
              ROUND(PurchDocMatchTmp.Quantity * PurchDocMatchTmp."Direct Unit Cost",Currency."Amount Rounding Precision") *
              PurchDocMatchTmp."Line Discount %" / 100,
              Currency."Amount Rounding Precision");

          Amount += ROUND(PurchDocMatchTmp."Direct Unit Cost" * PurchDocMatchTmp.Quantity) - DiscAmount;
        UNTIL PurchDocMatchTmp.NEXT = 0;
    END;

    [External]
    PROCEDURE IsPurchDocMatched@1160040009(PurchHeader@1160040000 : Record 38) : Boolean;
    VAR
      PurchLine@1160040001 : Record 39;
      PurchLineRel@6085573 : Record 6085702;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
        PurchLine.SETFILTER("Receipt No.",'<>%1','')
      ELSE
        PurchLine.SETFILTER("Return Shipment No.",'<>%1','');

      IF NOT PurchLine.ISEMPTY THEN
        EXIT(TRUE);

      IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN
        PurchLine.SETRANGE("Receipt No.")
      ELSE
        PurchLine.SETRANGE("Return Shipment No.");

      IF PurchLine.FIND('-') THEN
        REPEAT
          IF PurchLineRel.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN
            EXIT(TRUE);
        UNTIL PurchLine.NEXT = 0;

      EXIT(FALSE);
    END;

    PROCEDURE GetPurchDocMatchedAmount@1160040010(PurchHeader@1160040000 : Record 38;VAR DocumentAmount@1160040002 : Decimal;VAR MatchedAmount@1160040003 : Decimal) : Decimal;
    VAR
      PurchLine@1160040001 : Record 39;
      PurchLine2@1160040008 : Record 39;
      PurchRcptHeader@1160040004 : Record 120;
      RetShptHeader@1160040005 : Record 6650;
      PurchLineRel@1160040009 : Record 6085702;
    BEGIN
      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");

      IF PurchLine.FINDSET THEN
        REPEAT
          IF PurchLineRel.GET(PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.") THEN BEGIN
            PurchLine2.GET(PurchLineRel."Related Document Type",PurchLineRel."Related Document No.",PurchLineRel."Related Line No.");
            IF PurchLine2.Quantity <> 0 THEN
              MatchedAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchLine.Quantity;
          END ELSE
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::Invoice THEN BEGIN
              IF PurchLine."Receipt No." <> '' THEN BEGIN
                PurchRcptHeader.GET(PurchLine."Receipt No.");
                PurchLine2.GET(PurchLine2."Document Type"::Order,PurchRcptHeader."Order No.",PurchLine."Receipt Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  MatchedAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchLine.Quantity;
              END;
            END ELSE BEGIN
              IF PurchLine."Return Shipment No." <> '' THEN BEGIN
                RetShptHeader.GET(PurchLine."Return Shipment No.");
                PurchLine2.GET(PurchLine2."Document Type"::"Return Order",RetShptHeader."Return Order No.",
                  PurchLine."Return Shipment Line No.");
                IF PurchLine2.Quantity <> 0 THEN
                  MatchedAmount += PurchLine2."Line Amount" / PurchLine2.Quantity * PurchLine.Quantity;
              END;
            END;

          DocumentAmount += PurchLine."Line Amount";
        UNTIL PurchLine.NEXT = 0;
    END;

    [External]
    PROCEDURE ShowDocFileFromPurchDoc@161024029(PurchHeader@1000000002 : Record 38);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");
      Document.OpenDocFile;
    END;

    [External]
    PROCEDURE ShowDocFileFromPostedInv@1000000030(PurchInvHeader@1000000002 : Record 122);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.");
      Document.OpenDocFile;
    END;

    [External]
    PROCEDURE ShowDocFileFromPostedCrMemo@1000000032(PurchCrMemoHeader@1000000002 : Record 124);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.");
      Document.OpenDocFile;
    END;

    PROCEDURE ShowDocFileFromApprovalEntry@1160040024(ApprovalEntry@1000000002 : Record 454);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      Document.OpenDocFile;
    END;

    PROCEDURE ShowDocFileFromVendLedgEntry@1000000034(VendLedgEntry@1000000002 : Record 25);
    VAR
      Document@1000000000 : Record 6085590;
      PurchCrMemoHeader@1000000003 : Record 124;
      PurchInvHeader@1000000004 : Record 122;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Table No.","Created Doc. Subtype","Created Doc. No.","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Table No.",DATABASE::"Purchase Header");
      Document.SETFILTER("File Type",STRSUBSTNO('%1|%2',Document."File Type"::XML,Document."File Type"::OCR));
      Document.SETFILTER("Related Document No.",'=%1','');

      IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice THEN BEGIN
        PurchInvHeader.GET(VendLedgEntry."Document No.");
        Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::Invoice);
        Document.SETRANGE("Created Doc. No.",PurchInvHeader."Pre-Assigned No.");
      END ELSE
        IF VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" THEN BEGIN
          PurchCrMemoHeader.GET(VendLedgEntry."Document No.");
          Document.SETRANGE("Created Doc. Subtype",PurchHeader."Document Type"::"Credit Memo");
          Document.SETRANGE("Created Doc. No.",PurchCrMemoHeader."Pre-Assigned No.");
        END ELSE
          ERROR(Text022);

      IF NOT Document.FINDFIRST THEN
        ERROR(Text022);

      Document.OpenDocFile;
    END;

    PROCEDURE ShowDocFromDocFromNoAndDate@161024032(DocNo@161024012 : Code[20];PostingDate@161024013 : Date;ShowError@161024020 : Boolean);
    VAR
      Document@161024019 : Record 6085590;
      PurchInvHeader@161024014 : Record 122;
      PurchCrMemoHeader@161024018 : Record 124;
      PurchHeader@161024017 : Record 38;
      DocSubType@161024015 : Integer;
      DocId@161024016 : Code[20];
    BEGIN
      IF PurchInvHeader.GET(DocNo) AND (PurchInvHeader."Posting Date" = PostingDate) THEN BEGIN
        DocSubType := PurchHeader."Document Type"::Invoice;
        DocId := PurchInvHeader."Pre-Assigned No.";
      END ELSE
        IF PurchCrMemoHeader.GET(DocNo) AND (PurchCrMemoHeader."Posting Date" = PostingDate) THEN BEGIN
          DocSubType := PurchHeader."Document Type"::"Credit Memo";
          DocId := PurchCrMemoHeader."Pre-Assigned No.";
        END;

      IF DocId = '' THEN BEGIN
        IF ShowError THEN
          ERROR(Text022)
        ELSE
          EXIT;
      END;

      Document.SETCURRENTKEY("Created Doc. Table No.","Created Doc. Subtype","Created Doc. No.","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Table No.",DATABASE::"Purchase Header");
      Document.SETRANGE("Created Doc. Subtype",DocSubType);
      Document.SETRANGE("Created Doc. No.",DocId);
      Document.SETFILTER("File Type",STRSUBSTNO('%1|%2',Document."File Type"::XML,Document."File Type"::OCR));
      Document.SETFILTER("Related Document No.",'=%1','');

      IF NOT Document.FINDFIRST THEN BEGIN
        IF ShowError THEN
          ERROR(Text022)
        ELSE
          EXIT;
      END;

      Document.OpenDocFile;
    END;

    [External]
    PROCEDURE GetNoOfPurchOrders@161024014(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      EXIT(PurchHeader.COUNT);
    END;

    [External]
    PROCEDURE GetNoOfPurchReturnOrders@161024018(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      EXIT(PurchHeader.COUNT);
    END;

    [External]
    PROCEDURE LookupNoOfPurchOrders@161024021(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PAGE.RUN(0,PurchHeader);
    END;

    [External]
    PROCEDURE LookupNoOfPurchReturnOrders@161024020(Document@161024012 : Record 6085590) : Integer;
    VAR
      PurchHeader@161024013 : Record 38;
    BEGIN
      IF Document.GetSourceID = '' THEN
        EXIT;

      PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::"Return Order");
      PurchHeader.SETRANGE("Pay-to Vendor No.",Document.GetSourceID);
      PAGE.RUN(0,PurchHeader);
    END;

    PROCEDURE GetDocumentHeaderAmounts@161024033(PurchHeader@161024014 : Record 38;VAR ImportedAmountExclVAT@161024013 : Decimal;VAR ImportedAmountInclVAT@161024012 : Decimal;VAR ImportedAmountExclVATLCY@161024017 : Decimal;VAR ImportedAmountInclVATLCY@161024015 : Decimal) : Boolean;
    VAR
      Document@161024016 : Record 6085590;
    BEGIN
      IF NOT (PurchHeader."Document Type" IN [PurchHeader."Document Type"::Invoice,PurchHeader."Document Type"::Order,
        PurchHeader."Document Type"::"Credit Memo",PurchHeader."Document Type"::"Return Order"])
      THEN
        EXIT;

      IF NOT DCSetup.GET THEN
        EXIT;

      ImportedAmountExclVAT := 0;
      ImportedAmountInclVAT := 0;
      ImportedAmountExclVATLCY := 0;
      ImportedAmountInclVATLCY := 0;

      IF NOT GetPurchaseDocument(PurchHeader,Document) THEN
        EXIT;

      ImportedAmountExclVAT := Document."Amount Excl. VAT";
      ImportedAmountInclVAT := Document."Amount Incl. VAT";

      IF PurchHeader."Currency Factor" = 0 THEN
        PurchHeader."Currency Factor" := 1;

      ImportedAmountExclVATLCY := ROUND(ImportedAmountExclVAT / PurchHeader."Currency Factor");
      ImportedAmountInclVATLCY := ROUND(ImportedAmountInclVAT / PurchHeader."Currency Factor");

      EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetPurchStatusAmounts@161024034(VAR PurchHeader@6085578 : Record 38;VAR ImportedAmountExclVAT@6085577 : Decimal;VAR ImportedAmountInclVAT@6085576 : Decimal;VAR AssignedAmountExclVAT@6085575 : Decimal;VAR AssignedAmountInclVAT@6085574 : Decimal);
    VAR
      TempAmount1@6085579 : Decimal;
      TempAmount2@6085573 : Decimal;
    BEGIN
      GetPurchStatusAmounts3(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,AssignedAmountInclVAT,
        TempAmount1,TempAmount2,FALSE);
    END;

    [External]
    PROCEDURE GetPurchStatusAmounts2@6085585(VAR PurchHeader@6085593 : Record 38;VAR ImportedAmountExclVAT@6085576 : Decimal;VAR ImportedAmountInclVAT@6085575 : Decimal;VAR AssignedAmountExclVAT@6085574 : Decimal;VAR AssignedAmountInclVAT@6085573 : Decimal;VAR AssignedAmountExclVATLCY@6085588 : Decimal;VAR AssignedAmountInclVATLCY@6085586 : Decimal);
    BEGIN
      GetPurchStatusAmounts3(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,AssignedAmountInclVAT,
        AssignedAmountExclVATLCY,AssignedAmountInclVATLCY,FALSE);
    END;

    [External]
    PROCEDURE GetPurchStatusAmounts3@6085588(VAR PurchHeader@6085596 : Record 38;VAR ImportedAmountExclVAT@6085595 : Decimal;VAR ImportedAmountInclVAT@6085594 : Decimal;VAR AssignedAmountExclVAT@6085592 : Decimal;VAR AssignedAmountInclVAT@6085591 : Decimal;VAR AssignedAmountExclVATLCY@6085590 : Decimal;VAR AssignedAmountInclVATLCY@6085589 : Decimal;CalcFullOrderAmt@6085588 : Boolean);
    VAR
      PurchHeader2@6085601 : Record 38;
      TempPurchLine@6085600 : TEMPORARY Record 39;
      TotalPurchLine@6085599 : Record 39;
      TotalPurchLineLCY@6085598 : Record 39;
      PurchasePost@6085597 : Codeunit 90;
      LocalizationMgt@1000 : Codeunit 6192827;
      PurchaseAmountCalculations@6085586 : Codeunit 6085792;
      TempAmount1@6085576 : Decimal;
      TempAmount2@6085575 : Decimal;
      VATText@6085574 : Text[30];
      QtyType@6085573 : 'General,Invoicing,Shipping';
    BEGIN
      ImportedAmountExclVAT := 0;
      ImportedAmountInclVAT := 0;
      AssignedAmountExclVAT := 0;
      AssignedAmountInclVAT := 0;
      AssignedAmountExclVATLCY := 0;
      AssignedAmountInclVATLCY := 0;

      IF (PurchHeader."No." = '') OR (PurchHeader."Pay-to Vendor No." = '') THEN
        EXIT;

      PurchHeader2.GET(PurchHeader."Document Type",PurchHeader."No.");

      IF (LocalizationMgt.Localization IN ['NA','US','CA','MX']) AND (PurchHeader."Tax Area Code" <> '') THEN
        PurchaseAmountCalculations.CalculatePurchAmountsNA(PurchHeader,AssignedAmountExclVAT,AssignedAmountInclVAT,
          AssignedAmountExclVATLCY,AssignedAmountInclVATLCY)
      ELSE BEGIN
        IF (PurchHeader2."Document Type" IN [PurchHeader2."Document Type"::Invoice,PurchHeader2."Document Type"::"Credit Memo"]) OR
          ((PurchHeader2."Document Type" IN [PurchHeader2."Document Type"::Order,PurchHeader2."Document Type"::"Return Order"]) AND
          CalcFullOrderAmt)
        THEN
          QtyType := QtyType::General
        ELSE
          QtyType := QtyType::Invoicing;

        PurchasePost.GetPurchLines(PurchHeader2,TempPurchLine,QtyType);
        CLEAR(PurchasePost);
        PurchasePost.SumPurchLinesTemp(PurchHeader2,TempPurchLine,QtyType,TotalPurchLine,TotalPurchLineLCY,TempAmount1,VATText);
        AssignedAmountExclVAT := TotalPurchLine.Amount;
        AssignedAmountInclVAT := TotalPurchLine."Amount Including VAT";
        AssignedAmountExclVATLCY := TotalPurchLineLCY.Amount;
        AssignedAmountInclVATLCY := TotalPurchLineLCY."Amount Including VAT";
      END;

      GetDocumentHeaderAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,TempAmount1,TempAmount2);
    END;

    [External]
    PROCEDURE ChangeDocAmounts@161024035(PurchHeader@161024013 : Record 38);
    VAR
      Document@161024014 : Record 6085590;
      DCAppMgt@1160040000 : Codeunit 6085722;
      DocAmount@161024012 : Page 6085721;
    BEGIN
      DCAppMgt.CheckCanChangeImportedAmount(PurchHeader,TRUE);

      PurchHeader.TESTFIELD(Status,PurchHeader.Status::Open);

      IF NOT GetPurchaseDocument(PurchHeader,Document) THEN
        EXIT;

      PurchHeader.FILTERGROUP(2);
      PurchHeader.SETRECFILTER;
      PurchHeader.FILTERGROUP(0);
      DocAmount.SETRECORD(PurchHeader);
      DocAmount.SETTABLEVIEW(PurchHeader);
      DocAmount.LOOKUPMODE(TRUE);
      DocAmount.SetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      IF DocAmount.RUNMODAL <> ACTION::LookupOK THEN
        EXIT;

      DocAmount.GetAmounts(Document."Amount Excl. VAT",Document."Amount Incl. VAT");
      Document.MODIFY;
    END;

    PROCEDURE GetVendOutstaAllocAmt@161024039(VAR Vendor@161024013 : Record 23) : Decimal;
    VAR
      PurchAllocEntry@161024012 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Vendor No.",Open);
      PurchAllocEntry.SETRANGE("Vendor No.",Vendor."No.");
      PurchAllocEntry.SETRANGE(Open,TRUE);
      Vendor.COPYFILTER("Global Dimension 1 Filter",PurchAllocEntry."Shortcut Dimension 1 Code");
      Vendor.COPYFILTER("Global Dimension 2 Filter",PurchAllocEntry."Shortcut Dimension 2 Code");
      Vendor.COPYFILTER("Currency Filter",PurchAllocEntry."Currency Code");
      PurchAllocEntry.CALCSUMS("Amount Including VAT (LCY)");
      EXIT(PurchAllocEntry."Amount Including VAT (LCY)");
    END;

    PROCEDURE DrillDownVendOutstaAllocAmt@161024040(VAR Vendor@161024013 : Record 23);
    VAR
      PurchAllocEntry@161024012 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Vendor No.");
      PurchAllocEntry.SETRANGE("Vendor No.",Vendor."No.");
      PurchAllocEntry.SETRANGE(Open,TRUE);
      Vendor.COPYFILTER("Global Dimension 1 Filter",PurchAllocEntry."Shortcut Dimension 1 Code");
      Vendor.COPYFILTER("Global Dimension 2 Filter",PurchAllocEntry."Shortcut Dimension 2 Code");
      Vendor.COPYFILTER("Currency Filter",PurchAllocEntry."Currency Code");
      PAGE.RUN(0,PurchAllocEntry);
    END;

    [External]
    PROCEDURE GetPurchAllocAmount@161024041(VAR PurchHeader@161024012 : Record 38;VAR AmountExclVAT@161024013 : Decimal;VAR AmountInclVAT@161024014 : Decimal);
    VAR
      PurchAllocEntry@161024015 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
      PurchAllocEntry.SETRANGE("Source Type",PurchHeader."Document Type");
      PurchAllocEntry.SETRANGE("Source No.",PurchHeader."No.");
      PurchAllocEntry.CALCSUMS(Amount,"Amount Including VAT");
      AmountExclVAT := PurchAllocEntry.Amount;
      AmountInclVAT := PurchAllocEntry."Amount Including VAT";
    END;

    PROCEDURE DrillDownPurchAllocAmount@161024042(VAR PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocEntry@161024015 : Record 6085732;
    BEGIN
      PurchAllocEntry.SETCURRENTKEY("Source Type","Source No.");
      PurchAllocEntry.SETRANGE("Source Type",PurchHeader."Document Type");
      PurchAllocEntry.SETRANGE("Source No.",PurchHeader."No.");
      PAGE.RUN(0,PurchAllocEntry);
    END;

    PROCEDURE CheckAmountsOnPost@30(PurchHeader@1160040006 : Record 38) MessageText : Text[1024];
    VAR
      PurchSetup@1160040000 : Record 312;
      PurchLine@1160040001 : Record 39;
      Document@1000 : Record 6085590;
      DCAppMgt@1160040009 : Codeunit 6085722;
      ImportedAmountExclVAT@1160040005 : Decimal;
      ImportedAmountInclVAT@1160040004 : Decimal;
      AssignedAmountExclVAT@1160040003 : Decimal;
      AssignedAmountInclVAT@1160040002 : Decimal;
      AmtExclVATTest@1003 : Boolean;
      AmtInclVATTest@1002 : Boolean;
      Dummy@1160040007 : Integer;
      Template@1001 : Record 6085579;
    BEGIN
      IF NOT DCSetup.GET THEN
        EXIT;

      IF NOT GetPurchaseDocument(PurchHeader,Document) THEN
        EXIT;

      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] THEN BEGIN
        IF NOT PurchHeader.Invoice THEN
          EXIT;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.SETFILTER("Qty. to Invoice",'<>%1',0);
        IF PurchLine.ISEMPTY THEN
          EXIT;
      END;

      GetPurchStatusAmounts(PurchHeader,ImportedAmountExclVAT,ImportedAmountInclVAT,AssignedAmountExclVAT,AssignedAmountInclVAT);

      PurchSetup.GET;
      Template.GET(Document."Template No.");

      AmtExclVATTest := DCAppMgt.TestAmtExclVAT(DCSetup."Purch: Amount Valid. on Post.",ImportedAmountExclVAT,AssignedAmountExclVAT,
        PurchHeader."Currency Code",PurchSetup."Invoice Rounding");
      AmtInclVATTest := DCAppMgt.TestAmtInclVAT(DCSetup."Purch: Amount Valid. on Post.",ImportedAmountInclVAT,AssignedAmountInclVAT,
        PurchHeader."Currency Code");

      IF AmtExclVATTest THEN
        MessageText := Text014 + STRSUBSTNO(Text016,DCAppMgt.FormatAmount(ImportedAmountExclVAT,PurchHeader."Currency Code")) +
          STRSUBSTNO(Text017,DCAppMgt.FormatAmount(AssignedAmountExclVAT,PurchHeader."Currency Code"));

      IF AmtInclVATTest THEN BEGIN
        IF MessageText <> '' THEN
          MessageText := MessageText + '\';

        MessageText := MessageText + Text015 +
          STRSUBSTNO(Text016,DCAppMgt.FormatAmount(ImportedAmountInclVAT,PurchHeader."Currency Code")) +
          STRSUBSTNO(Text017,DCAppMgt.FormatAmount(AssignedAmountInclVAT,PurchHeader."Currency Code"));
      END;

      IF MessageText <> '' THEN
        ERROR(ImpAmtNotEqAsgnAmtMsg + MessageText);
    END;

    PROCEDURE PurchDocOnPost@1160040026(VAR PurchHeader@1160040000 : Record 38);
    VAR
      AmountExclVAT@1160040001 : Decimal;
      AmountInclVAT@1160040002 : Decimal;
      LineAmountExclVAT@1160040003 : Decimal;
      LineAmountInclVAT@1160040004 : Decimal;
    BEGIN
      CheckAmountsOnPost(PurchHeader);
    END;

    PROCEDURE PurchHeaderOnDelete@161024050(PurchHeader@161024012 : Record 38);
    VAR
      PurchAllocHeader@161024013 : Record 6085730;
      PurchDocMatch@1160040000 : Record 6085700;
      WebSearchMgt@161024014 : Codeunit 6085748;
    BEGIN
      PurchAllocHeader.ReverseAll(PurchHeader);

      IF PurchHeader."Document Type" IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"] THEN BEGIN
        IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
        ELSE
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Shipment");
        PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchHeader."No.");
        PurchDocMatch.DELETEALL(TRUE);
      END;

      WebSearchMgt.UpdateWebSearchFromPurchHeader(PurchHeader,TRUE);
    END;

    PROCEDURE PurchHeaderOnModify@161024055(PurchHeader@161024012 : Record 38;xPurchHeader@161024013 : Record 38;Force@161024014 : Boolean);
    VAR
      WebSearchMgt@161024015 : Codeunit 6085748;
    BEGIN
      IF (PurchHeader."Posting Date" <> xPurchHeader."Posting Date") OR
        (PurchHeader."Document Date" <> xPurchHeader."Document Date") OR
        (PurchHeader."Vendor Invoice No." <> xPurchHeader."Vendor Invoice No.") OR
        (PurchHeader."Vendor Cr. Memo No." <> xPurchHeader."Vendor Cr. Memo No.") OR
        (PurchHeader."Purchaser Code" <> xPurchHeader."Purchaser Code") OR
        (Force)
      THEN
        WebSearchMgt.UpdateWebSearchFromPurchHeader(PurchHeader,FALSE);
    END;

    PROCEDURE PurchLineOnDelete@1160040000(PurchLine@1160040000 : Record 39);
    VAR
      PurchLineRel@1160040002 : Record 6085702;
    BEGIN
      IF NOT (PurchLine."Document Type" IN
        [PurchLine."Document Type"::Order,
        PurchLine."Document Type"::Invoice,
        PurchLine."Document Type"::"Credit Memo",
        PurchLine."Document Type"::"Return Order"])
      THEN
        EXIT;

      PurchLineRel.RESET;
      PurchLineRel.SETRANGE("Related Document Type",PurchLine."Document Type");
      PurchLineRel.SETRANGE("Related Document No.",PurchLine."Document No.");
      PurchLineRel.SETRANGE("Related Line No.",PurchLine."Line No.");
      IF PurchLineRel.FINDFIRST THEN
        ERROR(MatchedToOtherDocErr,PurchLine."Document Type",PurchLine."Document No.",PurchLine."Line No.",
          PurchLineRel."Document Type",PurchLineRel."Document No.",PurchLineRel."Document Line No.");

      PurchLineRel.RESET;
      PurchLineRel.SETRANGE("Document Type",PurchLine."Document Type");
      PurchLineRel.SETRANGE("Document No.",PurchLine."Document No.");
      PurchLineRel.SETRANGE("Document Line No.",PurchLine."Line No.");
      PurchLineRel.DELETEALL;
    END;

    [External]
    PROCEDURE GetResponsibillityCenter@1160760000(VAR Document@161024012 : Record 6085590) : Code[20];
    VAR
      Field@161024013 : Record 6085580;
    BEGIN
      EXIT(CaptureMgt.GetText(Document,Field.Type::Header,'RESPCENTER',0));
    END;

    [External]
    PROCEDURE MatchWithinTolerance@161024012(Template@1160040004 : Record 6085579;DocumentPostingDate@1160040005 : Date;DocumentCurrCode@1160040002 : Code[10];DocumentCurrFactor@1160040006 : Decimal;DocumentAmount@1160040003 : Decimal;MatchedAmount@1160040000 : Decimal) : Boolean;
    VAR
      TolerenceAmount@6085573 : Decimal;
    BEGIN
      TolerenceAmount := GetVarianceToleranceAmount(Template,DocumentPostingDate,DocumentCurrCode,DocumentCurrFactor,DocumentAmount);

      IF ABS(DocumentAmount - MatchedAmount) <= TolerenceAmount THEN
        EXIT(TRUE)
      ELSE
        EXIT(FALSE);
    END;

    PROCEDURE GetVarianceToleranceAmount@6085604(Template@6085578 : Record 6085579;DocumentPostingDate@6085577 : Date;DocumentCurrCode@6085576 : Code[10];DocumentCurrFactor@6085575 : Decimal;DocumentAmount@6085574 : Decimal) TolerenceAmount : Decimal;
    VAR
      Currency@6085583 : Record 4;
      CurrExchRate@6085582 : Record 330;
      AllowedVarianceAmount@6085580 : Decimal;
      AllowedVarianceAmountPct@6085579 : Decimal;
    BEGIN
      GetGLSetup;
      GetDCSetup;

      IF (DocumentCurrCode = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        DocumentCurrCode := '';

      IF (DocumentCurrCode <> '') AND (Template."Max. Variance Amt Allowed LCY" <> 0) THEN BEGIN
        IF DocumentCurrFactor = 0 THEN
          DocumentCurrFactor := CurrExchRate.ExchangeRate(DocumentPostingDate,DocumentCurrCode);

        AllowedVarianceAmount := CurrExchRate.ExchangeAmtLCYToFCY(DocumentPostingDate,DocumentCurrCode,
          Template."Max. Variance Amt Allowed LCY",DocumentCurrFactor);
      END ELSE
        AllowedVarianceAmount := Template."Max. Variance Amt Allowed LCY";

      AllowedVarianceAmountPct := Template."Allowed Variance %" / 100 * DocumentAmount;

      CASE TRUE OF
        (AllowedVarianceAmount <> 0) AND (AllowedVarianceAmountPct <> 0):
          IF AllowedVarianceAmountPct < AllowedVarianceAmount THEN
            TolerenceAmount := AllowedVarianceAmountPct
          ELSE
            TolerenceAmount := AllowedVarianceAmount;

        Template."Max. Variance Amt Allowed LCY" <> 0:
          TolerenceAmount := AllowedVarianceAmount;

        Template."Allowed Variance %" <> 0:
          TolerenceAmount := AllowedVarianceAmountPct
      END;
    END;

    PROCEDURE GetVarianceToleranceUnitCost@6085608(Template@6085578 : Record 6085579;DocumentPostinDate@6085577 : Date;DocumentCurrCode@6085576 : Code[10];DocumentCurrFactor@6085575 : Decimal;DocumentAmount@6085574 : Decimal) TolerenceAmount : Decimal;
    VAR
      Currency@6085583 : Record 4;
      CurrExchRate@6085582 : Record 330;
      AllowedVarianceAmount@6085580 : Decimal;
      AllowedVarianceAmountPct@6085579 : Decimal;
    BEGIN
      GetGLSetup;
      GetDCSetup;

      IF (DocumentCurrCode = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
        DocumentCurrCode := '';

      IF (DocumentCurrCode <> '') AND (Template."Unit Cost - Variance Amt (LCY)" <> 0) THEN BEGIN
        IF DocumentCurrFactor = 0 THEN
          DocumentCurrFactor := CurrExchRate.ExchangeRate(DocumentPostinDate,DocumentCurrCode);

        AllowedVarianceAmount := CurrExchRate.ExchangeAmtLCYToFCY(DocumentPostinDate,DocumentCurrCode,
          Template."Unit Cost - Variance Amt (LCY)",DocumentCurrFactor);
      END ELSE
        AllowedVarianceAmount := Template."Unit Cost - Variance Amt (LCY)";

      AllowedVarianceAmountPct := Template."Unit Cost - Variance %" / 100 * DocumentAmount;

      CASE TRUE OF
        (AllowedVarianceAmount <> 0) AND (AllowedVarianceAmountPct <> 0):
          IF AllowedVarianceAmountPct < AllowedVarianceAmount THEN
            TolerenceAmount := AllowedVarianceAmountPct
          ELSE
            TolerenceAmount := AllowedVarianceAmount;

        Template."Unit Cost - Variance Amt (LCY)" <> 0:
          TolerenceAmount := AllowedVarianceAmount;

        Template."Unit Cost - Variance %" <> 0:
          TolerenceAmount := AllowedVarianceAmountPct
      END;
    END;

    PROCEDURE UpdateLineNoTrans@1160040005(VAR Document@1160040000 : Record 6085590;LineNo@1160040002 : Integer;ToType@1160040001 : Integer;ToNo@1000 : Code[20]);
    VAR
      Template@1160040003 : Record 6085579;
      Item@1160040005 : Record 27;
      ItemVendor@1160040007 : Record 99;
      LineTransl@1160040008 : Record 6085584;
      VendItemNo@1160040004 : Code[250];
      ItemReferenceMgt@6085574 : Codeunit 6086026;
      VendorNo@1001 : Code[50];
    BEGIN
      Template.GET(Document."Template No.");

      VendItemNo := GetLineAccountNo(Document,LineNo);

      IF VendItemNo = '' THEN
        EXIT;

      VendorNo := Document.GetSourceID;

      ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
      ItemVendor.SETRANGE("Vendor No.",VendorNo);
      ItemVendor.SETRANGE("Vendor Item No.",COPYSTR(VendItemNo,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));

      LineTransl.SETRANGE("Template No.",Template."No.");
      LineTransl.SETRANGE(Type,LineTransl.Type::"Line Field");
      LineTransl.SETRANGE("Field Code",'NO');
      LineTransl.SETRANGE("Translate From",COPYSTR(VendItemNo,1,MAXSTRLEN(LineTransl."Translate From")));

      IF (ToType = LineTransl."Translate to Type"::" ") OR (ToNo = '') THEN BEGIN
        ItemReferenceMgt.DeleteItemReferenceVendor(VendorNo,VendItemNo);
        ItemVendor.DELETEALL(TRUE);
        LineTransl.DELETEALL(TRUE);
        EXIT;
      END;

      CASE TRUE OF
        (ToType = LineTransl."Translate to Type"::Item) AND LineTransl.FINDFIRST AND
          (LineTransl."Translate to Type" = LineTransl."Translate to Type"::Item):
          BEGIN // Update Linetranslation
            IF ((LineTransl."Translate to No." <> ToNo) OR (LineTransl."Translate to Type" <> ToType)) THEN BEGIN
              IF NOT CONFIRM(Text002,FALSE,VendItemNo,LineTransl."Translate to Type",LineTransl."Translate to No.") THEN
                ERROR('');

              LineTransl.VALIDATE("Translate to Type",ToType);
              LineTransl.VALIDATE("Translate to No.",ToNo);
              Item.GET(ToNo);
              LineTransl.VALIDATE("Translate to UOM Code",Item."Purch. Unit of Measure");
              LineTransl.MODIFY(TRUE);
            END;
          END;
        (ToType = LineTransl."Translate to Type"::Item):
          BEGIN
            ItemReferenceMgt.UpdateItemReferenceVendor(VendorNo,LineNo,ToType,ToNo,LineTransl,VendItemNo,Item);
          END;
        ELSE
          BEGIN
            IF LineTransl.FINDFIRST THEN BEGIN
              IF ((LineTransl."Translate to No." <> ToNo) OR (LineTransl."Translate to Type" <> ToType)) THEN BEGIN
                IF NOT CONFIRM(Text002,FALSE,VendItemNo,LineTransl."Translate to Type",LineTransl."Translate to No.") THEN
                  ERROR('');

                LineTransl."Translate to UOM Code" := '';
                LineTransl.VALIDATE("Translate to Type",ToType);
                LineTransl.VALIDATE("Translate to No.",ToNo);
                LineTransl.MODIFY(TRUE);
              END;
            END ELSE BEGIN
              LineTransl.INIT;
              LineTransl.VALIDATE("Template No.",Template."No.");
              LineTransl.VALIDATE(Type,LineTransl.Type::"Line Field");
              LineTransl.VALIDATE("Field Code",'NO');
              LineTransl.VALIDATE("Translate From",COPYSTR(VendItemNo,1,MAXSTRLEN(LineTransl."Translate From")));
              LineTransl.VALIDATE("Translate to Type",ToType);
              LineTransl.VALIDATE("Translate to No.",ToNo);
              LineTransl.INSERT(TRUE);
          END;
        END;
      END;
    END;

    PROCEDURE CheckOrderRelation@6085573(PurchLine@6085573 : Record 39) : Boolean;
    BEGIN
      IF (PurchLine."Document Type" = PurchLine."Document Type"::Invoice) AND (PurchLine."Receipt No." = 'ORDER') THEN
        EXIT(TRUE);
    END;

    PROCEDURE CheckRetOrderRelation@1160040012(PurchLine@6085573 : Record 39) : Boolean;
    BEGIN
      IF (PurchLine."Document Type" = PurchLine."Document Type"::"Credit Memo") AND (PurchLine."Return Shipment No."  = 'RETURNORDER')
      THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE GetAmountDistribution@1160040013(PurchHeader@1160040000 : Record 38);
    VAR
      UsePurchAmountDistrib@1160040001 : Page 6085783;
      AmtDistribCode@1160040004 : Code[10];
      LineAction@1160040003 : 'ReplaceLines,KeepLines';
      AmountToDistribute@1160040002 : Decimal;
    BEGIN
      PurchHeader.FILTERGROUP(4);
      PurchHeader.SETRECFILTER;
      PurchHeader.FILTERGROUP(0);
      UsePurchAmountDistrib.SETTABLEVIEW(PurchHeader);
      UsePurchAmountDistrib.LOOKUPMODE := TRUE;
      IF UsePurchAmountDistrib.RUNMODAL = ACTION::LookupOK THEN BEGIN
        UsePurchAmountDistrib.GetValues(AmtDistribCode,LineAction,AmountToDistribute);
        ApplyAmountDistribution(PurchHeader,AmtDistribCode,LineAction,AmountToDistribute);
      END;
    END;

    [External]
    PROCEDURE ApplyAmountDistribution@1160040015(VAR PurchHeader@1160040006 : Record 38;StdAmtDistribCode@1160040002 : Code[10];LineAction@1160040001 : 'ReplaceLines,KeepLines';AmtToDistribute@1160040000 : Decimal);
    VAR
      StdAmountDistrib@1160040003 : Record 6085774;
      StdAmountDistribLine@1160040004 : Record 6085775;
      StdAmountDistribDim@1160040013 : Record 6085776;
      StdVendAmtDistribCode@1160040015 : Record 6085777;
      PurchLine@1160040005 : Record 39;
      Currency@1160040008 : Record 4;
      DCDimMgt@1160040012 : Codeunit 6085615;
      TransferExtendedText@1160040014 : Codeunit 378;
      PctAmtToDistribute@1160040011 : Decimal;
      TotalAmtDistributed@1160040009 : Decimal;
      PctToDistribute@6085574 : Decimal;
      NextLineNo@1160040007 : Integer;
      LineNoToAdjust@1160040010 : Integer;
    BEGIN
      PurchHeader.TESTFIELD("Buy-from Vendor No.");
      IF PurchHeader."Currency Code" = '' THEN
        Currency.InitRoundingPrecision
      ELSE
        Currency.GET(PurchHeader."Currency Code");

      StdAmountDistrib.GET(StdAmtDistribCode);
      StdAmountDistrib.TESTFIELD("Enabled for Purchase");

      IF StdAmountDistrib."Enabled for Purchase" = StdAmountDistrib."Enabled for Purchase"::"Yes - selected vendors only" THEN
        IF NOT StdVendAmtDistribCode.GET(PurchHeader."Buy-from Vendor No.",StdAmountDistrib.Code) THEN
          ERROR(STRSUBSTNO(Text004,StdAmountDistrib.Code,PurchHeader."Buy-from Vendor No."));

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      IF LineAction = LineAction::ReplaceLines THEN
        IF PurchLine.FINDSET(TRUE,FALSE) THEN
          REPEAT
            PurchLine.SuspendStatusCheck(TRUE);
            PurchLine.DELETE(TRUE);
          UNTIL PurchLine.NEXT = 0;

      IF PurchLine.FINDLAST THEN
        NextLineNo := PurchLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      // Create section title
      PurchLine.INIT;
      PurchLine."Document Type" := PurchHeader."Document Type";
      PurchLine."Document No." := PurchHeader."No.";
      PurchLine."Line No." := NextLineNo;
      PurchLine.Description := STRSUBSTNO(Text003,StdAmountDistrib.Code);
      PurchLine.INSERT;

      PctAmtToDistribute := AmtToDistribute;
      StdAmountDistribLine.SETRANGE("Amount Distribution Code",StdAmountDistrib.Code);
      IF StdAmountDistribLine.FINDSET THEN
        REPEAT
          IF (StdAmountDistribLine.Type = StdAmountDistribLine.Type::" ") OR
            ((StdAmountDistribLine.Type <> StdAmountDistribLine.Type::" ") AND (StdAmountDistribLine."No." = ''))
          THEN BEGIN
            StdAmountDistribLine.TESTFIELD("Unit Cost",0);
            StdAmountDistribLine.TESTFIELD("Distribution %",0);
          END ELSE
            IF StdAmountDistribLine."Distribution %" <> 0 THEN BEGIN
              StdAmountDistribLine.TESTFIELD(Quantity,1);
              StdAmountDistribLine.TESTFIELD("Unit Cost",0);
              PctToDistribute := PctToDistribute + StdAmountDistribLine."Distribution %";
            END ELSE BEGIN
              StdAmountDistribLine.TESTFIELD("Unit Cost");
              StdAmountDistribLine.TESTFIELD(Quantity);
              PctAmtToDistribute := PctAmtToDistribute - (StdAmountDistribLine."Unit Cost" * StdAmountDistribLine.Quantity);
            END;
        UNTIL StdAmountDistribLine.NEXT = 0;

      StdAmountDistribLine.RESET;
      StdAmountDistribLine.SETRANGE("Amount Distribution Code",StdAmountDistrib.Code);
      // Only distribute fixed cost lines if sum of these lines are higher than amount to distribute
      IF PctAmtToDistribute <= 0 THEN
        StdAmountDistribLine.SETFILTER("Unit Cost",'<>%1',0);

      StdAmountDistribLine.FINDSET;
      REPEAT
        NextLineNo := NextLineNo + 10000;

        PurchLine.SuspendStatusCheck(TRUE);
        PurchLine.INIT;
        PurchLine."Line No." := NextLineNo;
        IF (StdAmountDistribLine.Type = StdAmountDistribLine.Type::" ") OR
          ((StdAmountDistribLine.Type <> StdAmountDistribLine.Type::" ") AND (StdAmountDistribLine."No." = ''))
        THEN BEGIN
          PurchLine.VALIDATE(Type,PurchLine.Type::" ");
          PurchLine.VALIDATE("No.",StdAmountDistribLine."No.");
          PurchLine.Description := StdAmountDistribLine.Description;
          PurchLine.INSERT(TRUE);
        END ELSE BEGIN
          StdAmountDistribLine.TESTFIELD("No.");

          PurchLine.VALIDATE(Type,StdAmountDistribLine.Type);
          PurchLine.VALIDATE("No.",StdAmountDistribLine."No.");
          IF StdAmountDistribLine."Variant Code" <> '' THEN
            PurchLine.VALIDATE("Variant Code",StdAmountDistribLine."Variant Code");

          IF StdAmountDistribLine."Unit Cost" <> 0 THEN BEGIN
            StdAmountDistribLine.TESTFIELD(Quantity);
            PurchLine.VALIDATE(Quantity,StdAmountDistribLine.Quantity)
          END ELSE
            PurchLine.VALIDATE(Quantity,1);

          IF StdAmountDistribLine."Unit of Measure Code" <> '' THEN
            PurchLine.VALIDATE("Unit of Measure Code",StdAmountDistribLine."Unit of Measure Code");
          IF StdAmountDistribLine."Gen. Bus. Posting Group" <> '' THEN
            PurchLine.VALIDATE("Gen. Bus. Posting Group",StdAmountDistribLine."Gen. Bus. Posting Group");
          IF StdAmountDistribLine."VAT Prod. Posting Group" <> '' THEN
            PurchLine.VALIDATE("VAT Prod. Posting Group",StdAmountDistribLine."VAT Prod. Posting Group");
          IF StdAmountDistribLine."Gen. Prod. Posting Group" <> '' THEN
            PurchLine.VALIDATE("Gen. Prod. Posting Group",StdAmountDistribLine."Gen. Prod. Posting Group");
          IF StdAmountDistribLine."VAT Bus. Posting Group" <> '' THEN
            PurchLine.VALIDATE("VAT Bus. Posting Group",StdAmountDistribLine."VAT Bus. Posting Group");

          PurchLine.Description := StdAmountDistribLine.Description;
          IF StdAmountDistribLine."Unit Cost" <> 0 THEN
            PurchLine.VALIDATE("Direct Unit Cost",StdAmountDistribLine."Unit Cost")
          ELSE BEGIN
            PurchLine.VALIDATE("Direct Unit Cost",
              ROUND(PctAmtToDistribute / 100 * StdAmountDistribLine."Distribution %",Currency."Unit-Amount Rounding Precision"));

             LineNoToAdjust := PurchLine."Line No.";
          END;

          PurchLine.INSERT(TRUE);

          // Update Dimensions
          StdAmountDistribDim.SETRANGE("Amount Distribution Code",StdAmountDistribLine."Amount Distribution Code");
          StdAmountDistribDim.SETRANGE("Line No.",StdAmountDistribLine."Line No.");
          IF StdAmountDistribDim.FINDSET THEN
            REPEAT
              DCDimMgt.UpdatePurchLineDim(PurchLine,StdAmountDistribDim."Dimension Code",StdAmountDistribDim."Dimension Value Code");
            UNTIL StdAmountDistribDim.NEXT = 0;

          TotalAmtDistributed := TotalAmtDistributed + PurchLine."Line Amount";

          IF TransferExtendedText.PurchCheckIfAnyExtText(PurchLine,FALSE) THEN BEGIN
            TransferExtendedText.InsertPurchExtText(PurchLine);
            PurchLine.FINDLAST;
            NextLineNo := PurchLine."Line No.";
          END;
        END;
      UNTIL StdAmountDistribLine.NEXT = 0;

      IF (AmtToDistribute <> TotalAmtDistributed) AND (PctToDistribute = 100) THEN BEGIN
        // Handle rounding. We adjust the last line that was created from a Amount Distribution line where Distribution % <> 0
        // Note, this last line can become negative in rare situations
        PurchLine.GET(PurchHeader."Document Type",PurchHeader."No.",LineNoToAdjust);
        PurchLine.VALIDATE("Direct Unit Cost",PurchLine."Direct Unit Cost" + AmtToDistribute - TotalAmtDistributed);
        PurchLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE GetIsUsingPurchOrders@1160040014() : Boolean;
    VAR
      PurchHeader@1160040000 : Record 38;
    BEGIN
      PurchHeader.SETFILTER("Document Type",'%1|%2',PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order");
      EXIT(NOT PurchHeader.ISEMPTY);
    END;

    PROCEDURE FindDocument@1160040023(VAR Document@1160040002 : Record 6085590;CreatedDocTableNo@1160040001 : Integer;CreatedDocSubType@1160040000 : Integer;CreatedDocNo@1160040003 : Code[20]);
    VAR
      PurchaseHeader@1160040004 : Record 38;
    BEGIN
      IF NOT GetDocument(Document,CreatedDocTableNo,CreatedDocSubType,CreatedDocNo) THEN BEGIN
        PurchaseHeader."Document Type" := CreatedDocSubType;
        ERROR(Text027,PurchaseHeader."Document Type");
      END;
    END;

    [External]
    PROCEDURE GetDocument@2(VAR Document@1160040002 : Record 6085590;CreatedDocTableNo@1160040001 : Integer;CreatedDocSubType@1160040000 : Integer;CreatedDocNo@1160040003 : Code[20]) : Boolean;
    VAR
      PurchHeader@1160040004 : Record 38;
      ExtDocNo@1160040005 : Code[80];
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Table No.","Created Doc. Subtype","Created Doc. No.","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Table No.",CreatedDocTableNo);
      Document.SETRANGE("Created Doc. Subtype",CreatedDocSubType);
      Document.SETRANGE("Created Doc. No.",CreatedDocNo);
      Document.SETFILTER("File Type",'<>%1',Document."File Type"::Miscellaneous);
      Document.SETFILTER("Related Document No.",'=%1','');

      IF (CreatedDocTableNo = DATABASE::"Purchase Header") AND
        (CreatedDocSubType IN [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::"Return Order"])
      THEN BEGIN
        PurchHeader.GET(CreatedDocSubType,CreatedDocNo);
        IF Document.FINDFIRST THEN
          REPEAT
            ExtDocNo := GetDocumentNo(Document);
            IF PurchHeader."Document Type" = PurchHeader."Document Type"::Order THEN BEGIN
              IF PurchHeader."Vendor Invoice No." = ExtDocNo THEN
                EXIT(TRUE);
            END ELSE
              IF PurchHeader."Vendor Cr. Memo No." = ExtDocNo THEN
                EXIT(TRUE);
          UNTIL Document.NEXT = 0;
      END ELSE
        EXIT(Document.FINDFIRST);
    END;

    [External]
    PROCEDURE GetPurchaseDocument@1(PurchHeader@1160040000 : Record 38;VAR Document@1000 : Record 6085590) : Boolean;
    BEGIN
      EXIT(GetDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No."));
    END;

    [External]
    PROCEDURE ShowDocumentFromPurchDoc@1160040018(PurchHeader@1000000002 : Record 38);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      Document.FILTERGROUP := 2;
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");
      Document.RESET;
      Document.SETRANGE("No.",Document."No.");
      Document.FILTERGROUP := 0;
      PAGE.RUN(PAGE::"CDC Document Card",Document);
    END;

    PROCEDURE ShowDocumentFromPostedInv@1160040017(PurchInvHeader@1000000002 : Record 122);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.FILTERGROUP := 2;
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.");
      Document.FILTERGROUP := 0;
      PAGE.RUN(PAGE::"CDC Document Card",Document);
    END;

    PROCEDURE ShowDocumentFromPostedCrMemo@1160040016(PurchCrMemoHeader@1000000002 : Record 124);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      Document.FILTERGROUP := 2;
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.");
      Document.FILTERGROUP := 0;
      PAGE.RUN(PAGE::"CDC Document Card",Document);
    END;

    [External]
    PROCEDURE ShowEmailFromPurchDoc@1160040021(PurchHeader@1000000002 : Record 38);
    VAR
      Document@1000000000 : Record 6085590;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.");
      Document.OpenEMailFile;
    END;

    PROCEDURE ShowEmailFromPostedInv@1160040020(PurchInvHeader@1000000002 : Record 122);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.");
      Document.OpenEMailFile;
    END;

    PROCEDURE ShowEmailFromPostedCrMemo@1160040019(PurchCrMemoHeader@1000000002 : Record 124);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.");
      Document.OpenEMailFile;
    END;

    PROCEDURE ShowEmailFromApprovalEntry@1160040022(ApprovalEntry@1160040000 : Record 454);
    VAR
      Document@1000000000 : Record 6085590;
      PurchHeader@1000000001 : Record 38;
    BEGIN
      FindDocument(Document,DATABASE::"Purchase Header",ApprovalEntry."Document Type",ApprovalEntry."Document No.");
      Document.OpenEMailFile;
    END;

    [External]
    PROCEDURE GetNoOfDocsLabelForPurchDoc@6085593(PurchHeader@6085573 : Record 38) : Text[1024];
    VAR
      Document@6085575 : Record 6085590;
      FileType@6085574 : 'All,OCR,Miscellaneous';
    BEGIN
      FilterDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",FileType::All);
      IF NOT Document.ISEMPTY THEN
        EXIT(GetNoOfDocumentsLabel(Document.COUNT));
    END;

    [External]
    PROCEDURE GetNoOfDocsLabelForPostedInv@6085625(PurchInvHeader@6085573 : Record 122) : Text[1024];
    VAR
      PurchHeader@6085574 : Record 38;
      NoOfDocs@6085575 : Integer;
      FileType@6085576 : 'All,OCR,Miscellaneous';
      Document@6085577 : Record 6085590;
    BEGIN
      FilterDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.",
        FileType::All);
      IF NOT Document.ISEMPTY THEN
        NoOfDocs := Document.COUNT;

      Document.RESET;
      FilterDocument(Document,DATABASE::"Purch. Inv. Header",0,PurchInvHeader."No.",FileType::All);
      IF NOT Document.ISEMPTY THEN
        NoOfDocs += Document.COUNT;

      IF NoOfDocs <> 0 THEN
        EXIT(GetNoOfDocumentsLabel(NoOfDocs));
    END;

    PROCEDURE GetNoOfDocsLabelForPostCrMemo@6085627(PurchCrMemoHeader@6085573 : Record 124) : Text[1024];
    VAR
      PurchHeader@6085574 : Record 38;
      Document@6085575 : Record 6085590;
      NoOfDocs@6085576 : Integer;
      FileType@6085577 : 'All,OCR,Miscellaneous';
    BEGIN
      FilterDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.",FileType::All);
      IF NOT Document.ISEMPTY THEN
        NoOfDocs := Document.COUNT;

      Document.RESET;
      FilterDocument(Document,DATABASE::"Purch. Cr. Memo Hdr.",0,PurchCrMemoHeader."No.",FileType::All);
      IF NOT Document.ISEMPTY THEN
        NoOfDocs += Document.COUNT;

      IF NoOfDocs <> 0 THEN
        EXIT(GetNoOfDocumentsLabel(NoOfDocs));
    END;

    LOCAL PROCEDURE GetNoOfDocumentsLabel@6085602(NoOfDocuments@6085573 : Integer) : Text[1024];
    BEGIN
      IF NoOfDocuments = 0 THEN
        EXIT;

      IF NoOfDocuments = 1 THEN
        EXIT(OneAttachedFileMsg)
      ELSE
        EXIT(STRSUBSTNO(MultipleAttachedFilesMsg,NoOfDocuments));
    END;

    [External]
    PROCEDURE ShowDocumentListForPurchDoc@6085592(PurchHeader@6085573 : Record 38);
    VAR
      Document@6085574 : Record 6085590;
      FileType@6085576 : 'All,OCR,Miscellaneous';
      DocumentFileList@6085575 : Page 6085768;
    BEGIN
      Document.FILTERGROUP(4);
      FilterDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type",PurchHeader."No.",FileType::All);
      Document.FILTERGROUP(0);

      DocumentFileList.SETTABLEVIEW(Document);
      DocumentFileList.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowDocumentListForPostedInv@6085610(PurchInvHeader@6085573 : Record 122);
    VAR
      PurchHeader@6085574 : Record 38;
      Document@6085576 : Record 6085590;
      FileType@6085575 : 'All,OCR,Miscellaneous';
      DocumentFileList@6085578 : Page 6085768;
    BEGIN
      Document.FILTERGROUP(4);
      FilterDocument(Document,DATABASE::"Purch. Inv. Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."No.",FileType::All);
      Document.FILTERGROUP(0);

      DocumentFileList.SETTABLEVIEW(Document);
      DocumentFileList.RUNMODAL;
    END;

    PROCEDURE ShowDocumentListForPostCrMemo@6085632(PurchCrMemoHeader@6085573 : Record 124);
    VAR
      PurchHeader@6085574 : Record 38;
      Document@6085576 : Record 6085590;
      FileType@6085577 : 'All,OCR,Miscellaneous';
      DocumentFileList@6085575 : Page 6085768;
    BEGIN
      Document.FILTERGROUP(4);
      FilterDocument(Document,DATABASE::"Purch. Cr. Memo Hdr.",PurchHeader."Document Type"::"Credit Memo",PurchCrMemoHeader."No.",
        FileType::All);
      Document.FILTERGROUP(0);

      DocumentFileList.SETTABLEVIEW(Document);
      DocumentFileList.RUNMODAL;
    END;

    [External]
    PROCEDURE HasDocumentsPurchDoc@6085595(PurchaseHeader@6085573 : Record 38) : Boolean;
    VAR
      Document@6085574 : Record 6085590;
      FileType@6085575 : 'All,Document,Miscellaneous';
    BEGIN
      FilterDocument(Document,DATABASE::"Purchase Header",PurchaseHeader."Document Type",PurchaseHeader."No.",FileType::Document);
      EXIT(NOT Document.ISEMPTY);
    END;

    PROCEDURE HasDocumentsPostedInv@6085596(PurchInvHeader@6085573 : Record 122) : Boolean;
    VAR
      PurchHeader@6085574 : Record 38;
      Document@6085575 : Record 6085590;
      FileType@6085576 : 'All,Document,Miscellaneous';
    BEGIN
      FilterDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::Invoice,PurchInvHeader."Pre-Assigned No.",
        FileType::Document);
      EXIT(NOT Document.ISEMPTY);
    END;

    PROCEDURE HasDocumentsCrMemo@6085597(PurchCrMemoHeader@6085573 : Record 124) : Boolean;
    VAR
      Document@6085574 : Record 6085590;
      PurchHeader@6085575 : Record 38;
      FileType@6085576 : 'All,Document,Miscellaneous';
    BEGIN
      FilterDocument(Document,DATABASE::"Purchase Header",PurchHeader."Document Type"::"Credit Memo",
        PurchCrMemoHeader."Pre-Assigned No.",FileType::Document);
      EXIT(NOT Document.ISEMPTY);
    END;

    LOCAL PROCEDURE FilterDocument@6085594(VAR Document@6085576 : Record 6085590;TableNo@6085575 : Integer;DocumentType@6085574 : Option;DocumentNo@6085573 : Code[20];FileType@6085577 : 'All,Document,Miscellaneous');
    BEGIN
      Document.SETCURRENTKEY("Created Doc. Table No.","Created Doc. Subtype","Created Doc. No.","Created Doc. Ref. No.");
      Document.SETRANGE("Created Doc. Table No.",TableNo);
      Document.SETRANGE("Created Doc. Subtype",DocumentType);
      Document.SETRANGE("Created Doc. No.",DocumentNo);
      CASE FileType OF
        FileType::Document:
          Document.SETFILTER("File Type",'%1|%2',Document."File Type"::OCR,Document."File Type"::XML);
        FileType::Miscellaneous:
          Document.SETRANGE("File Type",Document."File Type"::Miscellaneous);
        FileType::All:
          Document.SETRANGE("File Type"); // Remove filter if set to display all records
      END;
    END;

    LOCAL PROCEDURE GetGLSetup@20();
    BEGIN
      IF NOT GLSetupRead THEN
        GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetDCSetup@1160040030();
    BEGIN
      IF NOT DCSetupRead THEN
        DCSetup.GET;
      DCSetupRead := TRUE;
    END;

    [External]
    PROCEDURE GetMatchStyle@6085576(MatchedQuantity@6085573 : Decimal;Value@6085574 : Decimal;MatchedValue@6085575 : Decimal) : Text[30];
    BEGIN
      CASE TRUE OF
        MatchedQuantity = 0: EXIT('None');
        Value = MatchedValue: EXIT('Strong');
        ELSE
          EXIT('Attention');
      END;
    END;

    PROCEDURE UpdateMatchedQuantity@6085581(VAR Document@6085582 : Record 6085590;PurchLine@6085590 : Record 39;Currency@6085589 : Record 4;MatchedToDocType@6085585 : 'Receipt,Return Shipment,Order,Return Order';MatchedToDocNo@6085587 : Code[20];MatchedToLineNo@6085586 : Integer;MatchedToQuantity@6085577 : Decimal;QtyAvailableOnMatchedToLine@6085588 : Decimal;VAR MatchedQuantity@6085576 : Decimal;AutoCalcQtyCostsDiscount@6085583 : Boolean);
    VAR
      PurchDocMatch@1000000001 : Record 6085700;
      DocumentLine@1000000006 : Record 6085596;
      Comment@1000000004 : Record 6085594;
      Field@1000000005 : Record 6085580;
      Location@6085580 : Record 14;
      ReservEntry@6085575 : Record 337;
      TempItemLedgEntry@6085591 : TEMPORARY Record 32;
      CreateNewMatch@1000000003 : Boolean;
      PrevMatchedQty@1000000007 : Decimal;
      TotalMatchedQty@6085573 : Decimal;
      PrevQty@6085574 : Decimal;
      DialogType@6085579 : 'None,ShipError,ReciveError,Shipwarning,ReceiveWarning';
      MatchTrackingMgt@6085578 : Codeunit 6085830;
      Handled@1000 : Boolean;
    BEGIN
      IF (MatchedToDocType IN [MatchedToDocType::Order,MatchedToDocType::"Return Order"]) THEN BEGIN
        IF (PurchLine.Type = PurchLine.Type::Item) AND (((MatchedQuantity <> 0) AND (NOT AutoCalcQtyCostsDiscount)) OR
          ((MatchedQuantity = 0) AND AutoCalcQtyCostsDiscount))
        THEN BEGIN
          GetWhseRequirementDialogType(PurchLine,DialogType);
          CASE DialogType OF
            DialogType::ReciveError:
              ERROR(WarehouseReceiveErr,PurchLine.FIELDCAPTION("Document Type"),PurchLine."Document Type",
                PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
                PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
            DialogType::ReceiveWarning:
              MESSAGE(WarehouseReceiveErr+'\'+WarehouseOperationsMsg,PurchLine.FIELDCAPTION("Document Type"),PurchLine."Document Type",
                PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
                PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
            DialogType::ShipError:
              ERROR(WarehouseShipErr,PurchLine.FIELDCAPTION("Document Type"),PurchLine."Document Type",
                PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
                PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
            DialogType::Shipwarning:
              MESSAGE(WarehouseShipErr+'\'+WarehouseOperationsMsg,PurchLine.FIELDCAPTION("Document Type"),PurchLine."Document Type",
                PurchLine.FIELDCAPTION("Document No."),PurchLine."Document No.",
                PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
          END;
        END;
      END;

      IF NOT AutoCalcQtyCostsDiscount THEN BEGIN
        IF (MatchedQuantity < 0) AND (MatchedToQuantity > 0) THEN
          ERROR(MustBePositiveErr,MatchedQuantityCap,PurchLine.FIELDCAPTION(Quantity));

        IF (MatchedQuantity > 0) AND (MatchedToQuantity < 0) THEN
          ERROR(MustBeNegativeErr,MatchedQuantityCap,PurchLine.FIELDCAPTION(Quantity));
      END;

      // TotalMatchedQty = the total quantity already matched to the purchase order / return order / receipt or return shipment line
      TotalMatchedQty :=  CalculateMatchedQty(Document."No.",MatchedToDocType,MatchedToDocNo,MatchedToLineNo,FALSE);

      // PrevMatchedQty = the total quantity already matched to the purchase order / return order / receipt or return shipment line
      //                  from the current DC document
      PrevMatchedQty := CalculateMatchedQty(Document."No.",MatchedToDocType,MatchedToDocNo,MatchedToLineNo,TRUE);

      IF AutoCalcQtyCostsDiscount THEN BEGIN
        IF MatchedQuantity <> 0 THEN
          // set to zero when line has a quantity,
          MatchedQuantity := 0
        ELSE BEGIN
          // calculate quantity when line has zero in quantity
          MatchedQuantity := QtyAvailableOnMatchedToLine - (TotalMatchedQty - PrevMatchedQty);
          IF MatchedQuantity = 0 THEN
            ERROR(NothingToMatchErr);
        END;
      END;

      IF (PurchLine.Type = PurchLine.Type::Item) AND (MatchedQuantity <> 0) THEN BEGIN
        CASE MatchedToDocType OF
          MatchedToDocType::Receipt:
            BEGIN
              IF NOT MatchTrackingMgt.MatchLOTSN THEN
                IF MatchedQuantity <> QtyAvailableOnMatchedToLine THEN BEGIN
                  RetrieveILEFromShptRcpt(TempItemLedgEntry,DATABASE::"Purch. Rcpt. Line",0,MatchedToDocNo,'',0,MatchedToLineNo);
                  IF TempItemLedgEntry.COUNT > 1 THEN
                    ERROR(PartialMatchToReceiptWithTrack,Document."No.",MatchedToDocNo,MatchedToLineNo);
                END;
            END;

          MatchedToDocType::"Return Shipment":
            BEGIN
              IF NOT MatchTrackingMgt.MatchLOTSN THEN
                IF MatchedQuantity <> QtyAvailableOnMatchedToLine THEN BEGIN
                  RetrieveILEFromShptRcpt(TempItemLedgEntry,DATABASE::"Return Shipment Line",0,MatchedToDocNo,'',0,MatchedToLineNo);
                  IF TempItemLedgEntry.COUNT > 1 THEN
                    ERROR(PartialMatchToReturnsWithTrack,Document."No.",MatchedToDocNo,MatchedToLineNo);
                END;
            END;

          MatchedToDocType::Order,MatchedToDocType::"Return Order": CheckMatchToWithTracking(PurchLine,MatchedToDocType,TRUE);
        END;
      END;

      IF ABS(MatchedQuantity) > ABS(QtyAvailableOnMatchedToLine - (TotalMatchedQty - PrevMatchedQty)) THEN
        ERROR(LeftToMatchErr,MatchedQuantity,QtyAvailableOnMatchedToLine - (TotalMatchedQty - PrevMatchedQty));

      IF MatchedQuantity = 0 THEN BEGIN
        PurchDocMatch.SETRANGE("Document No.",Document."No.");
        PurchDocMatch.SETRANGE("Purch. Doc. Type",MatchedToDocType);
        PurchDocMatch.SETRANGE("Purch. Doc. No.",MatchedToDocNo);
        PurchDocMatch.SETRANGE("Purch. Line No.",MatchedToLineNo);
        PurchDocMatch.DELETEALL(TRUE);
      END ELSE BEGIN
        PurchDocMatch.SETRANGE("Document No.",Document."No.");
        PurchDocMatch.SETRANGE("Purch. Doc. Type",MatchedToDocType);
        PurchDocMatch.SETRANGE("Purch. Doc. No.",MatchedToDocNo);
        PurchDocMatch.SETRANGE("Purch. Line No.",MatchedToLineNo);
        IF PurchDocMatch.FINDFIRST THEN BEGIN
          IF PurchDocMatch.COUNT = 1 THEN BEGIN
            PurchDocMatch.Quantity := MatchedQuantity;
            PurchDocMatch.MODIFY;
            MatchTrackingMgt.UpdateMatchedQtyFromMatch(PurchDocMatch);
          END ELSE BEGIN
            PurchDocMatch.DELETEALL(TRUE);

            OnBeforeInsertPurchDocMatch(PurchDocMatch,Document."No.",0,MatchedToDocType,MatchedToDocNo,MatchedToLineNo,
              MatchedQuantity,PurchLine."Direct Unit Cost",PurchLine."Line Discount %",TRUE,Handled);

            IF NOT Handled THEN
              InsertPurchDocMatch(PurchDocMatch,Document."No.",0,MatchedToDocType,MatchedToDocNo,MatchedToLineNo,
                MatchedQuantity,PurchLine."Direct Unit Cost",PurchLine."Line Discount %",TRUE);
          END;
        END ELSE BEGIN
          OnBeforeInsertPurchDocMatch(PurchDocMatch,Document."No.",0,MatchedToDocType,MatchedToDocNo,MatchedToLineNo,
            MatchedQuantity,PurchLine."Direct Unit Cost",PurchLine."Line Discount %",TRUE,Handled);

          IF NOT Handled THEN
            InsertPurchDocMatch(PurchDocMatch,Document."No.",0,MatchedToDocType,MatchedToDocNo,MatchedToLineNo,
              MatchedQuantity,PurchLine."Direct Unit Cost",PurchLine."Line Discount %",TRUE);
        END;
      END;

      Document.FIND('=');

      PurchDocMatch.RESET;
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      IF PurchDocMatch.ISEMPTY THEN BEGIN
        // To get comment created with error: One or more lines are unmatched.
        Document."Match Status" := Document."Match Status"::"Automatically Matched";
        Document.MODIFY;
        Document.DeleteComments(Comment.Area::Match);
      END ELSE
        IF Document."Match Status" <> Document."Match Status"::"Manually Matched" THEN BEGIN
          Document."Match Status" := Document."Match Status"::"Manually Matched";
          Document.MODIFY;
          Document.DeleteComments(Comment.Area::Match);
          Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,ManualMatchTxt);
        END;
    END;

    [External]
    PROCEDURE UpdateMatchedDirectUnitCost@6085580(Document@6085579 : Record 6085590;CurrencyCode@6085587 : Code[10];PurchDocType@6085583 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085582 : Code[20];PurchLineNo@6085574 : Integer;DirectUnitCost@6085578 : Decimal;VAR MatchedUnitCost@6085577 : Decimal;AutoCalcDirectUnitCost@6085573 : Boolean);
    VAR
      Field@6085585 : Record 6085580;
      PurchDocMatch@6085575 : Record 6085700;
      PurchRcptLine@6085576 : Record 121;
      ReturnShipmentLine@6085580 : Record 6651;
      Comment@6085586 : Record 6085594;
      DCAppMgt@6085581 : Codeunit 6085722;
      UnitCost@6085584 : Decimal;
    BEGIN
      IF MatchedUnitCost < 0 THEN
        CASE PurchDocType OF
          PurchDocType::Receipt,PurchDocType::Order:
            ERROR(NegativeErr,DirectUnitCostInvCap);
          PurchDocType::"Return Shipment",PurchDocType::"Return Order":
            ERROR(NegativeErr,DirectUnitCostCMCap);
        END;

      IF AutoCalcDirectUnitCost THEN
        MatchedUnitCost := DirectUnitCost;

      CASE PurchDocMatchAginstDocExist(PurchDocMatch,Document."No.",PurchDocType,PurchDocNo,PurchLineNo) OF
        PurchDocMatchAginst::"No Match":
          ERROR(NoMatchErr,MatchedQuantityCap);

        PurchDocMatchAginst::Document:
          BEGIN
            PurchDocMatch."Direct Unit Cost" := MatchedUnitCost;
            PurchDocMatch.MODIFY;
          END;

        PurchDocMatchAginst::"Document line":
          BEGIN
            Field.GET(Document."Template No.",Field.Type::Line,'UNITCOST');
            UnitCost := GetLineUnitCost(Document,PurchDocMatch."Document Line No.");

            IF UnitCost <> MatchedUnitCost THEN BEGIN
              CASE PurchDocType OF
                PurchDocType::Receipt:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,PurchRcptLine.TABLECAPTION,Field."Field Name",DCAppMgt.FormatUnitAmount(
                    UnitCost,CurrencyCode),DirectUnitCostInvCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
                PurchDocType::"Return Shipment":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnShipmentLine.TABLECAPTION,Field."Field Name",DCAppMgt.FormatUnitAmount(
                    UnitCost,CurrencyCode),DirectUnitCostCMCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
                PurchDocType::Order:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,OrderLineCap,Field."Field Name",DCAppMgt.FormatUnitAmount(UnitCost,
                    CurrencyCode),DirectUnitCostInvCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
                PurchDocType::"Return Order":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnOrderLineCap,Field."Field Name",DCAppMgt.FormatUnitAmount(UnitCost,
                    CurrencyCode),DirectUnitCostCMCap,DCAppMgt.FormatUnitAmount(MatchedUnitCost,CurrencyCode))
                  THEN
                    ERROR('');
              END;

              PurchDocMatch.DELETE(TRUE);

              PurchDocMatch."Document Line No." := 0;
              PurchDocMatch."Direct Unit Cost" := MatchedUnitCost;
              PurchDocMatch.INSERT;
            END;
          END;

        PurchDocMatchAginst::"Multiple lines":
          BEGIN
            CASE PurchDocType OF
              PurchDocType::Receipt:
                ERROR(MultipleLinesMatchErr,DirectUnitCostInvCap,PurchRcptLine.TABLECAPTION);
              PurchDocType::"Return Shipment":
                ERROR(MultipleLinesMatchErr,DirectUnitCostCMCap,ReturnShipmentLine.TABLECAPTION);
              PurchDocType::Order:
                ERROR(MultipleLinesMatchErr,DirectUnitCostInvCap,OrderLineCap);
              PurchDocType::"Return Order":
                ERROR(MultipleLinesMatchErr,DirectUnitCostCMCap,ReturnOrderLineCap);
            END;
        END;
      END;

      Document.FIND('=');
      IF Document."Match Status" <> Document."Match Status"::"Manually Matched" THEN BEGIN
        Document."Match Status" := Document."Match Status"::"Manually Matched";
        Document.MODIFY;
        Document.DeleteComments(Comment.Area::Match);
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,ManualMatchTxt);
      END;
    END;

    [External]
    PROCEDURE UpdateMatchedLineDiscPct@6085579(Document@6085587 : Record 6085590;PurchDocType@6085585 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085584 : Code[20];PurchLineNo@6085583 : Integer;LineDiscountPct@6085582 : Decimal;VAR MatchedLineDiscPct@6085579 : Decimal;AutoCalcLineDiscPct@6085575 : Boolean);
    VAR
      Field@6085578 : Record 6085580;
      PurchDocMatch@6085577 : Record 6085700;
      PurchRcptLine@6085574 : Record 121;
      ReturnShipmentLine@6085573 : Record 6651;
      Comment@6085576 : Record 6085594;
      LineDiscPct@6085580 : Decimal;
    BEGIN
      IF MatchedLineDiscPct < 0 THEN
        CASE PurchDocType OF
          PurchDocType::Receipt,PurchDocType::Order:
            ERROR(NegativeErr,LineDiscountPctInvCap);
          PurchDocType::"Return Shipment",PurchDocType::"Return Order":
            ERROR(NegativeErr,LineDiscountPctCMCap);
        END;

      IF AutoCalcLineDiscPct THEN
        MatchedLineDiscPct := LineDiscountPct;

      CASE PurchDocMatchAginstDocExist(PurchDocMatch,Document."No.",PurchDocType,PurchDocNo,PurchLineNo) OF
        PurchDocMatchAginst::"No Match":
          ERROR(NoMatchErr,MatchedQuantityCap);

        PurchDocMatchAginst::Document:
          BEGIN
            PurchDocMatch."Line Discount %" := MatchedLineDiscPct;
            PurchDocMatch.MODIFY;
          END;

        PurchDocMatchAginst::"Document line":
          BEGIN
            Field.GET(Document."Template No.",Field.Type::Line,'DISCPCT');
            LineDiscPct := GetLineDiscPct(Document,PurchDocMatch."Document Line No.");

            IF LineDiscPct <> MatchedLineDiscPct THEN BEGIN
              CASE PurchDocType OF
                PurchDocType::Receipt:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,PurchRcptLine.TABLECAPTION,Field."Field Name",LineDiscPct,
                    LineDiscountPctInvCap,MatchedLineDiscPct)
                  THEN
                    ERROR('');
                PurchDocType::"Return Shipment":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnShipmentLine.TABLECAPTION,Field."Field Name",LineDiscPct,
                    LineDiscountPctCMCap,MatchedLineDiscPct)
                  THEN
                    ERROR('');
                PurchDocType::Order:
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,OrderLineCap,Field."Field Name",LineDiscPct,LineDiscountPctInvCap,
                    MatchedLineDiscPct)
                  THEN
                    ERROR('');
                PurchDocType::"Return Order":
                  IF NOT CONFIRM(DocumentLineMatchQst,TRUE,ReturnOrderLineCap,Field."Field Name",LineDiscPct,LineDiscountPctCMCap,
                    MatchedLineDiscPct)
                  THEN
                    ERROR('');
              END;

              PurchDocMatch.DELETE(TRUE);

              PurchDocMatch."Document Line No." := 0;
              PurchDocMatch."Line Discount %" := MatchedLineDiscPct;
              PurchDocMatch.INSERT;
            END;
          END;

        PurchDocMatchAginst::"Multiple lines":
          BEGIN
            CASE PurchDocType OF
              PurchDocType::Receipt:
                ERROR(MultipleLinesMatchErr,LineDiscountPctInvCap,PurchRcptLine.TABLECAPTION);
              PurchDocType::"Return Shipment":
                ERROR(MultipleLinesMatchErr,LineDiscountPctCMCap,ReturnShipmentLine.TABLECAPTION);
              PurchDocType::Order:
                ERROR(MultipleLinesMatchErr,LineDiscountPctInvCap,OrderLineCap);
              PurchDocType::"Return Order":
                ERROR(MultipleLinesMatchErr,LineDiscountPctCMCap,ReturnOrderLineCap);
            END;
        END;
      END;

      Document.FIND('=');
      IF Document."Match Status" <> Document."Match Status"::"Manually Matched" THEN BEGIN
        Document."Match Status" := Document."Match Status"::"Manually Matched";
        Document.MODIFY;
        Document.DeleteComments(Comment.Area::Match);
        Comment.Add(Document,Field,0,Comment.Area::Match,Comment."Comment Type"::Information,ManualMatchTxt);
      END;
    END;

    [External]
    PROCEDURE CalcMatchedValues@6085578(Currency@6085585 : Record 4;DocumentNo@6085582 : Code[20];PurchDocType@6085588 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085583 : Code[20];PurchLineNo@6085584 : Integer;DirectUnitCost@6085590 : Decimal;LineDiscountPct@6085591 : Decimal;VAR MatchedQuantity@6085589 : Decimal;VAR MatchedUnitCost@6085580 : Decimal;VAR MatchedLineDiscPct@6085581 : Decimal;VAR MatchedLineAmount@6085579 : Decimal;VAR MatchedDifference@6085573 : Decimal) : Decimal;
    VAR
      Document@6085586 : Record 6085590;
      PurchDocMatch@1000000000 : Record 6085700;
      PurchLine2@6085578 : Record 39;
      PurchDocMgnt@6085587 : Codeunit 6085709;
      MatchedDiscAmount@6085577 : Decimal;
      LineDiscountAmount@6085592 : Decimal;
      NoOfPurchDocMatch@6085574 : Integer;
    BEGIN
      MatchedQuantity := 0;
      MatchedUnitCost := 0;
      MatchedLineDiscPct := 0;
      MatchedLineAmount := 0;
      MatchedDifference := 0;

      PurchDocMatch.SETRANGE("Document No.",DocumentNo);
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineNo);

      IF PurchDocMatch.FINDSET THEN
        REPEAT
          NoOfPurchDocMatch := NoOfPurchDocMatch + 1;
          MatchedQuantity := MatchedQuantity + PurchDocMatch.Quantity;

          LineDiscountAmount :=
            ROUND(
              ROUND(PurchDocMatch.Quantity * PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") *
              PurchDocMatch."Line Discount %" / 100,Currency."Amount Rounding Precision");
          MatchedDiscAmount := MatchedDiscAmount + LineDiscountAmount;

          MatchedLineAmount := MatchedLineAmount +
            ROUND(PurchDocMatch.Quantity * PurchDocMatch."Direct Unit Cost",Currency."Amount Rounding Precision") - LineDiscountAmount;
        UNTIL PurchDocMatch.NEXT = 0;

      IF NoOfPurchDocMatch = 1 THEN BEGIN
        MatchedUnitCost := PurchDocMatch."Direct Unit Cost";
        MatchedLineDiscPct := PurchDocMatch."Line Discount %";
      END ELSE BEGIN
        IF MatchedQuantity <> 0 THEN
          MatchedUnitCost := ROUND((MatchedLineAmount + MatchedDiscAmount) / MatchedQuantity,Currency."Unit-Amount Rounding Precision");

        IF (MatchedLineAmount + MatchedDiscAmount) <> 0 THEN
          MatchedLineDiscPct := ROUND(MatchedDiscAmount / (MatchedLineAmount + MatchedDiscAmount) * 100,0.00001);
      END;

      MatchedDifference := CalcMatchDifference(Currency,MatchedLineAmount,MatchedQuantity,DirectUnitCost,LineDiscountPct);
    END;

    PROCEDURE CalcMatchedValuesOnDoc@6(DocumentNo@1000 : Code[20];VAR DocMatchedLineAmount@1002 : Decimal;VAR DocMatchedDifference@1001 : Decimal;VAR DocPurchDocLineAmt@6085573 : Decimal);
    VAR
      PurchDocMatch@1006 : Record 6085700;
      CurrDocMatchedQuantity@1011 : Decimal;
      CurrDocMatchedUnitCost@1010 : Decimal;
      CurrDocMatchedLineDiscPct@1009 : Decimal;
      CurrDocMatchedLineAmount@1008 : Decimal;
      CurrDocMatchedDifference@1007 : Decimal;
      SourcePurchLine@1003 : Record 39;
      PurchHeader@6085574 : Record 38;
      Currency@6085575 : Record 4;
    BEGIN
      CLEAR(PurchHeader);
      PurchDocMatch.SETRANGE("Document No.",DocumentNo);
      IF PurchDocMatch.FINDSET THEN
        REPEAT
          GetSourcePurchaseLine(PurchDocMatch,SourcePurchLine);

          IF PurchHeader."No." <> SourcePurchLine."Document No." THEN BEGIN
            IF NOT PurchHeader.GET(SourcePurchLine."Document Type",SourcePurchLine."Document No.") THEN
              CLEAR(PurchHeader);

            IF PurchHeader."Currency Code" <> '' THEN
              Currency.GET(PurchHeader."Currency Code");
            Currency.InitRoundingPrecision;
          END;

          CalcMatchedValues(Currency,DocumentNo,PurchDocMatch."Purch. Doc. Type",PurchDocMatch."Purch. Doc. No.",PurchDocMatch.
            "Purch. Line No.",SourcePurchLine."Direct Unit Cost",SourcePurchLine."Line Discount %",CurrDocMatchedQuantity,
            CurrDocMatchedUnitCost,CurrDocMatchedLineDiscPct,CurrDocMatchedLineAmount,CurrDocMatchedDifference);

          DocMatchedDifference += CurrDocMatchedDifference;
          DocMatchedLineAmount += CurrDocMatchedLineAmount;
          DocPurchDocLineAmt += CurrDocMatchedQuantity * SourcePurchLine."Direct Unit Cost";
        UNTIL PurchDocMatch.NEXT = 0
    END;

    [External]
    PROCEDURE ShowMatchedSpec@6085574(PurchDocType@6085577 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085576 : Code[20];PurchLineNo@6085575 : Integer);
    VAR
      MatchSpec@161024012 : TEMPORARY Record 6085761;
      PurchDocMatch@1160040001 : Record 6085700;
      PurchLine@1160040000 : Record 39;
      PurchLineRel@6085573 : Record 6085702;
      Document2@6085574 : Record 6085590;
    BEGIN
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineNo);
      IF PurchDocMatch.FINDSET THEN
        REPEAT
          MatchSpec.INIT;
          MatchSpec.Type := MatchSpec.Type::Document;
          MatchSpec."Document No." := PurchDocMatch."Document No.";
          MatchSpec."Line No." := PurchDocMatch."Document Line No.";

          IF MatchSpec."Line No." <> 0 THEN BEGIN
            Document2.GET(PurchDocMatch."Document No.");
            MatchSpec."No." := GetLineAccountNo(Document2,PurchDocMatch."Document Line No.");
            MatchSpec.Description := GetLineDescription(Document2,PurchDocMatch."Document Line No.");
            MatchSpec.Quantity := GetLineQuantity(Document2,PurchDocMatch."Document Line No.");
            MatchSpec."Direct Unit Cost" := GetLineUnitCost(Document2,PurchDocMatch."Document Line No.");
            MatchSpec."Line Discount %" := GetLineDiscPct(Document2,PurchDocMatch."Document Line No.");
            MatchSpec."Line Discount Amount" := GetLineDiscAmount(Document2,PurchDocMatch."Document Line No.");
          END;

          MatchSpec."Matched Quantity" := PurchDocMatch.Quantity;
          MatchSpec."Matched Direct Unit Cost" := PurchDocMatch."Direct Unit Cost";
          MatchSpec."Matched Line Discount %" := PurchDocMatch."Line Discount %";

          OnBeforeInsertMatchSpecByPurchDocMatchShowMatchedSpec(PurchDocType,PurchDocNo,PurchLineNo,PurchDocMatch,MatchSpec);

          MatchSpec.INSERT;
        UNTIL PurchDocMatch.NEXT = 0;

      IF (PurchDocType IN [PurchDocType::Order,PurchDocType::"Return Order"]) THEN BEGIN
        PurchLineRel.SETCURRENTKEY("Related Document Type","Related Document No.","Related Line No.");

        IF PurchDocType = PurchDocType::Order THEN
          PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::Order)
        ELSE
          PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::"Return Order");

        PurchLineRel.SETRANGE("Related Document No.",PurchDocNo);
        PurchLineRel.SETRANGE("Related Line No.",PurchLineNo);
        IF PurchLineRel.FINDSET THEN
          REPEAT
            MatchSpec.INIT;
            IF PurchLineRel."Document Type" = PurchLineRel."Document Type"::Invoice THEN
              MatchSpec.Type := MatchSpec.Type::"Purchase Invoice"
            ELSE
              MatchSpec.Type := MatchSpec.Type::"Purchase Credit Memo";

            MatchSpec."Document No." := PurchLineRel."Document No.";
            MatchSpec."Line No." := PurchLineRel."Document Line No.";

            PurchLine.GET(PurchLineRel."Document Type",PurchLineRel."Document No.",PurchLineRel."Document Line No.");
            IF MatchSpec."Line No." <> 0 THEN BEGIN
              MatchSpec."No." := PurchLine."No.";
              MatchSpec.Description := PurchLine.Description;
              MatchSpec.Quantity := PurchLine.Quantity;
              MatchSpec."Direct Unit Cost" := PurchLine."Direct Unit Cost";
              MatchSpec."Line Discount %" := PurchLine."Line Discount %";
              MatchSpec."Line Discount Amount" := PurchLine."Line Discount Amount";
            END;

            MatchSpec."Matched Quantity" := PurchLine.Quantity;
            MatchSpec."Matched Direct Unit Cost" := PurchLine."Direct Unit Cost";
            MatchSpec."Matched Line Discount %" := PurchLine."Line Discount %";
            MatchSpec.INSERT;
          UNTIL PurchLineRel.NEXT = 0;
      END ELSE BEGIN
        CASE PurchDocType OF
          PurchDocType::Receipt:
            BEGIN
              PurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
              PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Invoice);
              PurchLine.SETRANGE("Receipt No.",PurchDocNo);
              PurchLine.SETRANGE("Receipt Line No.",PurchLineNo);
            END;
          PurchDocType::"Return Shipment":
            BEGIN
              PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Credit Memo");
              PurchLine.SETRANGE("Return Shipment No.",PurchDocNo);
              PurchLine.SETRANGE("Return Shipment Line No.",PurchLineNo);
            END;
        END;

        IF PurchLine.FINDSET THEN
          REPEAT
            MatchSpec.INIT;

            IF PurchLine."Document Type" = PurchLine."Document Type"::Invoice THEN
              MatchSpec.Type := MatchSpec.Type::"Purchase Invoice"
            ELSE
              MatchSpec.Type := MatchSpec.Type::"Purchase Credit Memo";

            MatchSpec."Document No." := PurchLine."Document No.";
            MatchSpec."Line No." := PurchLine."Line No.";
            MatchSpec."No." := PurchLine."No.";
            MatchSpec.Description := PurchLine.Description;
            MatchSpec.Quantity := PurchLine.Quantity;
            MatchSpec."Direct Unit Cost" := PurchLine."Direct Unit Cost";
            MatchSpec."Line Discount %" := PurchLine."Line Discount %";
            MatchSpec."Line Discount Amount" := PurchLine."Line Discount Amount";
            MatchSpec."Matched Quantity" := PurchLine.Quantity;
            MatchSpec."Matched Direct Unit Cost" := PurchLine."Direct Unit Cost";
            MatchSpec."Matched Line Discount %" := PurchLine."Line Discount %";
            MatchSpec.INSERT;
          UNTIL PurchLine.NEXT = 0;
      END;

      PAGE.RUN(0,MatchSpec);
    END;

    PROCEDURE CalculateMatchedQty@6085575(DCDocumentNo@6085576 : Code[20];MatchedToDocType@6085575 : 'Receipt,Return Shipment,Order,Return Order';MatchedToDocNo@6085574 : Code[20];MatchedToLineNo@6085573 : Integer;ForDCDocOnly@1000000001 : Boolean) : Decimal;
    VAR
      PurchDocMatch@1000000000 : Record 6085700;
      PurchLine@1160040000 : Record 39;
      PurchLineRel@6085577 : Record 6085702;
      Qty@1160040001 : Decimal;
    BEGIN
      IF ForDCDocOnly THEN
        PurchDocMatch.SETRANGE("Document No.",DCDocumentNo)
      ELSE
        PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");

      PurchDocMatch.SETRANGE("Purch. Doc. Type",MatchedToDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",MatchedToDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",MatchedToLineNo);
      PurchDocMatch.CALCSUMS(Quantity);
      Qty := PurchDocMatch.Quantity;

      IF NOT ForDCDocOnly THEN
        IF (MatchedToDocType IN [MatchedToDocType::Order,MatchedToDocType::"Return Order"]) THEN BEGIN
          PurchLineRel.SETCURRENTKEY("Related Document Type","Related Document No.","Related Line No.");

          IF MatchedToDocType = MatchedToDocType::Order THEN
            PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::Order)
          ELSE
            PurchLineRel.SETRANGE("Related Document Type",PurchLineRel."Related Document Type"::"Return Order");

          PurchLineRel.SETRANGE("Related Document No.",MatchedToDocNo);
          PurchLineRel.SETRANGE("Related Line No.",MatchedToLineNo);
          IF PurchLineRel.FINDSET THEN
            REPEAT
              Qty := Qty + PurchLineRel.GetQuantity;
            UNTIL PurchLineRel.NEXT = 0;
        END ELSE BEGIN
          IF MatchedToDocType = MatchedToDocType::Receipt THEN BEGIN
            PurchLine.SETCURRENTKEY("Document Type","Receipt No.","Receipt Line No.");
            PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Invoice);
            PurchLine.SETRANGE("Receipt No.",MatchedToDocNo);
            PurchLine.SETRANGE("Receipt Line No.",MatchedToLineNo);
            PurchLine.CALCSUMS(Quantity);
            Qty := Qty + PurchLine.Quantity;
          END ELSE BEGIN
            PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::"Credit Memo");
            PurchLine.SETRANGE("Return Shipment No.",MatchedToDocNo);
            PurchLine.SETRANGE("Return Shipment Line No.",MatchedToLineNo);
            // Looping as key is needed in 6.00
            IF PurchLine.FINDSET THEN
              REPEAT
                Qty := Qty + PurchLine.Quantity;
              UNTIL PurchLine.NEXT = 0;
          END;
        END;

      EXIT(Qty);
    END;

    PROCEDURE CalcMatchDifference@6085577(Currency@6085577 : Record 4;MatchedLineAmount@6085575 : Decimal;MatchedQuantity@6085574 : Decimal;DirectUnitCost@6085578 : Decimal;LineDiscountPct@6085579 : Decimal) : Decimal;
    VAR
      LineAmount@6085573 : Decimal;
      DiscAmount@6085576 : Decimal;
    BEGIN
      IF MatchedQuantity = 0 THEN
        EXIT(0);

      DiscAmount :=
        ROUND(
          ROUND(MatchedQuantity * DirectUnitCost,Currency."Amount Rounding Precision") *
          LineDiscountPct / 100,
          Currency."Amount Rounding Precision");
      LineAmount :=
        ROUND(MatchedQuantity * DirectUnitCost,Currency."Amount Rounding Precision") - DiscAmount;

      EXIT(LineAmount - MatchedLineAmount);
    END;

    PROCEDURE PurchDocMatchAginstDocExist@6085582(VAR PurchDocMatch@6085573 : Record 6085700;DocumentNo@6085577 : Code[20];PurchDocType@6085576 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@6085575 : Code[20];PurchLineNo@6085574 : Integer) : Integer;
    BEGIN
      PurchDocMatch.RESET;
      PurchDocMatch.SETRANGE("Document No.",DocumentNo);
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocType);
      PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchDocNo);
      PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineNo);
      IF PurchDocMatch.FINDFIRST THEN
        IF PurchDocMatch.COUNT = 1 THEN BEGIN
          IF PurchDocMatch."Document Line No." = 0 THEN
            EXIT(PurchDocMatchAginst::Document)
          ELSE
            EXIT(PurchDocMatchAginst::"Document line");
        END ELSE
          EXIT(PurchDocMatchAginst::"Multiple lines");

      EXIT(PurchDocMatchAginst::"No Match");
    END;

    PROCEDURE DeletingPurchDocFromC90@6085583(PurchHeader@6085573 : Record 38;VAR LastPostingNo@6085579 : Code[20]) : Boolean;
    VAR
      PurchInvHeader@6085578 : Record 122;
      PurchInvLine@6085577 : Record 123;
      PurchCrMemoHeader@6085576 : Record 124;
      PurchCrMemoLine@6085575 : Record 125;
      _DeletingPurchDocFromC90@6085574 : Boolean;
    BEGIN
      IF PurchHeader."Last Posting No." <> '' THEN BEGIN
        LastPostingNo := PurchHeader."Last Posting No.";
        EXIT(TRUE);
      END ELSE BEGIN
        IF PurchHeader."No. Series" = PurchHeader."Posting No. Series" THEN BEGIN
          CASE PurchHeader."Document Type" OF
            PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice:
              BEGIN
                IF PurchInvHeader.GET(PurchHeader."No.") THEN BEGIN
                  _DeletingPurchDocFromC90 := TRUE;
                  LastPostingNo := PurchHeader."No.";

                  PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
                  IF PurchInvLine.COUNT = 1 THEN BEGIN
                    PurchInvLine.FINDFIRST;
                    // Found Posted Invoice created during delete of un-posted invoice and not from posting from C90
                    IF PurchInvLine.Type = PurchInvLine.Type::" " THEN BEGIN
                      _DeletingPurchDocFromC90 := FALSE;
                      LastPostingNo := '';
                    END;
                  END;
                END
              END;
            PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo":
              BEGIN
                IF PurchCrMemoHeader.GET(PurchHeader."No.") THEN
                  _DeletingPurchDocFromC90 := TRUE;
                  LastPostingNo := PurchHeader."No.";

                  PurchCrMemoLine.SETRANGE("Document No.",PurchCrMemoHeader."No.");
                  IF PurchCrMemoLine.COUNT = 1 THEN BEGIN
                    PurchCrMemoLine.FINDFIRST;
                    // Found Posted Credit Memo created during delete of un-posted Credit Memo and not from posting from C90
                    IF PurchCrMemoLine.Type = PurchCrMemoLine.Type::" " THEN BEGIN
                      _DeletingPurchDocFromC90 := FALSE;
                      LastPostingNo := '';
                    END;
                  END;
              END;
          END;

          EXIT(_DeletingPurchDocFromC90);
        END ELSE
          EXIT(FALSE);
      END;
    END;

    PROCEDURE CheckMatchedToQtyOnValidateQty@6085584(PurchaseLine@6085573 : Record 39);
    VAR
      PurchLineRel@6085581 : Record 6085702;
      RelatedPurchLine@6085580 : Record 39;
      RelatedPurchLine2@6085579 : Record 39;
      PurchDocMatch@6085578 : Record 6085700;
      MatchedQuantity@6085577 : Decimal;
      AvailableQty@6085576 : Decimal;
      QuantityUsed@6085575 : Decimal;
      PurchDocMatched@6085574 : Boolean;
    BEGIN
      CheckMatchedToQty(PurchaseLine,1); // 1 = OnValidateQty
    END;

    PROCEDURE CheckMatchedToQtyOnDelete@6085586(PurchaseLine@6085573 : Record 39);
    BEGIN
      CheckMatchedToQty(PurchaseLine,0); // 0 = OnDelete
    END;

    LOCAL PROCEDURE CheckMatchedToQty@1160040031(PurchaseLine@6085573 : Record 39;OnTrigger@1160040000 : 'OnDelete,OnValidateQty');
    VAR
      PurchLineRel@6085581 : Record 6085702;
      PurchLineRel2@1160040002 : Record 6085702;
      MatchedToPurchOrderLine@6085580 : Record 39;
      RelatedPurchLine@6085579 : Record 39;
      PurchDocMatch@6085578 : Record 6085700;
      OtherMatchedQuantity@6085577 : Decimal;
      MatchedQuantity@1160040003 : Decimal;
      AvailableQty@6085576 : Decimal;
      OutstandingQuantity@1160040001 : Decimal;
      QuantityUsed@6085575 : Decimal;
      PurchDocMatched@6085574 : Boolean;
      PurchaseLineQuantity@6085582 : Decimal;
    BEGIN
      IF PurchaseLine."Document Type" IN [PurchaseLine."Document Type"::Invoice,PurchaseLine."Document Type"::"Credit Memo"] THEN BEGIN
        IF OnTrigger = OnTrigger::OnValidateQty THEN BEGIN
        // Get Purchase Line Relationship to find order / return order line and then loop through all related matches
          IF PurchLineRel.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.") THEN BEGIN
            MatchedToPurchOrderLine.GET(PurchLineRel."Related Document Type",PurchLineRel."Related Document No.",
              PurchLineRel."Related Line No.");

            PurchLineRel2.SETRANGE("Related Document Type",PurchLineRel."Related Document Type");
            PurchLineRel2.SETRANGE("Related Document No.",PurchLineRel."Related Document No.");
            PurchLineRel2.SETRANGE("Related Line No.",PurchLineRel."Related Line No.");
            IF PurchLineRel2.FINDSET THEN
              REPEAT
                IF NOT ((PurchaseLine."Document Type" = PurchLineRel2."Document Type") AND
                  (PurchaseLine."Document No." = PurchLineRel2."Document No.") AND
                  (PurchaseLine."Line No." = PurchLineRel2."Document Line No."))
                THEN BEGIN
                  RelatedPurchLine.GET(PurchLineRel2."Document Type",PurchLineRel2."Document No.",PurchLineRel2."Document Line No.");
                  OtherMatchedQuantity := OtherMatchedQuantity + RelatedPurchLine.Quantity;
                END;
              UNTIL PurchLineRel2.NEXT = 0;

            PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
            IF PurchLineRel."Related Document Type" = PurchLineRel."Related Document Type"::Order THEN
              PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
            ELSE
              PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Order");

            PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchLineRel."Related Document No.");
            PurchDocMatch.SETRANGE("Purch. Line No.",PurchLineRel."Related Line No.");
            IF NOT PurchDocMatch.ISEMPTY THEN BEGIN
              PurchDocMatch.CALCSUMS(Quantity);
              OtherMatchedQuantity := OtherMatchedQuantity + PurchDocMatch.Quantity;
            END;

            AvailableQty := MatchedToPurchOrderLine."Outstanding Quantity" - OtherMatchedQuantity;

            IF (PurchaseLine.Quantity * MatchedToPurchOrderLine.Quantity < 0) OR
              (ABS(MatchedToPurchOrderLine."Outstanding Quantity") < ABS(OtherMatchedQuantity + PurchaseLine.Quantity))
            THEN
              IF PurchLineRel."Related Document Type" = PurchLineRel."Related Document Type"::Order THEN
                ERROR(InvoiceQtyRelToOrderErr,PurchLineRel."Related Document No.",AvailableQty,PurchaseLine.Quantity)
              ELSE
                ERROR(CreditQtyRelToReturnOrderErr,PurchLineRel."Related Document No.",AvailableQty,PurchaseLine.Quantity);
          END;
        END;
      END ELSE BEGIN
        PurchLineRel.SETRANGE("Related Document Type",PurchaseLine."Document Type");
        PurchLineRel.SETRANGE("Related Document No.",PurchaseLine."Document No.");
        PurchLineRel.SETRANGE("Related Line No.",PurchaseLine."Line No.");
        IF PurchLineRel.FINDSET THEN
          REPEAT
            RelatedPurchLine.GET(PurchLineRel."Document Type",PurchLineRel."Document No.",PurchLineRel."Document Line No.");
            MatchedQuantity := MatchedQuantity + RelatedPurchLine.Quantity;
            PurchDocMatched := TRUE;
          UNTIL PurchLineRel.NEXT = 0;

        PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
        IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order THEN
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order)
        ELSE
          PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::"Return Order");

        PurchDocMatch.SETRANGE("Purch. Doc. No.",PurchaseLine."Document No.");
        PurchDocMatch.SETRANGE("Purch. Line No.",PurchaseLine."Line No.");
        IF NOT PurchDocMatch.ISEMPTY THEN BEGIN
          PurchDocMatch.CALCSUMS(Quantity);
          MatchedQuantity := MatchedQuantity + PurchDocMatch.Quantity;
          PurchDocMatched := TRUE;
        END;

        IF PurchDocMatched THEN BEGIN
          IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order THEN
            QuantityUsed := PurchaseLine."Quantity Received"
          ELSE
            QuantityUsed := PurchaseLine."Return Qty. Shipped";

          // Calculate Outstanding Quantity instead of using field on line as Outstanding Quantity on line hasn't been updated when
          // this function is run. When deleting Outstanding Quantity in effect becomes zero
          IF OnTrigger = OnTrigger::OnValidateQty THEN BEGIN
            OutstandingQuantity := PurchaseLine.Quantity - QuantityUsed;
            PurchaseLineQuantity := PurchaseLine.Quantity;
          END ELSE BEGIN
            PurchaseLineQuantity := 0;
            OutstandingQuantity := 0;
          END;

          IF (PurchaseLine.Quantity * MatchedQuantity < 0) OR (ABS(MatchedQuantity) > ABS(OutstandingQuantity)) THEN
            IF PurchaseLine."Document Type" = PurchaseLine."Document Type"::Order THEN
              ERROR(QtyToOrderErr,MatchedQuantity + QuantityUsed,PurchaseLineQuantity)
            ELSE
              ERROR(QtyToReturnErr,MatchedQuantity + QuantityUsed,PurchaseLineQuantity);
        END;
      END;
    END;

    LOCAL PROCEDURE RetrieveILEFromShptRcpt@61(VAR TempItemLedgEntry@1010 : TEMPORARY Record 32;Type@1009 : Integer;Subtype@1008 : Integer;ID@1007 : Code[20];BatchName@1006 : Code[10];ProdOrderLine@1005 : Integer;RefNo@1004 : Integer);
    VAR
      ItemEntryRelation@1003 : Record 6507;
      ItemLedgEntry@1002 : Record 32;
      SignFactor@1000 : Integer;
    BEGIN
      // Copy of function RetrieveILEFromShptRcpt from C6500 - Item Tracking Management in NAV2013, in NAV 2016 function is located in
      // C6503 - Item Tracking Doc. Management (modified slightly - have not copied function calls not needed)
      // Function copied as it is local in C6500
      // retrieves a data set of Item Ledger Entries (Posted Shipments/Receipts)

      ItemEntryRelation.SETCURRENTKEY("Source ID","Source Type");
      ItemEntryRelation.SETRANGE("Source Type",Type);
      ItemEntryRelation.SETRANGE("Source Subtype",Subtype);
      ItemEntryRelation.SETRANGE("Source ID",ID);
      ItemEntryRelation.SETRANGE("Source Batch Name",BatchName);
      ItemEntryRelation.SETRANGE("Source Prod. Order Line",ProdOrderLine);
      ItemEntryRelation.SETRANGE("Source Ref. No.",RefNo);
      IF ItemEntryRelation.FINDSET THEN BEGIN
        REPEAT
          ItemLedgEntry.GET(ItemEntryRelation."Item Entry No.");
          TempItemLedgEntry := ItemLedgEntry;
          AddTempRecordToSet(TempItemLedgEntry,1);
        UNTIL ItemEntryRelation.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE AddTempRecordToSet@16(VAR TempItemLedgEntry@1000 : TEMPORARY Record 32;SignFactor@1002 : Integer);
    VAR
      ItemTrackingMgt@6085573 : Codeunit 6500;
      TempItemLedgEntry2@1001 : TEMPORARY Record 32;
    BEGIN
      // Copy of function RetrieveILEFromShptRcpt from C6500 - Item Tracking Management in NAV2013, in NAV 2016 function is located in
      // C6503 - Item Tracking Doc. Management (modified slightly - have not copied code not needed)
      ItemTrackingMgt.RetrieveAppliedExpirationDate(TempItemLedgEntry);
      TempItemLedgEntry2 := TempItemLedgEntry;
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.SETRANGE("Serial No.",TempItemLedgEntry2."Serial No.");
      TempItemLedgEntry.SETRANGE("Lot No.",TempItemLedgEntry2."Lot No.");
      TempItemLedgEntry.SETRANGE("Warranty Date",TempItemLedgEntry2."Warranty Date");
      TempItemLedgEntry.SETRANGE("Expiration Date",TempItemLedgEntry2."Expiration Date");
      IF TempItemLedgEntry.FINDFIRST THEN BEGIN
        TempItemLedgEntry.Quantity += TempItemLedgEntry2.Quantity;
        TempItemLedgEntry."Remaining Quantity" += TempItemLedgEntry2."Remaining Quantity";
        TempItemLedgEntry."Invoiced Quantity" += TempItemLedgEntry2."Invoiced Quantity";
        TempItemLedgEntry.MODIFY;
      END ELSE
        TempItemLedgEntry.INSERT;

      TempItemLedgEntry.RESET;
    END;

    [External]
    PROCEDURE CheckMatchToWithTracking@6085590(PurchOrderLine@6085573 : Record 39;MatchedToDocType@6085577 : 'Receipt,Return Shipment,Order,Return Order';ShowError@1000 : Boolean) : Boolean;
    VAR
      Item@6085576 : Record 27;
      ItemTrackingCode@6085575 : Record 6502;
      ReservEntry@6085574 : Record 337;
      Handled@1160040000 : Boolean;
      EventReturnValue@1160040001 : Boolean;
      TrackingEntriesFound@1001 : Boolean;
    BEGIN
      OnBeforeCheckMatchToWithTrack(PurchOrderLine,MatchedToDocType,ShowError,Handled,EventReturnValue);
      IF Handled THEN
        EXIT(EventReturnValue);
      IF NOT (MatchedToDocType IN [MatchedToDocType::Order,MatchedToDocType::"Return Order"]) THEN
        EXIT(TRUE);
      IF PurchOrderLine.Type <> PurchOrderLine.Type::Item THEN
        EXIT(TRUE);
      PurchOrderLine.TESTFIELD("No.");
      Item.GET(PurchOrderLine."No.");
      IF Item."Item Tracking Code" <> '' THEN BEGIN
        // Purchase lines linked to Production Orders
        IF PurchOrderLine."Prod. Order No." <> '' THEN
          EXIT(TRUE);
        ItemTrackingCode.GET(Item."Item Tracking Code");
        IF MatchedToDocType = MatchedToDocType::Order THEN BEGIN
          IF ItemTrackingCode."SN Specific Tracking" OR ItemTrackingCode."SN Purchase Inbound Tracking" OR
            ItemTrackingCode."Lot Specific Tracking" OR ItemTrackingCode."Lot Purchase Inbound Tracking"
          THEN
            IF ShowError THEN
              ERROR(MatchToOrderWithTrackingErr)
            ELSE
              EXIT(FALSE);
        END ELSE BEGIN
          IF ItemTrackingCode."SN Specific Tracking" OR ItemTrackingCode."SN Purchase Outbound Tracking" OR
            ItemTrackingCode."Lot Specific Tracking" OR ItemTrackingCode."Lot Purchase Outbound Tracking"
          THEN
            IF ShowError THEN
              ERROR(MatchToReturnWithTrackingErr)
            ELSE
              EXIT(FALSE);
        END;
      END;

      ReservEntry.RESET;
      ReservEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
      ReservEntry.SETRANGE("Source Subtype",PurchOrderLine."Document Type");
      ReservEntry.SETRANGE("Source ID",PurchOrderLine."Document No.");
      ReservEntry.SETRANGE("Source Ref. No.",PurchOrderLine."Line No.");
      ReservEntry.SETFILTER("Lot No.",'<>%1','');
      TrackingEntriesFound := NOT ReservEntry.ISEMPTY;
      IF NOT TrackingEntriesFound THEN BEGIN
        ReservEntry.SETRANGE("Lot No.");
        ReservEntry.SETFILTER("Serial No.",'<>%1','');
        TrackingEntriesFound := NOT ReservEntry.ISEMPTY;
      END;
      IF TrackingEntriesFound THEN
        IF MatchedToDocType = MatchedToDocType::Order THEN BEGIN
          IF ShowError THEN
            ERROR(MatchToOrderWithTrackingErr)
          ELSE
            EXIT(FALSE);
        END ELSE
          IF ShowError THEN
            ERROR(MatchToReturnWithTrackingErr)
          ELSE
            EXIT(FALSE);
      EXIT(TRUE);
    END;

    [External]
    PROCEDURE ShowAllocations@6085587(PurchaseHeader@6085573 : Record 38);
    VAR
      PurchAllocationHeader@6085576 : Record 6085730;
      PurchAllocation@6085575 : Page 6085730;
      PurchAllocationList@6085574 : Page 6085732;
      DCSetup@6085577 : Record 6085573;
    BEGIN
      DCSetup.GET;
      DCSetup.TESTFIELD("Enable Purchase Allocation");

      PurchAllocationHeader.SETCURRENTKEY("Document Type","Document No.");
      // New action on page doen't use filters as default values when filter set i filtergroup 0
      PurchAllocationHeader.FILTERGROUP(2);
      PurchAllocationHeader.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchAllocationHeader.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchAllocationHeader.FILTERGROUP(0);
      IF (PurchAllocationHeader.COUNT = 1) OR ((PurchAllocationHeader.COUNT = 0) AND (NOT ISSERVICETIER)) THEN BEGIN
        PurchAllocation.SETTABLEVIEW(PurchAllocationHeader);
        PurchAllocation.RUN;
      END ELSE BEGIN
        PurchAllocationList.SETTABLEVIEW(PurchAllocationHeader);
        PurchAllocationList.RUN;
      END;
    END;

    [External]
    PROCEDURE GetLineTranslation2@1160040007(Document@1160040000 : Record 6085590;LineNo@1160040001 : Integer;VAR LineTransl@1160040003 : Record 6085584) : Boolean;
    VAR
      Template@1160040002 : Record 6085579;
    BEGIN
      IF Template.GET(Document."Template No.") THEN
        EXIT(GetLineTranslation(Template,Document,LineNo,LineTransl))
    END;

    [External]
    PROCEDURE GetLineTranslation@6085589(VAR Template@6085574 : Record 6085579;VAR Document@6085576 : Record 6085590;LineNo@6085601 : Integer;VAR DataTrans@6085573 : Record 6085584) : Boolean;
    VAR
      Field@6085580 : Record 6085580;
      ItemVendor@6085578 : Record 99;
      Item@6085577 : Record 27;
      TempFilterDataTrans@1001 : TEMPORARY Record 6085584;
      TranslateFrom@6085600 : Code[150];
      RecordRef@6085603 : RecordRef;
      FieldRef@6085602 : FieldRef;
      Handled@6085290 : Boolean;
      FoundTranslation@6085291 : Boolean;
      ItemReferenceMgt@6085579 : Codeunit 6086026;
      VendorNo@1000 : Code[50];
    BEGIN
      // Translation for GTIN
      TranslateFrom := GetLineGTINNo(Document,LineNo);
      VendorNo := Document.GetSourceID;
      // Only if we have a value for the GTIN field
      IF TranslateFrom <> '' THEN BEGIN
        RecordRef.OPEN(27);
        IF RecordRef.FIELDEXIST(1217) THEN BEGIN
          FieldRef := RecordRef.FIELD(1217);
          FieldRef.SETRANGE(COPYSTR(TranslateFrom,1,FieldRef.LENGTH));
          IF RecordRef.FINDFIRST THEN BEGIN
            DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
            FieldRef := RecordRef.FIELD(1);
            DataTrans."Translate to No." := FieldRef.VALUE;
            FieldRef := RecordRef.FIELD(5426);
            DataTrans."Translate to UOM Code" := FieldRef.VALUE;
            EXIT(TRUE);
          END;
        END;
      END;

      // Translations for NO
      TranslateFrom := COPYSTR(GetLineAccountNo(Document,LineNo),1,150);

      OnBeforeGetLineTranslAccountNo(Template,Document,LineNo,DataTrans,TranslateFrom,Handled,FoundTranslation);
      IF Handled THEN
        EXIT(FoundTranslation);

      // Exact match with NO translation
      DataTrans.SETRANGE("Template No.",Document."Template No.");
      DataTrans.SETRANGE(Type,Field.Type::Line);
      DataTrans.SETRANGE("Field Code",'NO');
      DataTrans.SETRANGE("Translate From",COPYSTR(TranslateFrom,1,MAXSTRLEN(DataTrans."Translate From")));
      IF DataTrans.FINDFIRST THEN
        EXIT(TRUE);

      IF TranslateFrom <> '' THEN BEGIN
        // Match with Table filter
        // Find account no with filters
        TempFilterDataTrans.RESET;
        TempFilterDataTrans.DELETEALL;
        TempFilterDataTrans."Translate From" := TranslateFrom;
        TempFilterDataTrans.INSERT;

        // The normal filters first
        DataTrans.SETFILTER("Translate From",'<>''%1''','*');
        IF DataTrans.FINDSET THEN
          REPEAT
            IF CheckTranslFilter(DataTrans."Translate From") THEN
              TempFilterDataTrans.SETFILTER("Translate From",'''%1''',DataTrans."Translate From")
            ELSE
              TempFilterDataTrans.SETFILTER("Translate From",DataTrans."Translate From");

            IF NOT TempFilterDataTrans.ISEMPTY THEN
              EXIT(TRUE);
          UNTIL DataTrans.NEXT = 0;

        IF ItemReferenceMgt.GetItemReferenceVendor(VendorNo,DataTrans,TranslateFrom) THEN
          EXIT(TRUE);

        ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
        ItemVendor.SETRANGE("Vendor No.",VendorNo);
        ItemVendor.SETRANGE("Vendor Item No.",COPYSTR(TranslateFrom,1,MAXSTRLEN(ItemVendor."Vendor Item No.")));
        IF ItemVendor.FINDFIRST THEN
          IF Item.GET(ItemVendor."Item No.") THEN BEGIN
            DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
            DataTrans."Translate to No." := ItemVendor."Item No.";
            DataTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
            DataTrans."Translate to Variant Code" := ItemVendor."Variant Code";
            EXIT(TRUE);
          END;

        Item.SETCURRENTKEY("Vendor Item No.","Vendor No.");
        Item.SETRANGE("Vendor Item No.",COPYSTR(TranslateFrom,1,MAXSTRLEN(Item."Vendor Item No.")));
        Item.SETRANGE("Vendor No.",VendorNo);
        IF Item.FINDFIRST THEN BEGIN
          DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
          DataTrans."Translate to No." := Item."No.";
          DataTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
          EXIT(TRUE);
        END;

        IF Template."Use Vendor/Customer Item Nos." THEN
          IF Item.GET(COPYSTR(TranslateFrom,1,MAXSTRLEN(Item."No."))) THEN BEGIN
            DataTrans."Translate to Type" := DataTrans."Translate to Type"::Item;
            DataTrans."Translate to No." := Item."No.";
            DataTrans."Translate to UOM Code" := Item."Purch. Unit of Measure";
            EXIT(TRUE);
          END;

        // Then the * general translation
        DataTrans.SETFILTER("Translate From",'=''%1''','*');
        IF DataTrans.FINDFIRST THEN
          EXIT(TRUE);
      END;

      // Translations for Description
      TranslateFrom := COPYSTR(GetLineDescription(Document,LineNo),1,150);

      // Exact match with Description translation
      DataTrans.SETRANGE("Field Code",'DESC');
      DataTrans.SETRANGE("Translate From",UPPERCASE(COPYSTR(TranslateFrom,1,MAXSTRLEN(DataTrans."Translate From"))));
      IF DataTrans.FINDFIRST THEN
        EXIT(TRUE);

      IF TranslateFrom <> '' THEN BEGIN
        // Match with Table filter
        // Find account no with filters
        TempFilterDataTrans.RESET;
        TempFilterDataTrans.DELETEALL;
        TempFilterDataTrans."Translate From" := TranslateFrom;
        TempFilterDataTrans.INSERT;

        // The normal filters first
        DataTrans.SETFILTER("Translate From",'<>''%1''','*');
        IF DataTrans.FINDSET THEN
          REPEAT
            IF CheckTranslFilter(DataTrans."Translate From") THEN
              TempFilterDataTrans.SETFILTER("Translate From",'''%1''',DataTrans."Translate From")
            ELSE
              TempFilterDataTrans.SETFILTER("Translate From",DataTrans."Translate From");

            IF NOT TempFilterDataTrans.ISEMPTY THEN
              EXIT(TRUE);
          UNTIL DataTrans.NEXT = 0;

        // Then the * general translation
        DataTrans.SETFILTER("Translate From",'=''%1''','*');
        IF DataTrans.FINDFIRST THEN
          EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE CheckTranslFilter@6085607(Filter@6085600 : Text[1024]) : Boolean;
    BEGIN
      IF (STRPOS(Filter,'(') > 0) OR
        (STRPOS(Filter,')') > 0) OR
        (STRPOS(Filter,'>') > 0) OR
        (STRPOS(Filter,'<') > 0) OR
        (STRPOS(Filter,'=') > 0)
      THEN
        EXIT(TRUE);
    END;

    [External]
    PROCEDURE CheckOurOrderNoFilter@6085591(OurOrderNo@6085573 : Code[250]) : Boolean;
    VAR
      InvalidOrderNoFilter@6085574 : Boolean;
      i@6085575 : Integer;
      PrevCharacter@6085577 : Char;
      Character@6085576 : Char;
    BEGIN
      IF (OurOrderNo <> '') THEN BEGIN
        IF COPYSTR(OurOrderNo,STRLEN(OurOrderNo),1) = ',' THEN
          InvalidOrderNoFilter := TRUE
        ELSE BEGIN
          FOR i := 1 TO STRLEN(OurOrderNo) DO BEGIN
            Character := OurOrderNo[i];

            IF i <> 1 THEN
              IF (Character = ',') AND (PrevCharacter = ',') THEN BEGIN
                InvalidOrderNoFilter := TRUE;
                i := STRLEN(OurOrderNo);
              END;

            PrevCharacter := OurOrderNo[i]
          END;
        END;
      END;
      EXIT(InvalidOrderNoFilter);
    END;

    PROCEDURE GetXMLDocumentTypeChar@6085599(VAR Document@1000000000 : Record 6085590) : Code[1];
    VAR
      Field@1000000001 : Record 6085580;
      FieldRule@1000000002 : Record 6085583;
    BEGIN
      Field.GET(Document."Template No.",Field.Type::Header,'DOCTYPE');

      FieldRule.SETRANGE("Template No.",Field."Template No.");
      FieldRule.SETRANGE(Type,Field.Type);
      FieldRule.SETRANGE(Code,Field.Code);
      FieldRule.SETFILTER(Rule,'<>%1','');

      IF Document."XML Document Type" = Document."XML Document Type"::Invoice THEN
        FieldRule.SETRANGE("Entry No.",20000)
      ELSE
        IF Document."XML Document Type" = Document."XML Document Type"::CreditMemo THEN
          FieldRule.SETRANGE("Entry No.",10000);

      FieldRule.FINDFIRST;
      EXIT(UPPERCASE(FieldRule.Rule));
    END;

    PROCEDURE GetTranslatedUOMForField@6085612(VAR Document@1004 : Record 6085590;UOMField@6085600 : Record 6085580;VAR TempDocLine@1002 : TEMPORARY Record 6085596) TranslatedUOM : Text[1024];
    VAR
      OriginalUOM@1008 : Text[1024];
      Item@1010 : Record 27;
      TransferBlank@6085601 : Boolean;
    BEGIN
      OriginalUOM := CaptureMgt.GetText(Document,UOMField.Type,UOMField.Code,TempDocLine."Line No.");

      IF (TempDocLine."Translate to Type" = TempDocLine."Translate to Type"::Item) AND
        (TempDocLine."Translate to No." <> '') AND Item.GET(TempDocLine."Translate to No.")
      THEN
        // Translate UOM With Item No
        TranslatedUOM := TranslateUOM(Document."No.",Document."Template No.",Item."No.",OriginalUOM)
      ELSE
        // Translate UOM Without Item No
        TranslatedUOM := TranslateUOM(Document."No.",Document."Template No.",'',OriginalUOM);

      IF TranslatedUOM = OriginalUOM THEN
        EXIT('');
    END;

    [External]
    PROCEDURE TranslateUOM@6085611(DocumentNo@1006 : Code[20];TemplateNo@6085600 : Code[20];ItemNo@1002 : Code[20];UOM@1000 : Text[1024]) TranslatedUOM : Text[1024];
    VAR
      Template@1003 : Record 6085579;
      UOMTranslations@1004 : Record 6085782;
    BEGIN
      IF UOM = '' THEN
        EXIT(UOM);

      IF Template.GET(TemplateNo) AND (Template."Source Record Table ID" = DATABASE::Vendor) THEN BEGIN
        // Find with vendor and item filter
        UOMTranslations.SETRANGE("Vendor No.",Template."Source Record No.");
        IF ItemNo <> '' THEN
          UOMTranslations.SETRANGE("Item No.",ItemNo)
        ELSE
          UOMTranslations.SETFILTER("Item No.",'%1','');
        IF FindUOMTranslation(UOMTranslations,UOM,TranslatedUOM) THEN
          EXIT;

        // Find with vendor filter and for all items
        UOMTranslations.SETFILTER("Item No.",'%1','');
        IF FindUOMTranslation(UOMTranslations,UOM,TranslatedUOM) THEN
          EXIT;

        // Find with item filter and general vendor
        UOMTranslations.SETFILTER("Vendor No.",'%1','');
        IF ItemNo <> '' THEN
          UOMTranslations.SETRANGE("Item No.",ItemNo);
        IF FindUOMTranslation(UOMTranslations,UOM,TranslatedUOM) THEN
          EXIT;

        // Find general translations
        UOMTranslations.SETFILTER("Item No.",'%1','');
        IF FindUOMTranslation(UOMTranslations,UOM,TranslatedUOM) THEN
          EXIT;
      END;

      // Check standard ISO field from Unit Of Measure.
      TranslatedUOM := FindUOMISOTranslationFromTable(UOM);
    END;

    LOCAL PROCEDURE FindUOMTranslation@8(VAR UOMTranslations@1001 : Record 6085782;OriginalUOM@1004 : Text[1024];VAR TranslatedUOM@1005 : Text[1024]) : Boolean;
    BEGIN
      TranslatedUOM := OriginalUOM;

      IF UOMTranslations.FINDSET THEN
        REPEAT
          IF UOMTranslations."Case-sensitive" THEN BEGIN
            IF UOMTranslations."Translate From" = OriginalUOM THEN BEGIN
              TranslatedUOM := UOMTranslations."Translate to UOM Code";
              EXIT(TRUE);
            END;
          END ELSE
            IF UPPERCASE(UOMTranslations."Translate From") = UPPERCASE(OriginalUOM) THEN BEGIN
              TranslatedUOM := UOMTranslations."Translate to UOM Code";
              EXIT(TRUE);
            END;
        UNTIL UOMTranslations.NEXT = 0;
    END;

    LOCAL PROCEDURE FindUOMISOTranslationFromTable@6085609(OriginalUOM@6085600 : Text[1024]) TranslatedUOM : Text[1024];
    VAR
      Fields@6085603 : Record 2000000041;
      RecRef@6085602 : RecordRef;
      FieldRef@6085601 : FieldRef;
    BEGIN
      TranslatedUOM := OriginalUOM;

      Fields.SETRANGE(TableNo,DATABASE::"Unit of Measure");
      Fields.SETRANGE("No.",3);
      IF NOT Fields.ISEMPTY THEN
        RecRef.OPEN(DATABASE::"Unit of Measure")
      ELSE
        RecRef.OPEN(6086202);

      FieldRef := RecRef.FIELD(3);
      FieldRef.SETRANGE(OriginalUOM);
      IF RecRef.FINDFIRST THEN BEGIN
        FieldRef := RecRef.FIELD(1);
        TranslatedUOM := FieldRef.VALUE;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAutoMatchSetDocumentMatchStatus@6086290(VAR Document@1000 : Record 6085590;OrderNoFilter@1001 : Code[250];VAR Matched@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeAutoMatchNoLinesTryMatchAmounts@6086291(Document@1000 : Record 6085590;Template@1002 : Record 6085579;PurchDocType@1004 : 'Receipt,Return Shipment,Order,Return Order';VAR Handled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeIsDocMatched@6086292(Document@1000 : Record 6085590;VAR IsDocMatched@1002 : Boolean;VAR Handled@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetDocMatchedAmount@6086293(VAR Document@1000 : Record 6085590;VAR MatchedAmount@1001 : Decimal;VAR Handled@1002 : Boolean);
    BEGIN
    END;

    LOCAL PROCEDURE GetMatchedPurchDocs@6086250(Document@1004 : Record 6085590;VAR MatchedPurchOrders@1003 : Code[1024];VAR MatchedReturnOrders@1002 : Code[1024];VAR MatchedPurchRcpts@1001 : Code[1024];VAR MatchedReturnShipment@1000 : Code[1024];VAR PurchDocString@1006 : Text[1024]);
    VAR
      PurchDocMatch@1005 : Record 6085700;
      PrevPurchDocTypeNo@1009 : Text[50];
    BEGIN
      PurchDocMatch.SETCURRENTKEY("Purch. Doc. Type","Purch. Doc. No.","Purch. Line No.");
      PurchDocMatch.SETRANGE("Document No.",Document."No.");
      IF PurchDocMatch.FINDSET THEN BEGIN
        REPEAT
          IF PrevPurchDocTypeNo <> FORMAT(PurchDocMatch."Purch. Doc. Type") + FORMAT((PurchDocMatch."Purch. Doc. No.")) THEN BEGIN
            CASE PurchDocMatch."Purch. Doc. Type" OF
              PurchDocMatch."Purch. Doc. Type"::Order:
                BEGIN
                  IF MatchedPurchOrders = '' THEN
                    MatchedPurchOrders := PurchDocMatch."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedPurchOrders) + STRLEN(PurchDocMatch."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedPurchOrders) THEN
                      MatchedPurchOrders := MatchedPurchOrders + ', ' + PurchDocMatch."Purch. Doc. No.";
                END;
              PurchDocMatch."Purch. Doc. Type"::Receipt:
                BEGIN
                  IF MatchedPurchRcpts = '' THEN
                    MatchedPurchRcpts := PurchDocMatch."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedPurchRcpts) + STRLEN(PurchDocMatch."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedPurchRcpts) THEN
                      MatchedPurchRcpts := MatchedPurchRcpts + ', ' + PurchDocMatch."Purch. Doc. No.";
                END;
              PurchDocMatch."Purch. Doc. Type"::"Return Order":
                BEGIN
                  IF MatchedReturnOrders = '' THEN
                    MatchedReturnOrders := PurchDocMatch."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedReturnOrders) + STRLEN(PurchDocMatch."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedReturnOrders) THEN
                      MatchedReturnOrders := MatchedReturnOrders + ', ' + PurchDocMatch."Purch. Doc. No.";
                END;

              PurchDocMatch."Purch. Doc. Type"::"Return Shipment":
                BEGIN
                  IF MatchedReturnShipment = '' THEN
                    MatchedReturnShipment := PurchDocMatch."Purch. Doc. No."
                  ELSE
                    IF STRLEN(MatchedReturnShipment) + STRLEN(PurchDocMatch."Purch. Doc. No.") + 2 <= MAXSTRLEN(MatchedReturnShipment)
                    THEN
                      MatchedReturnShipment := MatchedReturnShipment + ', ' + PurchDocMatch."Purch. Doc. No.";
                END;
            END;
          END;
          PrevPurchDocTypeNo := FORMAT(PurchDocMatch."Purch. Doc. Type") + FORMAT((PurchDocMatch."Purch. Doc. No."));
        UNTIL PurchDocMatch.NEXT = 0;
      END;
      CASE TRUE OF
       (MatchedPurchOrders <> '') AND (MatchedPurchRcpts <> ''):
          PurchDocString := COPYSTR(STRSUBSTNO(CombineMsg,PurchaseOrderNosMsg,MatchedPurchOrders,PurchaseReceiptNosMsg,
            MatchedPurchRcpts),1,MAXSTRLEN(PurchDocString));
       (MatchedPurchOrders <> ''):
          PurchDocString := COPYSTR(STRSUBSTNO('%1 %2',PurchaseOrderNosMsg,MatchedPurchOrders),1,MAXSTRLEN(PurchDocString));
       (MatchedPurchRcpts <> ''):
          PurchDocString := COPYSTR(STRSUBSTNO('%1 %2',PurchaseReceiptNosMsg,MatchedPurchRcpts),1,MAXSTRLEN(PurchDocString));
      END;

      CASE TRUE OF
        (MatchedReturnOrders <> '') AND (MatchedReturnShipment <> ''):
          PurchDocString += COPYSTR(STRSUBSTNO(CombineMsg,ReturnOrderNosMsg,MatchedReturnOrders,ReturnShipmentNosMsg,
            MatchedReturnShipment),1,MAXSTRLEN(PurchDocString)-STRLEN(PurchDocString));
        (MatchedReturnOrders <> ''):
          PurchDocString += COPYSTR(STRSUBSTNO('%1 %2',ReturnOrderNosMsg,MatchedReturnOrders),1,MAXSTRLEN(PurchDocString)-
            STRLEN(PurchDocString));
        (MatchedReturnShipment <> ''):
          PurchDocString += COPYSTR(STRSUBSTNO('%1 %2',ReturnShipmentNosMsg,MatchedReturnShipment),1,MAXSTRLEN(PurchDocString)-
            STRLEN(PurchDocString));
      END;

      IF STRLEN(PurchDocString) <= (MAXSTRLEN(PurchDocString)-2) THEN
        PurchDocString := '(' + PurchDocString + ')';
    END;

    PROCEDURE SplitPurchOrderLine@6086251(VAR PurchaseLine@1000 : Record 39;AmountOnNewLine@1002 : Decimal;DescriptionOnNewLine@6085573 : Text[50]);
    VAR
      DecDialog@1001 : Page 6086072;
      NewPurchaseLine@1003 : Record 39;
      NewLineNo@1004 : Integer;
      Handled@1005 : Boolean;
    BEGIN
      OnBeforeSplitPurchOrderLine(PurchaseLine,AmountOnNewLine,DescriptionOnNewLine,Handled);
      IF Handled THEN
        EXIT;

      PurchaseLine.TESTFIELD(Type,PurchaseLine.Type::"G/L Account");
      PurchaseLine.TESTFIELD(Quantity,1);
      PurchaseLine.TESTFIELD("Quantity Received",0);
      DecDialog.LOOKUPMODE(TRUE);
      DecDialog.SetAmount(AmountOnNewLine);
      DecDialog.SetDescription(DescriptionOnNewLine);
      IF DecDialog.RUNMODAL = ACTION::LookupOK THEN BEGIN
        AmountOnNewLine := DecDialog.GetAmount;
        DescriptionOnNewLine := DecDialog.GetDescription;
        NewPurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type");
        NewPurchaseLine.SETRANGE("Document No.",PurchaseLine."Document No.");
        NewPurchaseLine.SETFILTER("Line No.",'%1..',PurchaseLine."Line No.");
        NewPurchaseLine.FINDFIRST;

        IF NewPurchaseLine.NEXT = 0 THEN
          NewLineNo := PurchaseLine."Line No." + 10000
        ELSE BEGIN
          //Try to find a line no. between the 2 lines
          NewLineNo := PurchaseLine."Line No." + ROUND(((NewPurchaseLine."Line No." - PurchaseLine."Line No.")/2),1,'=');
          IF NewLineNo = NewPurchaseLine."Line No." THEN BEGIN
            //Insert Line at the bottom instead
            NewPurchaseLine.FINDLAST;
            NewLineNo := NewPurchaseLine."Line No." + 10000;
          END;
        END;
        CLEAR(NewPurchaseLine);
        NewPurchaseLine := PurchaseLine;
        NewPurchaseLine."Line No." := NewLineNo;
        NewPurchaseLine.INSERT(TRUE);
        NewPurchaseLine.VALIDATE("Direct Unit Cost",AmountOnNewLine);
        IF DescriptionOnNewLine <> '' THEN
          NewPurchaseLine.VALIDATE(Description,DescriptionOnNewLine);
        NewPurchaseLine.MODIFY(TRUE);

        PurchaseLine.VALIDATE("Direct Unit Cost",PurchaseLine."Direct Unit Cost" - AmountOnNewLine);
        PurchaseLine.MODIFY(TRUE);
      END;
    END;

    PROCEDURE TrimOurOrderNoFilter@5(InFilter@1000 : Code[250]) OutFilter : Code[250];
    VAR
      NoOfSubStrings@1001 : Integer;
      PurchaseHeader@1002 : Record 38;
      i@1003 : Integer;
      CurrSubStr@1004 : Code[250];
    BEGIN
      NoOfSubStrings := STRLEN(InFilter) - STRLEN(DELCHR(InFilter,'=','|'));
      IF (NoOfSubStrings = 0) OR (STRLEN(InFilter) = NoOfSubStrings) THEN
        EXIT(COPYSTR(InFilter,1,MAXSTRLEN(PurchaseHeader."No.")));

      InFilter := CONVERTSTR(InFilter,'|',',');
      FOR i := 1 TO (NoOfSubStrings + 1) DO BEGIN
        CurrSubStr := SELECTSTR(i,InFilter);
        IF (CurrSubStr <> '') THEN
          OutFilter += COPYSTR(CurrSubStr,1,MAXSTRLEN(PurchaseHeader."No.")) + '|';
      END;

      IF OutFilter[STRLEN(OutFilter)] = '|' THEN
        OutFilter := COPYSTR(OutFilter,1,STRLEN(OutFilter) - 1);
    END;

    PROCEDURE GetDocumentNoSeriesCode@6085600(VAR Document@1000000000 : Record 6085590) : Code[20];
    VAR
      Field@161024012 : Record 6085580;
      CaptureMgt@1000 : Codeunit 6085576;
    BEGIN
      EXIT(COPYSTR(CaptureMgt.GetText(Document,Field.Type::Header,'NOSERIES',0),1,20));
    END;

    LOCAL PROCEDURE GetSourcePurchaseLine@9(PurchDocMatch@1000 : Record 6085700;VAR SourcePurchLine@1001 : Record 39);
    VAR
      PurchRcptLine@1002 : Record 121;
      ReturnShipmentLine@1003 : Record 6651;
    BEGIN
      CASE PurchDocMatch."Purch. Doc. Type" OF
        PurchDocMatch."Purch. Doc. Type"::Order:
          SourcePurchLine.GET(SourcePurchLine."Document Type"::Order,PurchDocMatch."Purch. Doc. No.",PurchDocMatch."Purch. Line No.");
        PurchDocMatch."Purch. Doc. Type"::"Return Order" :
          SourcePurchLine.GET(SourcePurchLine."Document Type"::"Return Order",PurchDocMatch."Purch. Doc. No.",
            PurchDocMatch."Purch. Line No.");
        PurchDocMatch."Purch. Doc. Type"::Receipt:
          BEGIN
            PurchRcptLine.GET(PurchDocMatch."Purch. Doc. No.",PurchDocMatch."Purch. Line No.");
            SourcePurchLine.GET(SourcePurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.");
          END;
        PurchDocMatch."Purch. Doc. Type"::"Return Shipment":
          BEGIN
            ReturnShipmentLine.GET(PurchDocMatch."Purch. Doc. No.",PurchDocMatch."Purch. Line No.");
            SourcePurchLine.GET(SourcePurchLine."Document Type"::"Return Order",ReturnShipmentLine."Return Order No.",
              ReturnShipmentLine."Return Order Line No.");
          END;
        END;
    END;

    [External]
    PROCEDURE GetLineDiscAmountPurchLine@10(SourcePurchLine@1000 : Record 39;QtyToInvoice@1001 : Decimal;RoundingPrecision@1002 : Decimal) DiscAmount : Decimal;
    BEGIN
      DiscAmount := ROUND((QtyToInvoice * SourcePurchLine."Direct Unit Cost"*SourcePurchLine."Line Discount %" / 100),RoundingPrecision);
    END;

    LOCAL PROCEDURE GetWhseRequirementDialogType@6085603(PurchLine@6085574 : Record 39;VAR DialogType@6085575 : 'None,ShipError,ReciveError,Shipwarning,ReceiveWarning');
    VAR
      Location@6085573 : Record 14;
      WhseSetup@6085577 : Record 5769;
      WhseValidateSourceLine@6085576 : Codeunit 5777;
      HandlingType@6085578 : 'None,DirectedPutAwayAndPick,RequireReceive,RequireShip';
    BEGIN
      IF (PurchLine.Type <> PurchLine.Type::Item) OR ((PurchLine."Document Type" <> PurchLine."Document Type"::Order) AND (PurchLine.
      "Document Type" <> PurchLine."Document Type"::"Return Order")) THEN BEGIN
        DialogType := DialogType::None;
        EXIT;
      END;

      IF PurchLine."Location Code" = '' THEN BEGIN
        Location.INIT;
        WhseSetup.GET;
        Location."Require Shipment" := WhseSetup."Require Shipment";
        Location."Require Pick" := WhseSetup."Require Pick";
        Location."Require Receive" := WhseSetup."Require Receive";
        Location."Require Put-away" := WhseSetup."Require Put-away";
      END ELSE BEGIN
        IF NOT (Location.GET(PurchLine."Location Code")) THEN
          ERROR(PurchLineLocationCodeErr,PurchLine.FIELDCAPTION("Location Code"),PurchLine."Location Code",PurchLine."Document Type",
            PurchLine."Document No.",PurchLine.FIELDCAPTION("Line No."),PurchLine."Line No.");
      END;

      HandlingType := HandlingType::None;
      CASE TRUE OF
        Location."Directed Put-away and Pick":
          HandlingType := HandlingType::DirectedPutAwayAndPick;
        Location."Require Receive":
          IF (((PurchLine."Document Type" = PurchLine."Document Type"::Order) AND (PurchLine.Quantity >= 0)) OR
              ((PurchLine."Document Type" = PurchLine."Document Type"::"Return Order") AND (PurchLine.Quantity < 0)))
          THEN
            HandlingType := HandlingType::RequireReceive;
        Location."Require Shipment":
          IF (((PurchLine."Document Type" = PurchLine."Document Type"::Order) AND (PurchLine.Quantity < 0)) OR
              ((PurchLine."Document Type" = PurchLine."Document Type"::"Return Order") AND (PurchLine.Quantity >= 0)))
          THEN
            HandlingType := HandlingType::RequireShip;
      END;

      CASE HandlingType OF
        HandlingType::None:
          DialogType := DialogType::None;
        HandlingType::DirectedPutAwayAndPick:
          CASE PurchLine."Document Type" OF
            PurchLine."Document Type"::Order:
              IF PurchLine.Quantity >= 0 THEN
                DialogType := DialogType::ReciveError
              ELSE
                DialogType := DialogType::ShipError;
            PurchLine."Document Type"::"Return Order":
              IF PurchLine.Quantity >= 0 THEN
                DialogType := DialogType::ShipError
              ELSE
                DialogType := DialogType::ReciveError;
          END;
        HandlingType::RequireReceive:
          IF WhseValidateSourceLine.WhseLinesExist(DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",
            PurchLine."Line No.",0,PurchLine.Quantity)
          THEN
            DialogType := DialogType::ReciveError
          ELSE
            DialogType := DialogType::ReceiveWarning;
        HandlingType::RequireShip:
          IF WhseValidateSourceLine.WhseLinesExist(DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",
            PurchLine."Line No.",0,PurchLine.Quantity)
          THEN
            DialogType := DialogType::ShipError
          ELSE
            DialogType := DialogType::Shipwarning;
      END;
    END;

    LOCAL PROCEDURE DeleteMultipleDCLineMatchToOnePurchLine@6085695(DocumentNo@6085573 : Code[20]) Matched : Boolean;
    VAR
      PurchDocMatch@6085574 : Record 6085700;
      PurchDocMatch2@1000 : Record 6085700;
      DocumentComment@1001 : Record 6085594;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",DocumentNo);
      PurchDocMatch.SETRANGE("Purch. Doc. Type",PurchDocMatch."Purch. Doc. Type"::Order);
      IF PurchDocMatch.FINDSET THEN
        REPEAT
          PurchDocMatch2.COPY(PurchDocMatch);
          PurchDocMatch2.SETRANGE("Purch. Line No.",PurchDocMatch."Purch. Line No.");
          PurchDocMatch2.SETRANGE("Purch. Doc. No.",PurchDocMatch."Purch. Doc. No.");
          IF PurchDocMatch2.COUNT > 1 THEN BEGIN
            REPEAT
              DocumentComment.SETRANGE("Document No.",PurchDocMatch2."Document No.");
              DocumentComment.SETRANGE("Line No.",PurchDocMatch2."Document Line No.");
              DocumentComment.SETRANGE(Area,DocumentComment.Area::Match);
              IF NOT DocumentComment.ISEMPTY THEN
                DocumentComment.DELETEALL;
            UNTIL PurchDocMatch2.NEXT = 0;

            PurchDocMatch2.DELETEALL(TRUE);
          END;
        UNTIL PurchDocMatch.NEXT = 0;

      EXIT(NOT PurchDocMatch.ISEMPTY);
    END;

    LOCAL PROCEDURE RemoveMatchAndComments@6085605(DocumentNo@6085573 : Code[20]);
    VAR
      PurchDocMatch@6085574 : Record 6085700;
      DocumentComment@6085575 : Record 6085594;
    BEGIN
      PurchDocMatch.SETRANGE("Document No.",DocumentNo);
      PurchDocMatch.DELETEALL(TRUE);
      DocumentComment.SETRANGE("Document No.",DocumentNo);
      DocumentComment.SETRANGE(Area,DocumentComment.Area::Match);
      DocumentComment.DELETEALL(TRUE);
    END;

    PROCEDURE GetPurcDocLineAmount@6085601(PurchaseLine@6085573 : Record 39;CurrencyCode@6085580 : Code[10];VAR PurchaseLineOrderUnitCost@6085574 : Decimal;VAR PurchaseLineOrderLineAmount@6085575 : Decimal);
    VAR
      PurchRcptLine@6085576 : Record 121;
      PurchaseLineOrder@6085577 : Record 39;
      PurchaseLineRelationship@6085578 : Record 6085702;
      PurchaseLineOrderFound@6085579 : Boolean;
      Currency@6085581 : Record 4;
    BEGIN
      PurchaseLineOrderLineAmount := 0;
      PurchaseLineOrderUnitCost := 0;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode);
      Currency.InitRoundingPrecision;

      IF PurchaseLine."Receipt No." <> '' THEN BEGIN
        IF PurchRcptLine.GET(PurchaseLine."Receipt No.",PurchaseLine."Receipt Line No.") THEN
          IF PurchaseLineOrder.GET(PurchaseLineOrder."Document Type"::Order,PurchRcptLine."Order No.",
            PurchRcptLine."Order Line No.")
          THEN
            PurchaseLineOrderFound := TRUE;
      END ELSE BEGIN
        IF PurchaseLineRelationship.GET(PurchaseLineRelationship."Document Type"::Invoice,PurchaseLine."Document No.",
          PurchaseLine."Line No.")
        THEN
          IF PurchaseLineOrder.GET(PurchaseLineRelationship."Related Document Type",PurchaseLineRelationship."Related Document No.",
            PurchaseLineRelationship."Related Line No.")
          THEN
            PurchaseLineOrderFound := TRUE;
      END;

      IF PurchaseLineOrderFound THEN BEGIN
        PurchaseLineOrderUnitCost := PurchaseLineOrder."Direct Unit Cost";
        PurchaseLineOrderLineAmount := ROUND(PurchaseLine.Quantity * PurchaseLineOrderUnitCost,Currency."Amount Rounding Precision") -
          GetLineDiscAmountPurchLine(PurchaseLineOrder,PurchaseLine.Quantity,Currency."Amount Rounding Precision");
      END ELSE
        EXIT;
    END;

    PROCEDURE GetReceiptLineAmount@6085614(PurchRcptLine@6085579 : Record 121;MatchedQty@6085574 : Decimal;CurrencyCode@6085577 : Code[10]) LineAmountReceipt : Decimal;
    VAR
      Currency@6085573 : Record 4;
      PurchLine@6085575 : Record 39;
    BEGIN
      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode);
      Currency.InitRoundingPrecision;

      IF (PurchRcptLine."Order No." <> '') AND (PurchRcptLine."Order Line No." <> 0) THEN BEGIN
        IF NOT PurchLine.GET(PurchLine."Document Type"::Order,PurchRcptLine."Order No.",PurchRcptLine."Order Line No.") THEN
          EXIT(0)
      END ELSE
        EXIT(0);

      LineAmountReceipt := ROUND(MatchedQty * PurchLine."Direct Unit Cost",Currency."Amount Rounding Precision")
        - ROUND(ROUND(MatchedQty * PurchLine."Direct Unit Cost",Currency."Amount Rounding Precision") *
        PurchLine."Line Discount %" / 100,Currency."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE MatchItemNo@6085619(Template@6085573 : Record 6085579;Document@6085574 : Record 6085590;LineNo@6085575 : Integer) : Boolean;
    BEGIN
      CASE Template."Purch. Match Item No." OF
        Template."Purch. Match Item No."::"Yes - always":
          EXIT(TRUE);
        Template."Purch. Match Item No."::"Yes - if present":
          EXIT((GetLineAccountNo(Document,LineNo) <> '') OR (GetLineGTINNo(Document,LineNo) <> ''));
      END;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE MatchUnitCost@6085613(Template@6085575 : Record 6085579;Document@6085574 : Record 6085590;LineNo@6085573 : Integer;DoQuantityCheck@6085576 : Boolean;VAR LineUnitCost@6085577 : Decimal) : Boolean;
    VAR
      LineQuantity@6085578 : Decimal;
      DoMatch@6085579 : Decimal;
    BEGIN
      CASE Template."Purch. Match Unit Cost" OF
        Template."Purch. Match Unit Cost"::"Yes - always":
          BEGIN
            LineUnitCost := GetLineUnitCost(Document,LineNo);
            EXIT(TRUE);
          END;
        Template."Purch. Match Unit Cost"::"Yes - if present":
          BEGIN
            IF DoQuantityCheck THEN BEGIN
              LineQuantity := GetLineQuantity(Document,LineNo);
              IF LineQuantity <> 0 THEN BEGIN
                LineUnitCost := GetLineUnitCost(Document,LineNo);
                EXIT(TRUE);
              END;
            END ELSE BEGIN // Lineunitcost Check
              LineUnitCost := GetLineUnitCost(Document,LineNo);
              EXIT(LineUnitCost <> 0);
            END;
          END;
      END;
      EXIT(FALSE);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetLineAmount@6085290(VAR Document@6085291 : Record 6085590;LineNo@6085290 : Integer;VAR ReturnValue@6085293 : Decimal;VAR Handled@6085292 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetLineTranslAccountNo@6085291(VAR Template@6085293 : Record 6085579;VAR Document@6085292 : Record 6085590;LineNo@6085291 : Integer;VAR DataTrans@6085290 : Record 6085584;TranslateFrom@6085294 : Code[150];VAR Handled@6085295 : Boolean;VAR FoundTranslation@6085296 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCheckMatchToWithTrack@1160040001(PurchOrderLine@1160040002 : Record 39;MatchedToDocType@1160040001 : 'Receipt,Return Shipment,Order,Return Order';ShowError@1160040000 : Boolean;VAR Handled@1160040003 : Boolean;VAR ReturnValue@1160040004 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetIsInvoice@11(VAR Document@1000000000 : Record 6085590;VAR Field@1002 : Record 6085580;VAR IsInvoice@1001 : Boolean;VAR Handled@1000 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeSplitPurchOrderLine@6085615(VAR PurchaseLine@6085575 : Record 39;VAR AmountOnNewLine@6085574 : Decimal;VAR DescriptionOnNewLine@6085573 : Text[50];VAR Handled@6085576 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertPurchDocMatch@7(VAR PurchDocMatch@1009 : Record 6085700;DocNo@1008 : Code[20];DocLineNo@1007 : Integer;PurchDocType@1006 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@1005 : Code[20];PurchLineNo@1004 : Integer;VAR AvailMatchQty@1003 : Decimal;VAR DirectUnitCost@1002 : Decimal;VAR LineDiscountPct@1001 : Decimal;UpdateMatchTracking@1000 : Boolean;VAR Handled@1010 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetDocLineMatchedQty@12(VAR DocumentLine@1000 : Record 6085596;VAR MatchQty@1001 : Decimal;VAR Handled@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetFiltersAutoMatchOpenPurchDoc@13(Document@1000 : Record 6085590;DocumentLine@1001 : TEMPORARY Record 6085596;Template@1002 : Record 6085579;OrderNo@1003 : Code[20];PurchDocType@1005 : 'Receipt,Return Shipment,Order,Return Order';VAR PurchLine@1004 : Record 39;VAR Stop@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcAvailMatchQtyAutoMatchOpenPurchDoc@14(Document@1000 : Record 6085590;DocumentLine@1005 : TEMPORARY Record 6085596;Template@1004 : Record 6085579;PurchLine@1001 : Record 39;VAR AvailableMatchQty@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetFilterAutoMatchReceipt@21(Document@1000 : Record 6085590;DocumentLine@1001 : TEMPORARY Record 6085596;Template@1002 : Record 6085579;OrderNo@1003 : Code[20];VAR PurchRcptLine@1004 : Record 121;VAR Stop@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcAvailMatchQtyAutoMatchReceipt@19(Document@1000 : Record 6085590;DocumentLine@1005 : TEMPORARY Record 6085596;Template@1004 : Record 6085579;PurchRcptLine@1001 : Record 121;VAR AvailableMatchQty@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetFilterAutoMatchReturnShpt@25(Document@1000 : Record 6085590;DocumentLine@1001 : TEMPORARY Record 6085596;Template@1002 : Record 6085579;OrderNo@1003 : Code[20];VAR ReturnShptLine@1004 : Record 6651;VAR Stop@1006 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCalcAvailMatchQtyAutoMatchReturnShpt@24(Document@1000 : Record 6085590;DocumentLine@1005 : TEMPORARY Record 6085596;Template@1004 : Record 6085579;ReturnShptLine@1001 : Record 6651;VAR AvailableMatchQty@1002 : Decimal);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertMatchSpecByPurchDocMatchShowMatchedSpec@28(PurchDocType@1000 : 'Receipt,Return Shipment,Order,Return Order';PurchDocNo@1004 : Code[20];PurchLineNo@1001 : Integer;PurchDocMatch@1002 : Record 6085700;VAR MatchSpec@1003 : Record 6085761);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetDocFilters@1100288000(Document@1100288000 : Record 6085590;VAR PurchHeader@1100288001 : Record 38;VAR PurchLine@1100288003 : Record 39;VAR PurchRcptLine@1100288002 : Record 121;VAR ReturnShptLine@1100288004 : Record 6651);
    BEGIN
    END;

    BEGIN
    END.
  }
}

OBJECT Page 6085702 CDC Purch. Invoice Match
{
  OBJECT-PROPERTIES
  {
    Date=22/07/21;
    Time=12:11:28;
    Modified=Yes;
    Version List=DCW18.00.00.7.02;
  }
  PROPERTIES
  {
    Permissions=TableData 6085700=rimd;
    CaptionML=[ENU=Invoice Matching;
               ESP=Casar factura compra];
    InsertAllowed=No;
    DeleteAllowed=No;
    LinksAllowed=No;
    SourceTable=Table6085590;
    DataCaptionExpr="No." + ' - ' + GetSourceName;
    PageType=Card;
    PromotedActionCategoriesML=[ENU=0,Process,2,Template,Vendor;
                                ESP=0,Proceso,2,Plantilla,Proveedor];
    OnOpenPage=VAR
                 PurchRcptLine@6085575 : Record 121;
                 PurchLine@6085574 : Record 39;
                 CurrencyCode@6085573 : Code[10];
                 BuyFromVendorNo@1002 : Code[20];
                 PayToVendorNo@1001 : Code[20];
                 Vendor@1000 : Record 23;
               BEGIN
                 FILTERGROUP := 2;
                 SETRECFILTER;
                 FILTERGROUP := 0;

                 CurrPage.DocumentLines.PAGE.SetShowMatchedQty(TRUE);
                 CurrPage.OrderLines.PAGE.SetShowOrder(TRUE);

                 Channel := CREATEGUID;
                 CLEAR(EventNotifierSource);

                 IF WebClientMgt.IsWebClient THEN
                   ShowWebInfoPart := TRUE
                 ELSE
                   EventNotifierSource := FORMAT(Channel);

                 GLSetup.GET;
                 DCSetup.GET;

                 ShowDocLines := HasDocumentLines;
                 OurDocNo := COPYSTR(PurchDocMgnt.GetOurDocumentNo(Rec),1,MAXSTRLEN(OurDocNo));

                 UpdateInfoBar;

                 IF (PurchDocMgnt.GetCurrencyCode(Rec) = GLSetup."LCY Code") AND (NOT DCSetup."Fill-out LCY") THEN
                   CurrencyCode := ''
                 ELSE
                   CurrencyCode := PurchDocMgnt.GetCurrencyCode(Rec);

                 BuyFromVendorNo := GetSourceID;
                 Vendor.GET(BuyFromVendorNo);
                 IF Vendor."Pay-to Vendor No." <> '' THEN
                   PayToVendorNo := Vendor."Pay-to Vendor No."
                 ELSE
                   PayToVendorNo := BuyFromVendorNo;

                 PurchRcptLine.SETCURRENTKEY("Pay-to Vendor No.");
                 PurchRcptLine.FILTERGROUP(4);

                 IF BuyFromVendorNo = PayToVendorNo THEN
                   PurchRcptLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo)
                 ELSE BEGIN
                   PurchRcptLine.SETFILTER("Pay-to Vendor No.",'%1|%2',BuyFromVendorNo,PayToVendorNo);
                   PurchRcptLine.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
                 END;

                 PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>%1',0);
                 PurchRcptLine.SETRANGE("Currency Code",CurrencyCode);
                 PurchRcptLine.FILTERGROUP(0);

                 CurrPage.ReceiptLines.PAGE.SETTABLEVIEW(PurchRcptLine);
                 CurrPage.ReceiptLines.PAGE.SetDocument(Rec);
                 CurrPage.ReceiptLines.PAGE.SetChannel(Channel);
                 CurrPage.ReceiptLines.PAGE.UpdatePage;

                 PurchLine.SETCURRENTKEY("Document Type","Pay-to Vendor No.","Currency Code");
                 PurchLine.FILTERGROUP(4);
                 PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);

                 IF BuyFromVendorNo = PayToVendorNo THEN
                   PurchLine.SETRANGE("Pay-to Vendor No.",PayToVendorNo)
                 ELSE BEGIN
                   PurchLine.SETFILTER("Pay-to Vendor No.",'%1|%2',BuyFromVendorNo,PayToVendorNo);
                   PurchLine.SETRANGE("Buy-from Vendor No.",BuyFromVendorNo);
                 END;

                 PurchLine.SETRANGE("Currency Code",CurrencyCode);
                 PurchLine.SETFILTER("Outstanding Quantity",'<>%1',0);
                 PurchLine.FILTERGROUP(0);

                 CurrPage.OrderLines.PAGE.SETTABLEVIEW(PurchLine);
                 CurrPage.OrderLines.PAGE.SetDocument(Rec);
                 CurrPage.OrderLines.PAGE.SetChannel(Channel);
                 CurrPage.OrderLines.PAGE.UpdatePage;

                 CurrPage.DocumentLines.PAGE.SetDocument(Rec);
                 CurrPage.DocumentLines.PAGE.UpdatePage;
               END;

    OnClosePage=BEGIN
                  IF WebClientMgt.IsWebClient THEN
                    ValidateDocument;
                END;

    OnAfterGetRecord=BEGIN
                       UpdateInfoBar;
                     END;

    ActionList=ACTIONS
    {
      { 1000000018;  ;ActionContainer;
                      Name=RelatedInformation;
                      ActionContainerType=RelatedInformation }
      { 1000000015;1 ;ActionGroup;
                      Name=Template;
                      CaptionML=[ENU=&Template;
                                 ESP=&Plantilla] }
      { 1000000014;2 ;Action    ;
                      Name=Template Card;
                      ShortCutKey=Ctrl+S;
                      CaptionML=[ENU=&Template Card;
                                 ESP=&Ficha plantilla];
                      ToolTipML=[ENU=View or edit the template applied to the document.;
                                 ESP=Permite ver o editar la plantilla aplicada al documento.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Edit;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 TemplateCard@6085601 : Page 6085584;
                                 Template@6085600 : Record 6085579;
                               BEGIN
                                 TemplateCard.SetDocumentNo("No.");

                                 Template.SETRANGE("No.","Template No.");
                                 TemplateCard.SETTABLEVIEW(Template);

                                 TemplateCard.RUN;
                               END;
                                }
      { 1160040004;1 ;ActionGroup;
                      Name=Vendor;
                      CaptionML=[ENU=Vendor;
                                 ESP=Proveedor] }
      { 1160040003;2 ;Action    ;
                      Name=Vendor Card;
                      CaptionML=[ENU=Vendor Card;
                                 ESP=Ficha proveedor];
                      ToolTipML=[ENU=View or edit the vendor assigned to the document;
                                 ESP=Permite ver o editar el proveedor asignado al documento];
                      Promoted=Yes;
                      Image=Vendor;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 Vendor@1160040000 : Record 23;
                               BEGIN
                                 Vendor.GET(GetSourceID);
                                 PAGE.RUN(PAGE::"Vendor Card",Vendor);
                               END;
                                }
      { 1160040002;2 ;Action    ;
                      Name=Unposted Documents;
                      CaptionML=[ENU=&Unposted Documents;
                                 ESP=Documentos &no registrados];
                      ToolTipML=[ENU=View a list of all unposted documents for the vendor assigned to the document.;
                                 ESP=Permite ver la lista de todos los documentos no registrados del proveedor asignado al documento.];
                      Promoted=Yes;
                      Image=Invoice;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 PurchHeader@1160040000 : Record 38;
                               BEGIN
                                 PurchHeader.SETRANGE("Pay-to Vendor No.",GetSourceID);
                                 PAGE.RUN(PAGE::"CDC Purchase Documents",PurchHeader);
                               END;
                                }
      { 1160040001;2 ;Action    ;
                      Name=Ledger Entries;
                      CaptionML=[ENU=Ledger E&ntries;
                                 ESP=Mo&vimientos];
                      ToolTipML=[ENU=View the vendor ledger entries for the vendor assigned to the document.;
                                 ESP=Permite ver los movimientos de proveedor para el proveedor asignado al documento.];
                      Promoted=Yes;
                      Image=VendorLedger;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 VendLedgEntry@1160040000 : Record 25;
                               BEGIN
                                 VendLedgEntry.SETCURRENTKEY("Vendor No.");
                                 VendLedgEntry.SETRANGE("Vendor No.",GetSourceID);
                                 PAGE.RUN(PAGE::"Vendor Ledger Entries",VendLedgEntry);
                               END;
                                }
      { 1000000012;  ;ActionContainer;
                      Name=ActionItems;
                      ActionContainerType=ActionItems }
      { 1000000011;1 ;ActionGroup;
                      Name=Functions;
                      CaptionML=[ENU=F&unctions;
                                 ESP=Acci&ones] }
      { 1100288000;2 ;Action    ;
                      Name=Custom Filters;
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.ReceiptLines.PAGE.SetFilters(Rec);
                               END;
                                }
      { 1160040005;2 ;Action    ;
                      Name=Filter on Order No.;
                      ShortCutKey=Shift+Ctrl+O;
                      CaptionML=[ENU=Filter on Order No.;
                                 ESP=Filtrar por Nß pedido];
                      ToolTipML=[ENU=Filter all receipt and order lines to show only the lines with the order number recognized in the document.;
                                 ESP=Permite filtrar todas las l°neas de albar†n y pedido para mostrar solo las l°neas con el n£mero de pedido reconocido en el documento.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=FilterLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 FilterOnOrderNo := NOT FilterOnOrderNo;
                                 IF FilterOnOrderNo THEN BEGIN
                                   CurrPage.ReceiptLines.PAGE.SetOrderNo(OurDocNo);
                                   CurrPage.OrderLines.PAGE.SetDocumentNo(OurDocNo);
                                 END ELSE BEGIN
                                   CurrPage.ReceiptLines.PAGE.SetOrderNo('');
                                   CurrPage.OrderLines.PAGE.SetDocumentNo('');
                                 END;

                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 8       ;2   ;Action    ;
                      Name=Filter on Unmatched Only;
                      CaptionML=[ENU=Filter on Unmatched Only;
                                 ESP=Filtrar solo no casados];
                      ToolTipML=[ENU=Filter all receipt and order lines to show only the lines that are unmatched.;
                                 ESP=Filtre todas las l°neas de albar†n y pedido para mostrar solo las l°neas no casadas.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=FilterLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.ReceiptLines.PAGE.SetCalculatedFilter(NOT IsCalculatedFilterSet,'UNMATCHED');
                                 CurrPage.OrderLines.PAGE.SetCalculatedFilter(NOT IsCalculatedFilterSet,'UNMATCHED');
                                 IsCalculatedFilterSet := NOT IsCalculatedFilterSet;
                               END;
                                }
      { 9       ;2   ;Action    ;
                      Name=Filter on Match Differences;
                      CaptionML=[ENU=Filter on Match Differences;
                                 ESP=Filtrar por diferencias casada];
                      ToolTipML=[ENU=Filter all receipt and order lines to show only the lines that have a difference between matched amount (invoice) and amount on the order.;
                                 ESP=Filtre todas las l°neas de albar†n y pedido para mostrar solo las l°neas que tienen una diferencia entre el importe casado (factura) y el importe en el pedido.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=FilterLines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CurrPage.ReceiptLines.PAGE.SetCalculatedFilter(NOT IsCalculatedFilterSet,'AMOUNTDIFF');
                                 CurrPage.OrderLines.PAGE.SetCalculatedFilter(NOT IsCalculatedFilterSet,'AMOUNTDIFF');
                                 IsCalculatedFilterSet := NOT IsCalculatedFilterSet;
                               END;
                                }
      { 1000000008;2 ;Action    ;
                      Name=Perform Match;
                      ShortCutKey=Ctrl+M;
                      CaptionML=[ENU=Perform Match;
                                 ESP=Realizar casamiento];
                      ToolTipML=[ENU=Perform auto-matching according to the setup of the template assigned to the document.;
                                 ESP=Permite casar autom†ticamente de acuerdo con la configuraci¢n de la plantilla asignada al documento.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Splitlines;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 TestStatus;
                                 PurchDocMgnt.AutoMatch(Rec);
                                 CurrPage.DocumentLines.PAGE.UpdatePage;
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 1000000006;2 ;Action    ;
                      Name=Remove All Matches;
                      CaptionML=[ENU=Remove &All Matches;
                                 ESP=Eliminar todos los casamientos];
                      ToolTipML=[ENU=Remove all matches to the document.;
                                 ESP=Eliminar todos los casamientos del documento.];
                      Promoted=Yes;
                      PromotedIsBig=Yes;
                      Image=Cancel;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PurchDocMatch@6085574 : Record 6085700;
                                 Comment@6085573 : Record 6085594;
                               BEGIN
                                 IF NOT CONFIRM(ResetMatchQst) THEN
                                   EXIT;

                                 DeleteComments(Comment.Area::Match);
                                 PurchDocMatch.SETRANGE("Document No.","No.");
                                 PurchDocMatch.DELETEALL(TRUE);

                                 "Match Status" := "Match Status"::Unmatched;
                                 MODIFY(TRUE);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;;Container;
                Name=ContentArea;
                ContainerType=ContentArea }

    { 6   ;1   ;Group     ;
                Name=WebInfobar;
                CaptionML=[ENU=Match Overview;
                           ESP=Resumen combinaci¢n];
                Visible=ShowWebInfoPart;
                GroupType=Group }

    { 1   ;2   ;Group     ;
                Name=Control1;
                GroupType=GridLayout;
                Layout=Columns }

    { 5   ;3   ;Field     ;
                Name=OurDocNo;
                SourceExpr=OurDocNo;
                CaptionClass=PurchDocMgnt.GetOurDocNoDesc(Rec);
                Editable=FALSE }

    { 2   ;3   ;Field     ;
                Name=AmountToMatch;
                SourceExpr=AmountToMatch;
                CaptionClass=Text003;
                Editable=FALSE }

    { 3   ;3   ;Field     ;
                Name=MatchedAmount;
                SourceExpr=MatchedAmount;
                CaptionClass=Text004;
                Editable=FALSE }

    { 4   ;3   ;Field     ;
                Name=MatchDiffAmount;
                SourceExpr=MatchDiffAmount;
                CaptionClass=Text005;
                Editable=FALSE }

    { 161024012;1;Field   ;
                Name=InfoBarAddIn;
                SourceExpr=InfoBarAddInSource;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.MatchInfoBar;PublicKeyToken=0c53e51c0afe7001];
                ShowCaption=No }

    { 161024013;1;Field   ;
                Name=EventNotifier;
                SourceExpr=EventNotifierSource;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.EventNotifier;PublicKeyToken=0c53e51c0afe7001];
                OnControlAddIn=BEGIN
                                 UpdateInfoBar;
                               END;
                                }

    { 1000000003;1;Part   ;
                Name=ReceiptLines;
                CaptionML=[ENU=Purchase Receipt Lines;
                           ESP=L°neas albar†n compra];
                PagePartID=Page6085703;
                UpdatePropagation=Both }

    { 1160040000;1;Part   ;
                Name=OrderLines;
                CaptionML=[ENU=Order Lines;
                           ESP=L°neas pedido];
                PagePartID=Page6085749;
                PartType=Page;
                UpdatePropagation=Both }

    { 1000000007;1;Part   ;
                Name=DocumentLines;
                CaptionML=[ENU=Document Lines;
                           ESP=L°neas documento];
                PagePartID=Page6085727;
                Visible=ShowDocLines;
                Editable=FALSE;
                UpdatePropagation=Both }

    { 1000000026;;Container;
                Name=FactBoxArea;
                ContainerType=FactBoxArea }

    { 1000000025;1;Part   ;
                Name=CaptureUI;
                CaptionML=[ENU=Document;
                           ESP=Documento];
                SubPageLink=No.=FIELD(No.);
                PagePartID=Page6085593 }

  }
  CODE
  {
    VAR
      GLSetup@1160040000 : Record 98;
      DCSetup@1160040001 : Record 6085573;
      WebClientMgt@1003 : Codeunit 6085662;
      PurchDocMgnt@1000000009 : Codeunit 6085709;
      CaptureAddinLib@161024014 : Codeunit 6085660;
      CaptureXmlDoc@161024013 : Codeunit 6192820;
      InfoBarAddInSource@161024012 : Text;
      EventNotifierSource@161024017 : Text;
      Text003@161024015 : TextConst 'ENU=Amount to Match;ESP=Importe a casar';
      Text004@161024016 : TextConst 'ENU=Matched Amount;ESP=Importe casado';
      Channel@161024018 : GUID;
      Text005@1160040002 : TextConst 'ENU=Difference;ESP=Diferencia';
      OurDocNo@1160040004 : Code[250];
      FilterOnOrderNo@1160040003 : Boolean;
      ShowWebInfoPart@1004 : Boolean;
      AmountToMatch@1002 : Decimal;
      MatchedAmount@1001 : Decimal;
      MatchDiffAmount@1000 : Decimal;
      ShowDocLines@6085574 : Boolean INDATASET;
      ResetMatchQst@6085573 : TextConst 'ENU=Do you want to reset matches for all document lines?;ESP=®Desea reiniciar los casamientos de todas las l°neas?';
      IsCalculatedFilterSet@1005 : Boolean;

    PROCEDURE SetDocument@1000000004(VAR NewDocument@1000000001 : Record 6085590);
    VAR
      Value@1000000003 : Record 6085593;
      Field@1000000005 : Record 6085580;
      CaptureMgnt@1000000006 : Codeunit 6085576;
      i@1000000000 : Integer;
      NoOfLines@1000000004 : Integer;
      Arr@1000000002 : ARRAY [100] OF Text[30];
    BEGIN
      GET(NewDocument."No.");
    END;

    PROCEDURE UpdateInfoBar@161024012();
    VAR
      AppMgnt@161024012 : Codeunit 45;
    BEGIN
      AmountToMatch := PurchDocMgnt.GetAmountToMatch(Rec);
      MatchedAmount := PurchDocMgnt.GetDocMatchedAmount(Rec);
      MatchDiffAmount := AmountToMatch - MatchedAmount;

      CaptureAddinLib.BuildMatchInfoBarCommand(CaptureXmlDoc,
        PurchDocMgnt.GetOurDocNoDesc(Rec),OurDocNo,
        Text003,FORMAT(AmountToMatch,0,AppMgnt.AutoFormatTranslate(1,PurchDocMgnt.GetCurrencyCode(Rec))),
        Text004,FORMAT(MatchedAmount,0,AppMgnt.AutoFormatTranslate(1,PurchDocMgnt.GetCurrencyCode(Rec))),
        Text005,FORMAT(MatchDiffAmount,0,AppMgnt.AutoFormatTranslate(1,PurchDocMgnt.GetCurrencyCode(Rec))));

      CaptureAddinLib.XmlToText(CaptureXmlDoc,InfoBarAddInSource);
      CLEAR(CaptureXmlDoc);
    END;

    BEGIN
    END.
  }
}

OBJECT Page 6085703 CDC Purch. Invoice Match Subp.
{
  OBJECT-PROPERTIES
  {
    Date=03/08/21;
    Time=12:02:44;
    Modified=Yes;
    Version List=DCW17.00.00.7.02;
  }
  PROPERTIES
  {
    Permissions=TableData 121=rm,
                TableData 6085700=rimd;
    CaptionML=[ENU=Purchase Receipt Lines;
               ESP=L°neas albar†n compra];
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table121;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 DefaultSorting := GETVIEW;
               END;

    OnAfterGetRecord=BEGIN
                       DocNoHideValue := NOT IsFirstDocLine;
                       IF PurchHeader."No." <> "Order No." THEN BEGIN
                         IF NOT PurchHeader.GET(PurchHeader."Document Type"::Order,"Order No.") THEN
                           CLEAR(PurchHeader);

                         IF PurchHeader."Currency Code" <> '' THEN
                           Currency.GET(PurchHeader."Currency Code");
                         Currency.InitRoundingPrecision;
                       END;

                       IF NOT PurchLine.GET(PurchHeader."Document Type",PurchHeader."No.","Order Line No.") THEN
                         CLEAR(PurchLine);

                       PurchDocMgnt.CalcMatchedValues(Currency,Document."No.",PurchDocType::Receipt,"Document No.","Line No.",
                         PurchLine."Direct Unit Cost",PurchLine."Line Discount %",MatchedQuantity,MatchedUnitCost,
                         MatchedLineDiscPct,MatchedLineAmount,MatchedDifference);

                       LineAmountOrder := PurchDocMgnt.GetReceiptLineAmount(Rec,MatchedQuantity,PurchHeader."Currency Code");

                       IsStrong := MatchedQuantity <> 0;
                       StyleCodeCosts := PurchDocMgnt.GetMatchStyle(MatchedQuantity,PurchLine."Direct Unit Cost",MatchedUnitCost);
                       StyleCodeDiscPct := PurchDocMgnt.GetMatchStyle(MatchedQuantity,PurchLine."Line Discount %",MatchedLineDiscPct);
                       StyleCodeDifference := PurchDocMgnt.GetMatchStyle(MatchedQuantity,0,MatchedDifference);
                     END;

    ActionList=ACTIONS
    {
      { 1160040006;  ;ActionContainer;
                      Name=ActionItems;
                      ActionContainerType=ActionItems }
      { 1160040005;1 ;ActionGroup;
                      Name=Line;
                      CaptionML=[ENU=&Line;
                                 ESP=&L°nea];
                      Image=Line }
      { 1160040004;2 ;Action    ;
                      Name=Card;
                      ShortCutKey=Shift+Ctrl+E;
                      CaptionML=[ENU=Card;
                                 ESP=Ficha];
                      ToolTipML=[ENU=View or change detailed information about the record on the document or journal line.;
                                 ESP=Permite ver o cambiar la informaci¢n detallada sobre el registro en el documento o en la l°nea del diario.];
                      RunObject=Page 136;
                      RunPageLink=No.=FIELD(Document No.);
                      Image=Edit }
      { 1160040003;2 ;Action    ;
                      Name=Toggle Match;
                      ShortCutKey=F9;
                      CaptionML=[ENU=&Toggle Match;
                                 ESP=Casar l°neas seleccionadas];
                      ToolTipML=[ENU=Set Matched Quantity equal to Quantity - Total Matched Quantity if Matched Quantity is zero. When Matched Quantity is different from zero, Matched Quantity is set to zero.;
                                 ESP=Establece la Cantidad casada igual a la Cantidad - Cantidad casada total si la Cantidad casada es cero. Cuando Cantidad casada es diferente de cero, Cantidad casada se establece a cero.];
                      OnAction=BEGIN
                                 UpdateMatchedQuantity(TRUE);
                               END;
                                }
      { 6085573 ;2   ;Action    ;
                      Name=ItemTrackingEntries;
                      ShortCutKey=Shift+Ctrl+I;
                      CaptionML=[ENU=Item &Tracking Entries;
                                 ESP=Movs. &seguim. prod.];
                      ToolTipML=[ENU=View serial or lot numbers that are assigned to items.;
                                 ESP=Permite ver los n£meros de serie o de lote que se asignan a los productos.];
                      Image=ItemTrackingLedger;
                      OnAction=VAR
                                 MatchTrackingMgt@6085573 : Codeunit 6085830;
                                 NewMatchedQty@6085574 : Decimal;
                               BEGIN
                                 MatchTrackingMgt.ShowItemTrackingForRcptLine(Rec,Document."No.",NewMatchedQty);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1000000000;0;Container;
                Name=ContentArea;
                ContainerType=ContentArea }

    { 161024016;1;Field   ;
                Name=EventNotifier;
                SourceExpr=EventNotifierSource;
                ControlAddIn=[Akeyto.DocumentCapture.Dynamics.Nav.EventNotifier;PublicKeyToken=0c53e51c0afe7001] }

    { 1000000001;1;Group  ;
                Name=Group;
                GroupType=Repeater }

    { 1000000043;2;Field  ;
                Name=Document No.;
                Lookup=Yes;
                ToolTipML=[ENU=Specifies the number of the purchase document.;
                           ESP=Especifica el n£mero del documento de compra.];
                SourceExpr="Document No.";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=DocNoHideValue;
                Style=Strong;
                StyleExpr=IsStrong;
                OnLookup=BEGIN
                           ShowDocument;
                         END;
                          }

    { 1000000003;2;Field  ;
                Name=Order No.;
                Lookup=Yes;
                ToolTipML=[ENU=Specifies the number of the purchase order that this invoice was posted from.;
                           ESP=Especifica el n£mero del pedido de compra desde el cual fue registrada esta factura.];
                SourceExpr="Order No.";
                Editable=FALSE;
                HideValue=DocNoHideValue;
                Style=Strong;
                StyleExpr=IsStrong;
                OnLookup=VAR
                           PurchHeader@1160040000 : Record 38;
                         BEGIN
                           IF PurchHeader.GET(PurchHeader."Document Type"::Order,"Order No.") THEN;
                           PurchHeader.SETRANGE("Document Type",PurchHeader."Document Type"::Order);
                           IF PAGE.RUNMODAL(0,PurchHeader) = ACTION::LookupOK THEN BEGIN
                             Text := PurchHeader."No.";
                             EXIT(TRUE);
                           END;
                         END;
                          }

    { 1000000042;2;Field  ;
                Name=Buy-from Vendor No.;
                ToolTipML=[ENU=Specifies the number of the vendor who delivers the products.;
                           ESP=Especifica el n£mero del proveedor que envi¢ los productos.];
                SourceExpr="Buy-from Vendor No.";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000041;2;Field  ;
                Name=Type;
                ToolTipML=[ENU=Specifies the line type.;
                           ESP=Especifica el tipo de l°nea.];
                SourceExpr=Type;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000040;2;Field  ;
                Name=No.;
                ToolTipML=[ENU=Specifies the number of a general ledger account, item, additional cost, or fixed asset, depending on what you selected in the Type field.;
                           ESP=Especifica el n£mero de una cuenta contable, un producto, un coste adicional o un activo fijo, seg£n lo que se haya seleccionado en el campo Tipo.];
                SourceExpr="No.";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000039;2;Field  ;
                Name=Variant Code;
                ToolTipML=[ENU=Specifies the variant of the item on the line.;
                           ESP=Especifica la variante del producto que figura en la l°nea.];
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000038;2;Field  ;
                Name=Description;
                ToolTipML=[ENU=Specifies a description of the entry of the product to be purchased. To add a non-transactional text line, fill in the Description field only.;
                           ESP=Especifica una descripci¢n del movimiento del producto que se va a comprar. Para agregar una l°nea de texto no transaccional, rellene solo el campo Descripci¢n.];
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1160040002;2;Field  ;
                Name=Description 2;
                ToolTipML=[ENU=Specifies a second description of the entry of the product purchased.;
                           ESP=Especifica una segunda descripci¢n del movimiento de producto comprado.];
                SourceExpr="Description 2";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000005;2;Field  ;
                Name=Quantity;
                ToolTipML=[ENU=Specifies the number of units of the item specified on the line.;
                           ESP=Indica el n£mero de unidades del producto especificado en la l°nea.];
                BlankZero=Yes;
                SourceExpr=Quantity;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000036;2;Field  ;
                Name=Currency Code;
                Lookup=No;
                DrillDown=No;
                ToolTipML=[ENU=Specifies the code of the currency of the amounts on the purchase lines.;
                           ESP=Especifica el c¢digo de divisa de los importes de las l°neas de compra.];
                SourceExpr="Currency Code";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000002;2;Field  ;
                Name=Control1000000002;
                CaptionML=[ENU=Direct Unit Cost (Order);
                           ESP=Coste unit. directo (Pedido)];
                ToolTipML=[ENU=Specifies the cost of one unit of the selected item or resource.;
                           ESP=Especifica el coste unitario del producto o recurso seleccionado.];
                BlankZero=Yes;
                SourceExpr=PurchLine."Direct Unit Cost";
                Editable=FALSE;
                StyleExpr=StyleCodeCosts }

    { 161024014;2;Field   ;
                Name=Control161024014;
                CaptionML=[ENU=Line Discount % (Order);
                           ESP=% Descuento l°nea (Pedido)];
                ToolTipML=[ENU=Specifies the discount percentage that is granted for the item on the line.;
                           ESP=Especifica el porcentaje de descuento aplicable al producto de la l°nea.];
                BlankZero=Yes;
                SourceExpr=PurchLine."Line Discount %";
                Visible=FALSE;
                Editable=FALSE;
                StyleExpr=StyleCodeDiscPct }

    { 1000000035;2;Field  ;
                Name=Shortcut Dimension 1 Code;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           ESP=Especifica el c¢digo de dimensi¢n del acceso directo 1, que es uno de los dos c¢digos de dimensi¢n globales que se configuran en la ventana Configuraci¢n de contabilidad.];
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000034;2;Field  ;
                Name=Shortcut Dimension 2 Code;
                ToolTipML=[ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                           ESP=Especifica el c¢digo de dimensi¢n del acceso directo 2, que es uno de los dos c¢digos de dimensi¢n globales que se configuran en la ventana Configuraci¢n de contabilidad.];
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000033;2;Field  ;
                Name=Location Code;
                ToolTipML=[ENU=Specifies a code for the location where you want the items to be placed when they are received.;
                           ESP=Especifica el c¢digo de almacÇn donde quiere que se guarden los productos recibidos.];
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000032;2;Field  ;
                Name=Unit of Measure Code;
                ToolTipML=[ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                           ESP=Especifica c¢mo se mide cada unidad del producto o el recurso, por ejemplo, en piezas u horas. De forma predeterminada, se inserta el valor en el campo Unidad de medida base de la ficha de producto o recurso.];
                SourceExpr="Unit of Measure Code";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000031;2;Field  ;
                Name=Unit of Measure;
                ToolTipML=[ENU=Specifies the unit of measure.;
                           ESP=Especifica la unidad de medida.];
                SourceExpr="Unit of Measure";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000030;2;Field  ;
                Name=Appl.-to Item Entry;
                ToolTipML=[ENU=Specifies the number of the item ledger entry that the document or journal line is applied -to.;
                           ESP=Especifica el n£mero del movimiento de producto en el que se liquida la l°nea de documento o diario.];
                BlankZero=Yes;
                SourceExpr="Appl.-to Item Entry";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000006;2;Field  ;
                Name=MatchedQuantity;
                CaptionML=[ENU=Matched Quantity;
                           ESP=Cantidad casada];
                ToolTipML=[ENU=Specifies the quantity matched with the incoming invoice to the purchase receipt line.;
                           ESP=Especifica la cantidad de la l°nea del albar†n de compra casada con la factura recibida.];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=MatchedQuantity;
                Style=Strong;
                StyleExpr=TRUE;
                OnValidate=BEGIN
                             UpdateMatchedQuantity(FALSE);
                           END;
                            }

    { 161024012;2;Field   ;
                Name=MatchedUnitCost;
                CaptionML=[ENU=Direct Unit Cost (Invoice);
                           ESP=Coste unit. directo (Factura)];
                ToolTipML=[ENU=Specifies the unit cost matched and used when creating purchase invoice lines upon registration.;
                           ESP=Especifica el coste unitario casado y el utilizado al crear l°neas de factura de compra al registrarse.];
                DecimalPlaces=2:5;
                BlankZero=Yes;
                SourceExpr=MatchedUnitCost;
                StyleExpr=StyleCodeCosts;
                OnValidate=BEGIN
                             UpdateMatchedDirectUnitCost(FALSE);
                           END;
                            }

    { 161024013;2;Field   ;
                Name=MatchedLineDiscPct;
                CaptionML=[ENU=Line Discount % (Invoice);
                           ESP=% Descuento l°nea (Factura)];
                ToolTipML=[ENU=Specifies the line discount percentage matched and used when creating purchase invoice lines upon registration.;
                           ESP=Especifica el porcentaje de descuento de l°nea casado y el utilizado al crear l°neas de factura de compra al registrarse.];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=MatchedLineDiscPct;
                Visible=FALSE;
                StyleExpr=StyleCodeDiscPct;
                OnValidate=BEGIN
                             UpdateMatchedLineDiscPct(FALSE);
                           END;
                            }

    { 1160040001;2;Field  ;
                Name=MatchedLineAmount;
                CaptionML=[ENU=Line Amount (Invoice);
                           ESP=Importe l°nea (Factura)];
                ToolTipML=[ENU=Specifies the line amount matched and used when creating purchase invoice lines upon registration.;
                           ESP=Especifica el importe de l°nea casado y utilizado al crear l°neas de factura de compra al registrarse.];
                BlankZero=Yes;
                SourceExpr=MatchedLineAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1160040000;2;Field  ;
                Name=MatchedDifference;
                CaptionML=[ENU=Difference;
                           ESP=Diferencia];
                ToolTipML=[ENU=Specifies the difference between the line amount and the amount on the purchase receipt line.;
                           ESP=Especifica la diferencia entre el importe de la l°nea y el importe en la l°nea del albar†n de compra.];
                BlankZero=Yes;
                SourceExpr=MatchedDifference;
                Editable=FALSE;
                StyleExpr=StyleCodeDifference }

    { 161024015;2;Field   ;
                Name=Control161024015;
                CaptionML=[ENU=Total Matched Quantity;
                           ESP=Cantidad casada total];
                ToolTipML=[ENU=Specifies the quantity matched with all documents to the line.;
                           ESP=Especifica la cantidad de la l°nea casada con todos los documentos.];
                DecimalPlaces=0:5;
                BlankZero=Yes;
                SourceExpr=PurchDocMgnt.CalculateMatchedQty(Document."No.",PurchDocType::Receipt,"Document No.","Line No.",FALSE);
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong;
                OnDrillDown=BEGIN
                              PurchDocMgnt.ShowMatchedSpec(PurchDocType::Receipt,"Document No.","Line No.");
                            END;
                             }

    { 1000000028;2;Field  ;
                Name=Job No.;
                ToolTipML=[ENU=Specifies the number of the related job.;
                           ESP=Especifica el n£mero del proyecto relacionado.];
                SourceExpr="Job No.";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000027;2;Field  ;
                Name=Prod. Order No.;
                ToolTipML=[ENU=Specifies the number of the related production order.;
                           ESP=Especifica el n£mero de la orden de producci¢n relacionada.];
                SourceExpr="Prod. Order No.";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000022;2;Field  ;
                Name=Expected Receipt Date;
                ToolTipML=[ENU="Specifies the date you expect the items to be available in your warehouse. If you leave the field blank, it will be calculated as follows: Planned Receipt Date + Safety Lead Time + Inbound Warehouse Handling Time = Expected Receipt Date.";
                           ESP="Permite especificar la fecha en que se espera que los productos estÇn disponibles en su almacÇn. Si deja el campo vac°o, se calcular† de la siguiente manera: Fecha de recepci¢n planificada + Plazo de seguridad + Tiempo de manipulaci¢n en almacÇn de entrada = Fecha de recepci¢n esperada."];
                SourceExpr="Expected Receipt Date";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000009;2;Field  ;
                Name=Qty. Rcd. Not Invoiced;
                ToolTipML=[ENU=Specifies the quantity of the received item that has been posted as received but that has not yet been posted as invoiced.;
                           ESP=Especifica la cantidad del producto recibido que se registr¢ como recibida, pero que a£n no se registr¢ como facturada.];
                BlankZero=Yes;
                SourceExpr="Qty. Rcd. Not Invoiced";
                Visible=FALSE;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 1000000004;2;Field  ;
                Name=Quantity Invoiced;
                ToolTipML=[ENU=Specifies how many units of the item on the line have been posted as invoiced.;
                           ESP=Especifica cu†ntas unidades del producto que figura en la l°nea se han registrado como facturadas.];
                BlankZero=Yes;
                SourceExpr="Quantity Invoiced";
                Editable=FALSE;
                Style=Strong;
                StyleExpr=IsStrong }

    { 6085574;2;Field     ;
                Name=Line Amount (Order);
                CaptionML=[ENU=Line Amount (Order);
                           ESP=Importe l°nea (Pedido)];
                ToolTipML=[ENU=Shows line amount calculated with price information from the order /return order line and quantity from match.;
                           ESP=Muestra el importe de la l°nea calculado con la informaci¢n del precio de la l°nea de pedido/devoluci¢n y la cantidad casada.];
                BlankNumbers=BlankZero;
                SourceExpr=LineAmountOrder;
                Visible=false;
                Editable=false;
                Style=Strong;
                StyleExpr=IsStrong }

  }
  CODE
  {
    VAR
      TempPurchRcptLine@1000000011 : TEMPORARY Record 121;
      PurchHeader@1160040002 : Record 38;
      PurchLine@1160040001 : Record 39;
      Currency@1160040000 : Record 4;
      PurchDocMgnt@1000000009 : Codeunit 6085709;
      Document@1000000000 : Record 6085590;
      EventNotifierSource@161024015 : BigText;
      Channel@161024014 : GUID;
      MatchedQuantity@1000000001 : Decimal;
      MatchedUnitCost@161024013 : Decimal;
      MatchedLineDiscPct@161024012 : Decimal;
      MatchedLineAmount@1160040003 : Decimal;
      MatchedDifference@6085576 : Decimal;
      DocNoHideValue@1000000002 : Boolean INDATASET;
      IsStrong@1160040004 : Boolean INDATASET;
      StyleCodeCosts@6085573 : Text[30];
      StyleCodeDiscPct@6085574 : Text[30];
      StyleCodeDifference@6085575 : Text[30];
      PurchDocType@6085577 : 'Receipt,Return Shipment,Order,Return Order';
      UnsupportedFilterMethodErr@1000 : TextConst 'ENU=Filter method %1 is not supported;ESP=MÇtodo filtro %1 no est† permitido.';
      CalculatedFilterEnabled@1001 : Boolean;
      LineAmountOrder@6085578 : Decimal;
      DefaultSorting@1002 : Text;

    LOCAL PROCEDURE IsFirstDocLine@2() : Boolean;
    VAR
      PurchRcptLine@1000 : Record 121;
    BEGIN
      IF CalculatedFilterEnabled THEN
        EXIT(TRUE);
      IF GETVIEW <> DefaultSorting THEN
        EXIT(TRUE);

      TempPurchRcptLine.RESET();
      TempPurchRcptLine.COPYFILTERS(Rec);
      TempPurchRcptLine.SETRANGE("Document No.","Document No.");
      IF NOT TempPurchRcptLine.FINDFIRST THEN BEGIN
        PurchRcptLine.COPYFILTERS(Rec);
        PurchRcptLine.SETRANGE("Document No.","Document No.");
        PurchRcptLine.SETFILTER("Qty. Rcd. Not Invoiced",'<>0');
        IF PurchRcptLine.FINDFIRST THEN BEGIN
          TempPurchRcptLine := PurchRcptLine;
          TempPurchRcptLine.INSERT();
        END;
      END;
      IF "Line No." = TempPurchRcptLine."Line No." THEN
        EXIT(TRUE);
    END;

    PROCEDURE UpdatePage@1000000002();
    BEGIN
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE ShowDocument@1000000000();
    VAR
      PurchRcptHeader@1000000000 : Record 120;
    BEGIN
      PurchRcptHeader.GET("Document No.");
      PAGE.RUN(PAGE::"Posted Purchase Receipt",PurchRcptHeader);
    END;

    PROCEDURE SetDocument@1000000006(VAR NewDocument@1000000000 : Record 6085590);
    BEGIN
      Document := NewDocument;
    END;

    PROCEDURE SetChannel@161024013(NewChannel@161024012 : GUID);
    BEGIN
      Channel := NewChannel;
    END;

    PROCEDURE UpdateMatchedQuantity@6085573(AutoCalcQtyCostsDiscount@6085573 : Boolean);
    VAR
      PurchRcptLine@6085574 : Record 121;
      PurchHeader@6085575 : Record 38;
      PurchLine@6085576 : Record 39;
      CDCModuleLicense@6085577 : Codeunit 6086008;
    BEGIN
      CDCModuleLicense.IsMatchingActivated(TRUE);
      CurrPage.SETSELECTIONFILTER(PurchRcptLine);
      IF PurchRcptLine.FINDSET THEN
        REPEAT
          IF NOT PurchHeader.GET(PurchHeader."Document Type"::Order,PurchRcptLine."Order No.") THEN
            CLEAR(PurchHeader);

          IF PurchHeader."Currency Code" <> '' THEN
            Currency.GET(PurchHeader."Currency Code");
          Currency.InitRoundingPrecision;

          IF NOT PurchLine.GET(PurchHeader."Document Type",PurchHeader."No.",PurchRcptLine."Order Line No.") THEN
            CLEAR(PurchLine);

          IF AutoCalcQtyCostsDiscount THEN
            PurchDocMgnt.CalcMatchedValues(Currency,Document."No.",PurchDocType::Receipt,
              PurchRcptLine."Document No.",PurchRcptLine."Line No.",
              PurchLine."Direct Unit Cost",PurchLine."Line Discount %",MatchedQuantity,MatchedUnitCost,
              MatchedLineDiscPct,MatchedLineAmount,MatchedDifference);

          PurchDocMgnt.UpdateMatchedQuantity(Document,PurchLine,Currency,PurchDocType::Receipt,
            PurchRcptLine."Document No.",PurchRcptLine."Line No.",PurchRcptLine.Quantity,
            PurchRcptLine."Qty. Rcd. Not Invoiced",MatchedQuantity,AutoCalcQtyCostsDiscount);

          LineAmountOrder := PurchDocMgnt.GetReceiptLineAmount(PurchRcptLine,MatchedQuantity,PurchHeader."Currency Code");
        UNTIL PurchRcptLine.NEXT = 0;
      UpdateEventNotifier;
    END;

    PROCEDURE UpdateMatchedDirectUnitCost@6085575(AutoCalcDirectUnitCost@6085573 : Boolean);
    BEGIN
      PurchDocMgnt.UpdateMatchedDirectUnitCost(Document,"Currency Code",PurchDocType::Receipt,"Document No.","Line No.",
        PurchLine."Direct Unit Cost",MatchedUnitCost,AutoCalcDirectUnitCost);
      UpdateEventNotifier;
    END;

    PROCEDURE UpdateMatchedLineDiscPct@6085577(AutoCalcLineDiscPct@6085573 : Boolean);
    BEGIN
      PurchDocMgnt.UpdateMatchedLineDiscPct(Document,PurchDocType::Receipt,"Document No.","Line No.",
        PurchLine."Line Discount %",MatchedLineDiscPct,AutoCalcLineDiscPct);
      UpdateEventNotifier;
    END;

    PROCEDURE UpdateEventNotifier@6085576();
    BEGIN
      CLEAR(EventNotifierSource);
      EventNotifierSource.ADDTEXT(FORMAT(TIME) + 'RAISEMESSAGE' + FORMAT(Channel));
      CurrPage.UPDATE;
    END;

    PROCEDURE SetOrderNo@6085593(OrderNo@1160040000 : Code[250]);
    VAR
      OrderNo2@6085578 : Code[250];
      OrderNoHasIllegalFilterChars@6085577 : Boolean;
      CaptureMgt@6085576 : Codeunit 6085576;
      InvalidOrderNoFilter@6085575 : Boolean;
      CDCPurchDocMgt@6085574 : Codeunit 6085709;
      DocNoFilter@6085573 : Code[250];
    BEGIN
      OrderNo2 := COPYSTR(OrderNo,1,MAXSTRLEN(OrderNo));
      OrderNoHasIllegalFilterChars := CaptureMgt.HasIllegalFilterCharacters(OrderNo2);

      InvalidOrderNoFilter := CDCPurchDocMgt.CheckOurOrderNoFilter(OrderNo);
      IF InvalidOrderNoFilter THEN
        DocNoFilter := OrderNo2
      ELSE
        DocNoFilter := CONVERTSTR(OrderNo,',','|');

      IF OrderNo <> '' THEN BEGIN
        IF NOT OrderNoHasIllegalFilterChars THEN
          SETFILTER("Order No.",DocNoFilter)
        ELSE
          IF STRLEN(DocNoFilter) <= MAXSTRLEN("Document No.") THEN
            SETRANGE("Order No.",DocNoFilter);
      END ELSE
        SETRANGE("Order No.");
      CurrPage.UPDATE(FALSE);
    END;

    PROCEDURE SetCalculatedFilter@1(EnableFilter@1000 : Boolean;FilterMethod@1001 : Code[20]);
    BEGIN
      CalculatedFilterEnabled := EnableFilter;
      IF NOT EnableFilter THEN BEGIN
        CLEARMARKS;
        MARKEDONLY(FALSE);
        EXIT;
      END;
      CASE FilterMethod OF
        'UNMATCHED':
          BEGIN
            IF FINDSET THEN REPEAT
              IF PurchDocMgnt.CalculateMatchedQty(Document."No.",PurchDocType::Receipt,"Document No.","Line No.",FALSE) = 0 THEN
                MARK(TRUE);
            UNTIL NEXT = 0;
          END;
        'AMOUNTDIFF':
          BEGIN
            IF FINDSET THEN REPEAT
              IF NOT PurchHeader.GET(PurchHeader."Document Type"::Order,"Order No.") THEN
                CLEAR(PurchHeader);
              IF PurchHeader."Currency Code" <> '' THEN
                Currency.GET(PurchHeader."Currency Code");
              Currency.InitRoundingPrecision;
              IF PurchLine.GET(PurchHeader."Document Type",PurchHeader."No.","Order Line No.") THEN BEGIN
                PurchDocMgnt.CalcMatchedValues(Currency,Document."No.",PurchDocType::Receipt,"Document No.",
                  "Line No.",PurchLine."Direct Unit Cost",PurchLine."Line Discount %",MatchedQuantity,
                  MatchedUnitCost,MatchedLineDiscPct,MatchedLineAmount,MatchedDifference);
                IF MatchedDifference <> 0 THEN
                  MARK(TRUE);
              END;
            UNTIL NEXT = 0;
          END;
        ELSE
          ERROR(UnsupportedFilterMethodErr,FilterMethod);
      END;
      MARKEDONLY(TRUE);
    END;

    LOCAL PROCEDURE ShowTracking@6085574();
    VAR
      ItemLedgEntry@1000 : Record 32;
      TempItemLedgEntry@1002 : TEMPORARY Record 32;
      TrackingForm@1001 : Page 99000822;
    BEGIN
      TESTFIELD(Type,Type::Item);
      IF "Item Rcpt. Entry No." <> 0 THEN BEGIN
        ItemLedgEntry.GET("Item Rcpt. Entry No.");
        TrackingForm.SetItemLedgEntry(ItemLedgEntry);
      END ELSE
        TrackingForm.SetMultipleItemLedgEntries(TempItemLedgEntry,
          DATABASE::"Purch. Rcpt. Line",0,"Document No.",'',0,"Line No.");

      TrackingForm.RUNMODAL;
    END;

    PROCEDURE SetFilters@1100288000(Document@1100288003 : Record 6085590);
    VAR
      RecRef@1100288000 : RecordRef;
      FieldRef@1100288001 : FieldRef;
      RecIDMgt@1100288002 : Codeunit 6085604;
      MatchFilters@1100288004 : Record 60100;
      CaptureMgt@1100288005 : Codeunit 6085576;
      FilterStr@1100288006 : Text;
      Field@1100288007 : Record 6085580;
      RecHasFilters@1100288008 : Boolean;
    BEGIN
      RecHasFilters := HASFILTER;

      RecRef.GETTABLE(Rec);
      MatchFilters.SETRANGE("Template No.",Document."Template No.");
      MatchFilters.SETRANGE("Table No.",DATABASE::"Purch. Rcpt. Line");
      IF NOT MatchFilters.FINDSET THEN
        EXIT;

      REPEAT
        IF RecHasFilters THEN
          RecRef.RESET
        ELSE BEGIN
          FilterStr := CaptureMgt.GetText(Document,Field.Type::Header,MatchFilters."Filter Field",0);
          RecIDMgt.FilterRecRef(RecRef,MatchFilters."Field No.",FilterStr);
        END;
      UNTIL MatchFilters.NEXT = 0;

      RecRef.SETTABLE(Rec);
      CurrPage.UPDATE(FALSE);
    END;

    BEGIN
    END.
  }
}

